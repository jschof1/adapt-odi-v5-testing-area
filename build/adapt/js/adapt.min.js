require(['html-react-parser', 'semver', 'bowser', 'react', 'react-dom', 'libraries/mediaelement-and-player', 'libraries/rangeslider', 'libraries/draggabilly', 'libraries/lottie-player', 'libraries/lottie-interactivity.min', 'libraries/jquery.dataTables.min', 'handlebars', 'libraries/SCORM_API_wrapper', 'underscore', 'libraries/lzma-min', 'libraries/lzma_worker-min.js', 'libraries/async.min', 'libraries/xapiwrapper.min', 'libraries/url-polyfill.min', 'libraries/lottie.min'], function (HTMLReactParser, semver, Bowser, React, ReactDOM$1, mediaelementAndPlayer, rangeslider, Draggabilly, lottiePlayer, LottieInteractivity, jquery_dataTables_min, Handlebars$1, pipwerks, _$2, lzmaMin, lzma_workerMin_js, Async, xapiwrapper_min, urlPolyfill_min, Lottie) {

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var HTMLReactParser__default = /*#__PURE__*/_interopDefaultLegacy(HTMLReactParser);
  var semver__default = /*#__PURE__*/_interopDefaultLegacy(semver);
  var Bowser__default = /*#__PURE__*/_interopDefaultLegacy(Bowser);
  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM$1);
  var Draggabilly__default = /*#__PURE__*/_interopDefaultLegacy(Draggabilly);
  var LottieInteractivity__namespace = /*#__PURE__*/_interopNamespace(LottieInteractivity);
  var Handlebars__default = /*#__PURE__*/_interopDefaultLegacy(Handlebars$1);
  var pipwerks__default = /*#__PURE__*/_interopDefaultLegacy(pipwerks);
  var ___default = /*#__PURE__*/_interopDefaultLegacy(_$2);
  var Async__default = /*#__PURE__*/_interopDefaultLegacy(Async);
  var Lottie__default = /*#__PURE__*/_interopDefaultLegacy(Lottie);

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var Wait = __AMD("core/js/wait", function (_Backbone$Controller) {
    _inherits(Wait, _Backbone$Controller);

    var _super = _createSuper(Wait);

    function Wait() {
      _classCallCheck(this, Wait);

      return _super.apply(this, arguments);
    }

    _createClass(Wait, [{
      key: "initialize",
      value: function initialize() {
        this._waitCount = 0;
        this._callbackHandle = null;
        this.being = this.begin.bind(this);
        this.end = this.end.bind(this);
      }
    }, {
      key: "isWaiting",
      value: function isWaiting() {
        return this._waitCount !== 0;
      }
    }, {
      key: "begin",
      value: function begin() {
        if (!this.isWaiting()) this.trigger('wait');
        this._waitCount++;

        if (this._callbackHandle) {
          clearTimeout(this._callbackHandle);
          this._callbackHandle = null;
        }

        return this;
      }
    }, {
      key: "end",
      value: function end() {
        if (!this.isWaiting()) return this;
        this._waitCount--;
        if (this.isWaiting() || this._callbackHandle) return this;
        this._callbackHandle = setTimeout(function () {
          this._callbackHandle = null;
          this.trigger('ready');
        }.bind(this), 0);
        return this;
      }
    }, {
      key: "queue",
      value: function queue(callback) {
        var _this = this;

        if (!callback) {
          this.begin();
          return new Promise(function (resolve) {
            _this.once('ready', resolve);

            _this.end();
          });
        }

        this.begin();
        this.once('ready', callback);
        this.end();
        return this;
      }
    }, {
      key: "for",
      value: function _for(callback) {
        var _this2 = this;

        this.begin();

        _.defer(function () {
          return callback(_.once(_this2.end));
        });

        return this;
      }
    }]);

    return Wait;
  }(Backbone.Controller));

  var LockingModel = __AMD("core/js/models/lockingModel", function (_Backbone$Model) {
    _inherits(LockingModel, _Backbone$Model);

    var _super = _createSuper(LockingModel);

    function LockingModel() {
      _classCallCheck(this, LockingModel);

      return _super.apply(this, arguments);
    }

    _createClass(LockingModel, [{
      key: "set",
      value: function set(attrName, attrVal) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var stopProcessing = _typeof(attrName) === 'object' || typeof attrVal !== 'boolean' || !this.isLocking(attrName);
        if (stopProcessing) return _get(_getPrototypeOf(LockingModel.prototype), "set", this).apply(this, arguments);
        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to change a locked attribute');
          options.pluginName = 'compatibility';
        }

        var pluginName = options.pluginName;

        if (this.defaults[attrName] !== undefined) {
          this._lockedAttributes[attrName] = !this.defaults[attrName];
        }

        var lockingValue = this._lockedAttributes[attrName];
        var isAttemptingToLock = lockingValue === attrVal;

        if (isAttemptingToLock) {
          this.setLockState(attrName, true, {
            pluginName: pluginName,
            skipcheck: true
          });
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, lockingValue);
        }

        this.setLockState(attrName, false, {
          pluginName: pluginName,
          skipcheck: true
        });
        var totalLockValue = this.getLockCount(attrName, {
          skipcheck: true
        });

        if (totalLockValue === 0) {
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, !lockingValue);
        }

        return this;
      }
    }, {
      key: "setLocking",
      value: function setLocking(attrName, defaultLockValue) {
        if (this.isLocking(attrName)) return;
        if (!this._lockedAttributes) this._lockedAttributes = {};
        this._lockedAttributes[attrName] = defaultLockValue;
      }
    }, {
      key: "unsetLocking",
      value: function unsetLocking(attrName) {
        if (!this.isLocking(attrName)) return;
        if (!this._lockedAttributes) return;
        delete this._lockedAttributes[attrName];
        delete this._lockedAttributesValues[attrName];

        if (Object.keys(this._lockedAttributes).length === 0) {
          delete this._lockedAttributes;
          delete this._lockedAttributesValues;
        }
      }
    }, {
      key: "isLocking",
      value: function isLocking(attrName) {
        var isCheckingGeneralLockingState = attrName === undefined;
        var isUsingLockedAttributes = Boolean(this.lockedAttributes || this._lockedAttributes);

        if (isCheckingGeneralLockingState) {
          return isUsingLockedAttributes;
        }

        if (!isUsingLockedAttributes) return false;

        if (!this._lockedAttributes) {
          this._lockedAttributes = _.result(this, 'lockedAttributes');
        }

        var isAttributeALockingAttribute = this._lockedAttributes.hasOwnProperty(attrName);

        if (!isAttributeALockingAttribute) return false;

        if (!this._lockedAttributesValues) {
          this._lockedAttributesValues = {};
        }

        if (!this._lockedAttributesValues[attrName]) {
          this._lockedAttributesValues[attrName] = {};
        }

        return true;
      }
    }, {
      key: "isLocked",
      value: function isLocked(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        return this.getLockCount(attrName) > 0;
      }
    }, {
      key: "getLockCount",
      value: function getLockCount(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        var isGettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (isGettingValueForSpecificPlugin) {
          return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
        }

        var lockingAttributeValues = Object.values(this._lockedAttributesValues[attrName]);
        var lockingAttributeValuesSum = lockingAttributeValues.reduce(function (sum, value) {
          return sum + (value ? 1 : 0);
        }, 0);
        return lockingAttributeValuesSum;
      }
    }, {
      key: "setLockState",
      value: function setLockState(attrName, value, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return this;
        }

        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to set a locked attribute lock value');
          options.pluginName = 'compatibility';
        }

        if (value) {
          this._lockedAttributesValues[attrName][options.pluginName] = value;
        } else {
          delete this._lockedAttributesValues[attrName][options.pluginName];
        }

        return this;
      }
    }]);

    return LockingModel;
  }(Backbone.Model));

  var AdaptSingleton = function (_LockingModel) {
    _inherits(AdaptSingleton, _LockingModel);

    var _super = _createSuper(AdaptSingleton);

    function AdaptSingleton() {
      _classCallCheck(this, AdaptSingleton);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSingleton, [{
      key: "initialize",
      value: function initialize() {
        this.loadScript = window.__loadScript;
        this.location = {};
        this.store = {};
        this.setupWait();
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canScroll: true,
          _outstandingCompletionChecks: 0,
          _pluginWaitCount: 0,
          _isStarted: false,
          _shouldDestroyContentObjects: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canScroll: false
        };
      }
    }, {
      key: "componentStore",
      get: function () {
        this.log.deprecated('Adapt.componentStore, please use Adapt.store instead');
        return this.store;
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this = this;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.addDirection();
                  this.disableAnimation();
                  this.trigger('adapt:preInitialize');
                  _context2.next = 5;
                  return this.wait.queue();

                case 5:
                  this.deferUntilCompletionChecked(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _this.trigger('adapt:start');

                            _context.next = 3;
                            return _this.wait.queue();

                          case 3:
                            if (!Backbone.History.started) {
                              Backbone.history.start();
                            }

                            _this.set('_isStarted', true);

                            _this.trigger('adapt:initialize');

                            _context.next = 8;
                            return _this.wait.queue();

                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })));

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "checkingCompletion",
      value: function checkingCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks + 1);
      }
    }, {
      key: "checkedCompletion",
      value: function checkedCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks - 1);
      }
    }, {
      key: "deferUntilCompletionChecked",
      value: function () {
        var _deferUntilCompletionChecked = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var _this2 = this;

          var callback,
              _args3 = arguments;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  callback = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : function () {};

                  if (!(this.get('_outstandingCompletionChecks') === 0)) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", callback());

                case 3:
                  return _context3.abrupt("return", new Promise(function (resolve) {
                    var checkIfAnyChecksOutstanding = function (model, outstandingChecks) {
                      if (outstandingChecks !== 0) return;

                      _this2.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

                      callback();
                      resolve();
                    };

                    _this2.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);
                  }));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function deferUntilCompletionChecked() {
          return _deferUntilCompletionChecked.apply(this, arguments);
        }

        return deferUntilCompletionChecked;
      }()
    }, {
      key: "setupWait",
      value: function setupWait() {
        var _this3 = this;

        this.wait = new Wait();

        var beginWait = function () {
          _this3.log.deprecated('Use Adapt.wait.begin() as Adapt.trigger(\'plugin:beginWait\') may be removed in the future');

          _this3.wait.begin();
        };

        var endWait = function () {
          _this3.log.deprecated('Use Adapt.wait.end() as Adapt.trigger(\'plugin:endWait\') may be removed in the future');

          _this3.wait.end();
        };

        var ready = function () {
          if (_this3.wait.isWaiting()) {
            return;
          }

          var isEventListening = _this3._events['plugins:ready'];

          if (!isEventListening) {
            return;
          }

          _this3.log.deprecated("Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future");

          _this3.trigger('plugins:ready');
        };

        this.listenTo(this.wait, 'ready', ready);
        this.listenTo(this, {
          'plugin:beginWait': beginWait,
          'plugin:endWait': endWait
        });
      }
    }, {
      key: "isWaitingForPlugins",
      value: function isWaitingForPlugins() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future');
        return this.wait.isWaiting();
      }
    }, {
      key: "checkPluginsReady",
      value: function checkPluginsReady() {
        this.log.deprecated('Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future');

        if (this.isWaitingForPlugins()) {
          return;
        }

        this.trigger('plugins:ready');
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function navigateToElement() {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function scrollTo() {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }, {
      key: "register",
      value: function register(name, object) {
        var _this4 = this;

        if (Array.isArray(name)) {
          name.forEach(function (name) {
            return _this4.register(name, object);
          });
          return object;
        }

        if (name.split(' ').length > 1) {
          this.register(name.split(' '), object);
          return object;
        }

        if (!object.view && !object.model || object instanceof Backbone.View) {
          this.log.deprecated('View-only registrations are no longer supported');
          object = {
            view: object
          };
        }

        if (object.view && !object.view.template) {
          object.view.template = name;
        }

        var isModelSetAndInvalid = object.model && !(object.model.prototype instanceof Backbone.Model) && !(object.model instanceof Function);

        if (isModelSetAndInvalid) {
          throw new Error('The registered model is not a Backbone.Model or Function');
        }

        var isViewSetAndInvalid = object.view && !(object.view.prototype instanceof Backbone.View) && !(object.view instanceof Function);

        if (isViewSetAndInvalid) {
          throw new Error('The registered view is not a Backbone.View or Function');
        }

        this.store[name] = Object.assign({}, this.store[name], object);
        return object;
      }
    }, {
      key: "getViewName",
      value: function getViewName(nameModelViewOrData) {
        var _this5 = this;

        if (typeof nameModelViewOrData === 'string') {
          return nameModelViewOrData;
        }

        if (nameModelViewOrData instanceof Backbone.Model) {
          nameModelViewOrData = nameModelViewOrData.toJSON();
        }

        if (nameModelViewOrData instanceof Backbone.View) {
          var foundName;
          Object.entries(this.store).forEach(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                key = _ref3[0],
                entry = _ref3[1];

            if (!(entry !== null && entry !== void 0 && entry.view)) return;
            if (!(nameModelViewOrData instanceof entry.view)) return;
            foundName = key;
            return true;
          });
          return foundName;
        }

        if (nameModelViewOrData instanceof Object) {
          var names = [typeof nameModelViewOrData._view === 'string' && nameModelViewOrData._view, typeof nameModelViewOrData._component === 'string' && nameModelViewOrData._component, typeof nameModelViewOrData._type === 'string' && nameModelViewOrData._type].filter(Boolean);

          if (names.length) {
            var name = names.find(function (name) {
              var _this5$store$name;

              return (_this5$store$name = _this5.store[name]) === null || _this5$store$name === void 0 ? void 0 : _this5$store$name.view;
            });
            return name || names.pop();
          }
        }

        throw new Error('Cannot derive view class name from input');
      }
    }, {
      key: "getViewClass",
      value: function getViewClass(nameModelViewOrData) {
        var _object$view;

        var name = this.getViewName(nameModelViewOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A view for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneView = ((_object$view = object.view) === null || _object$view === void 0 ? void 0 : _object$view.prototype) instanceof Backbone.View;

        if (!isBackboneView && object.view instanceof Function) {
          return object.view();
        }

        return object.view;
      }
    }, {
      key: "getModelName",
      value: function getModelName(nameModelOrData) {
        var _this6 = this;

        if (typeof nameModelOrData === 'string') {
          return nameModelOrData;
        }

        if (nameModelOrData instanceof Backbone.Model) {
          nameModelOrData = nameModelOrData.toJSON();
        }

        if (nameModelOrData instanceof Object) {
          var _entry$view;

          var name = nameModelOrData._component;
          var entry = this.store[name];
          var isViewOnlyQuestion = entry && !entry.model && ((_entry$view = entry.view) === null || _entry$view === void 0 ? void 0 : _entry$view._isQuestionType);

          if (isViewOnlyQuestion) {
            this.log.deprecated("Assuming a question model for a view-only question: ".concat(name));
            return 'question';
          }

          var names = [typeof nameModelOrData._model === 'string' && nameModelOrData._model, typeof nameModelOrData._component === 'string' && nameModelOrData._component, typeof nameModelOrData._type === 'string' && nameModelOrData._type].filter(Boolean);

          if (names.length) {
            var _name = names.find(function (name) {
              var _this6$store$name;

              return (_this6$store$name = _this6.store[name]) === null || _this6$store$name === void 0 ? void 0 : _this6$store$name.model;
            });

            return _name || names.pop();
          }
        }

        throw new Error('Cannot derive model class name from input');
      }
    }, {
      key: "getModelClass",
      value: function getModelClass(nameModelOrData) {
        var _object$model;

        var name = this.getModelName(nameModelOrData);
        var object = this.store[name];

        if (!object) {
          this.log.warnOnce("A model for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneModel = ((_object$model = object.model) === null || _object$model === void 0 ? void 0 : _object$model.prototype) instanceof Backbone.Model;

        if (!isBackboneModel && object.model instanceof Function) {
          return object.model();
        }

        return object.model;
      }
    }, {
      key: "findById",
      value: function findById(id) {
        return this.data.findById(id);
      }
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId(id) {
        var model = this.data.findById(id);
        if (!model) return;
        if (model === this.parentView.model) return this.parentView;
        var idPathToView = [id];
        var currentLocationId = this.location._currentId;
        var currentLocationModel = model.getAncestorModels().find(function (model) {
          var modelId = model.get('_id');
          if (modelId === currentLocationId) return true;
          idPathToView.unshift(modelId);
          return false;
        });

        if (!currentLocationModel) {
          return console.warn("Adapt.findViewByModelId() unable to find view for model id: ".concat(id));
        }

        var foundView = idPathToView.reduce(function (view, currentId) {
          if (!view) return null;
          var childViews = view.getChildViews();
          return childViews === null || childViews === void 0 ? void 0 : childViews.find(function (view) {
            return view.model.get('_id') === currentId;
          });
        }, this.parentView);
        return foundView;
      }
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition(trackingPosition) {
        return this.data.findByTrackingPosition(trackingPosition);
      }
    }, {
      key: "parseRelativeString",
      value: function parseRelativeString(relativeString) {
        var splitIndex = relativeString.search(/[ +\-\d]{1}/);
        if (splitIndex === -1) splitIndex = relativeString.length;
        var type = relativeString.slice(0, splitIndex).replace(/^@/, '');
        var offset = parseInt(relativeString.slice(splitIndex).trim() || 0);
        return {
          type: type,
          offset: offset
        };
      }
    }, {
      key: "addDirection",
      value: function addDirection() {
        var defaultDirection = this.config.get('_defaultDirection');
        $('html').addClass('dir-' + defaultDirection).attr('dir', defaultDirection);
      }
    }, {
      key: "disableAnimation",
      value: function disableAnimation() {
        var disableAnimationArray = this.config.get('_disableAnimationFor');
        var disableAnimation = this.config.get('_disableAnimation');

        if (disableAnimationArray) {
          for (var i = 0, l = disableAnimationArray.length; i < l; i++) {
            if (!$('html').is(disableAnimationArray[i])) continue;
            this.config.set('_disableAnimation', true);
            $('html').addClass('disable-animation');
            console.log('Animation disabled.');
          }

          return;
        }

        $('html').toggleClass('disable-animation', disableAnimation === true);
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
          var currentView;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  currentView = this.parentView;

                  if (currentView) {
                    currentView.model.setOnChildren({
                      _isReady: false,
                      _isRendered: false
                    });
                  }

                  this.trigger('preRemove', currentView);
                  _context6.next = 5;
                  return this.wait.queue();

                case 5:
                  if (currentView && this.get('_shouldDestroyContentObjects')) {
                    currentView.destroy();
                  }

                  this.trigger('remove', currentView);

                  _.defer(this.trigger.bind(this), 'postRemove', currentView);

                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function remove() {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }]);

    return AdaptSingleton;
  }(LockingModel);

  var Adapt = __AMD("core/js/adapt", new AdaptSingleton());

  var TemplateRenderEvent = __AMD("core/js/templateRenderEvent", function (_Backbone$Controller) {
    _inherits(TemplateRenderEvent, _Backbone$Controller);

    var _super = _createSuper(TemplateRenderEvent);

    function TemplateRenderEvent() {
      _classCallCheck(this, TemplateRenderEvent);

      return _super.apply(this, arguments);
    }

    _createClass(TemplateRenderEvent, [{
      key: "initialize",
      value: function initialize(type, name, mode, value, args) {
        this.type = type;
        this.name = name;
        this.mode = mode;
        this.value = value;
        this.args = args;
      }
    }]);

    return TemplateRenderEvent;
  }(Backbone.Controller));

  function onRender(cb) {
    var intercept = function (object, name, mode, cb) {
      return object[name] = cb.bind(object, object[name], name, mode);
    };

    Object.keys(Handlebars.templates).forEach(function (name) {
      intercept(Handlebars.templates, name, 'template', cb);
    });
    Object.keys(Handlebars.partials).forEach(function (name) {
      intercept(Handlebars.partials, name, 'partial', cb);
    });
  }

  onRender(function (template, name, mode) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
    Adapt.trigger(preRenderEvent.type, preRenderEvent);
    var value = template.apply(void 0, _toConsumableArray(preRenderEvent.args));
    var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
    Adapt.trigger(postRenderEvent.type, postRenderEvent);
    return postRenderEvent.value;
  });

  Adapt.on('app:dataReady', function () {
    var config = Adapt.config.get('_fixes');
    if ((config === null || config === void 0 ? void 0 : config._imgLazyLoad) === false) return;
    applyImgLoadingFix();
  });

  function applyImgLoadingFix() {
    var findImgTag = /<img([^>]*)>/gi;
    var hasLoadingAttr = / loading=/gi;
    Adapt.on('template:postRender partial:postRender', function (event) {
      var imgTagsFound = event.value.match(findImgTag);

      if (!imgTagsFound) {
        return;
      }

      event.value = imgTagsFound.reduce(function (value, img) {
        if (hasLoadingAttr.test(img)) {
          return value;
        }

        return value.replace(img, img.replace(findImgTag, '<img loading="eager"$1>'));
      }, event.value);
    });
    Adapt.on('reactElement:preRender', function (event) {
      if (event.name !== 'img') return;
      var options = event.args[1] = event.args[1] || {};
      if (options && options.hasOwnProperty('loading')) return;
      options.loading = 'eager';
    });
  }

  var LOG_LEVEL = ENUM(['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']);
  var LOG_LEVEL$1 = __AMD("core/js/enums/logLevelEnum", LOG_LEVEL);

  var Logging = function (_Backbone$Controller) {
    _inherits(Logging, _Backbone$Controller);

    var _super = _createSuper(Logging);

    function Logging() {
      _classCallCheck(this, Logging);

      return _super.apply(this, arguments);
    }

    _createClass(Logging, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _isEnabled: true,
          _level: LOG_LEVEL$1.INFO.asLowerCase,
          _console: true,
          _warnFirstOnly: true
        };
        this._warned = {};
        this.listenToOnce(Adapt, 'configModel:dataLoaded', this.onLoadConfigData);
      }
    }, {
      key: "onLoadConfigData",
      value: function onLoadConfigData() {
        this.loadConfig();
        this.debug('Logging config loaded');
        this.trigger('log:ready');
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_logging')) {
          this._config = Adapt.config.get('_logging');
        }

        this.checkQueryStringOverride();
      }
    }, {
      key: "checkQueryStringOverride",
      value: function checkQueryStringOverride() {
        var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
        if (!matches || matches.length < 2) return;
        var override = LOG_LEVEL$1(matches[1].toUpperCase());
        if (!override) return;
        this._config._level = override.asLowerCase;
        this.debug('Loglevel override in query string:', this._config._level);
      }
    }, {
      key: "debug",
      value: function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._log(LOG_LEVEL$1.DEBUG, args);
      }
    }, {
      key: "info",
      value: function info() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._log(LOG_LEVEL$1.INFO, args);
      }
    }, {
      key: "warn",
      value: function warn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._log(LOG_LEVEL$1.ERROR, args);
      }
    }, {
      key: "fatal",
      value: function fatal() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        this._log(LOG_LEVEL$1.FATAL, args);
      }
    }, {
      key: "removed",
      value: function removed() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        args = ['REMOVED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        args = ['DEPRECATED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "warnOnce",
      value: function warnOnce() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (this._hasWarned(args)) {
          return;
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "_log",
      value: function _log(level, data) {
        var isEnabled = this._config._isEnabled;
        if (!isEnabled) return;
        var configLevel = LOG_LEVEL$1(this._config._level.toUpperCase());
        var isLogLevelAllowed = level >= configLevel;
        if (!isLogLevelAllowed) return;

        this._logToConsole(level, data);

        this.trigger('log', level, data);
        this.trigger('log:' + level.asLowerCase, level, data);
      }
    }, {
      key: "_logToConsole",
      value: function _logToConsole(level, data) {
        var shouldLogToConsole = this._config._console;
        if (!shouldLogToConsole) return;
        var log = [level.asUpperCase + ':'];
        data && log.push.apply(log, _toConsumableArray(data));

        if (console[level.asLowerCase]) {
          var _console;

          (_console = console)[level.asLowerCase].apply(_console, log);
        } else {
          var _console2;

          (_console2 = console).log.apply(_console2, log);
        }
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        if (!this._config._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }]);

    return Logging;
  }(Backbone.Controller);

  var logging = __AMD("core/js/logging", Adapt.log = new Logging());

  Adapt.on('app:dataReady', function () {
    var config = Adapt.config.get('_fixes');
    if ((config === null || config === void 0 ? void 0 : config._jsxReactHelpersHTML) === false) return;
    applyReactHelpersHTML();
  });

  function applyReactHelpersHTML() {
    Adapt.on('reactElement:preRender', function (event) {
      var _event$args = _toArray(event.args),
          tagName = _event$args[0],
          props = _event$args[1],
          children = _event$args.slice(2);

      if (!children) return;
      if (!Array.isArray(children)) children = [children];
      children = children.filter(Boolean);
      var hasSomeUnsafeConversions = children.some(function (c) {
        return c === null || c === void 0 ? void 0 : c.__html;
      });
      if (!hasSomeUnsafeConversions) return;
      var hasManyChildren = children.length > 1;

      if (hasManyChildren) {
        event.args = event.args.map(function (child) {
          if (!child || !child.__html) return child;
          var attributes = Object.entries(props).map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                name = _ref2[0],
                value = _ref2[1];

            return "".concat(name, "=\"").concat(value, "\"");
          }).join(' ');
          logging.warnOnce("html() call should be the only child in its parent <".concat(tagName, " ").concat(attributes, ">"));
          return child.__html ? HTMLReactParser__default['default'](child.__html) : undefined;
        });
        return;
      }

      props = event.args[1] = event.args[1] || {};
      props.dangerouslySetInnerHTML = children[0];
      event.args.length = 2;
    });
  }

  var BrowserFocus = __AMD("core/js/a11y/browserFocus", function (_Backbone$Controller) {
    _inherits(BrowserFocus, _Backbone$Controller);

    var _super = _createSuper(BrowserFocus);

    function BrowserFocus() {
      _classCallCheck(this, BrowserFocus);

      return _super.apply(this, arguments);
    }

    _createClass(BrowserFocus, [{
      key: "initialize",
      value: function initialize() {
        this._onBlur = this._onBlur.bind(this);
        this._onClick = this._onClick.bind(this);
        this.$body = $('body');
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        this.$body.on('blur', '*', this._onBlur).on('blur', this._onBlur);
        this.$body[0].addEventListener('click', this._onClick, true);
      }
    }, {
      key: "_onBlur",
      value: function _onBlur(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
          return;
        }

        var $element = $(event.target);

        if ($element.is('[data-a11y-force-focus]')) {
          $element.removeAttr('tabindex data-a11y-force-focus');
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (!$element.is('[disabled]')) {
          return;
        }

        Adapt.a11y.focusNext($element);
      }
    }, {
      key: "_onClick",
      value: function _onClick(event) {
        var $element = $(event.target);
        var isAriaDisabled = $element.closest('[aria-disabled=true]').length === 1;

        if (isAriaDisabled) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
          return;
        }

        var $stack = $([].concat(_toConsumableArray($element.toArray()), _toConsumableArray($element.parents().toArray())));
        var $focusable = $stack.filter(config._options._tabbableElements);

        if (!$focusable.length) {
          return;
        }

        $focusable[0].focus();
      }
    }]);

    return BrowserFocus;
  }(Backbone.Controller));

  var FocusOptions = __AMD("core/js/a11y/focusOptions", function FocusOptions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$preventScroll = _ref.preventScroll,
        preventScroll = _ref$preventScroll === void 0 ? false : _ref$preventScroll,
        _ref$defer = _ref.defer,
        defer = _ref$defer === void 0 ? false : _ref$defer;

    _classCallCheck(this, FocusOptions);

    this.preventScroll = preventScroll;
    this.defer = defer;
  });

  var KeyboardFocusOutline = __AMD("core/js/a11y/keyboardFocusOutline", function (_Backbone$Controller) {
    _inherits(KeyboardFocusOutline, _Backbone$Controller);

    var _super = _createSuper(KeyboardFocusOutline);

    function KeyboardFocusOutline() {
      _classCallCheck(this, KeyboardFocusOutline);

      return _super.apply(this, arguments);
    }

    _createClass(KeyboardFocusOutline, [{
      key: "initialize",
      value: function initialize() {
        this._onKeyDown = this._onKeyDown.bind(this);
        this.$html = $('html');
        this.showOnKeys = {
          9: true,
          13: true,
          32: true,
          37: true,
          38: true,
          39: true,
          40: true
        };
        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        document.addEventListener('keydown', this._onKeyDown);

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
          return;
        }

        this.$html.addClass('a11y-disable-focusoutline');
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        var config = Adapt.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
          return;
        }

        var $element = $(event.target);

        if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
          return;
        }

        this.$html.removeClass('a11y-disable-focusoutline');
      }
    }]);

    return KeyboardFocusOutline;
  }(Backbone.Controller));

  var Log = __AMD("core/js/a11y/log", function (_Backbone$Controller) {
    _inherits(Log, _Backbone$Controller);

    var _super = _createSuper(Log);

    function Log() {
      _classCallCheck(this, Log);

      return _super.apply(this, arguments);
    }

    _createClass(Log, [{
      key: "initialize",
      value: function initialize() {
        this._warned = {};
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        var config = Adapt.a11y.config;

        if (!config._options._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }, {
      key: "_canWarn",
      value: function _canWarn() {
        var config = Adapt.a11y.config;
        return Boolean(config._options._warn);
      }
    }, {
      key: "removed",
      value: function removed() {
        var _Adapt$log;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log = Adapt.log).removed.apply(_Adapt$log, _toConsumableArray(args));

        return this;
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        var _Adapt$log2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        (_Adapt$log2 = Adapt.log).deprecated.apply(_Adapt$log2, _toConsumableArray(args));

        return this;
      }
    }]);

    return Log;
  }(Backbone.Controller));

  var Scroll = __AMD("core/js/a11y/scroll", function (_Backbone$Controller) {
    _inherits(Scroll, _Backbone$Controller);

    var _super = _createSuper(Scroll);

    function Scroll() {
      _classCallCheck(this, Scroll);

      return _super.apply(this, arguments);
    }

    _createClass(Scroll, [{
      key: "initialize",
      value: function initialize() {
        this._onTouchStart = this._onTouchStart.bind(this);
        this._onTouchEnd = this._onTouchEnd.bind(this);
        this._onScrollEvent = this._onScrollEvent.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._scrollDisabledElements = $([]);
        this.$window = $(window);
        this.$body = $('body');
        this._preventScrollOnKeys = {
          37: true,
          38: true,
          39: true,
          40: true
        };
        this._ignoreKeysOnElementsMatching = 'textarea, input, select';
        this._isRunning = false;
        this._touchStartEventObject = null;
      }
    }, {
      key: "disable",
      value: function disable($elements) {
        $elements = $($elements);
        this._scrollDisabledElements = this._scrollDisabledElements.add($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "enable",
      value: function enable($elements) {
        $elements = $($elements);

        if (!$elements.length) {
          this.clear();
          return this;
        }

        this._scrollDisabledElements = this._scrollDisabledElements.not($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._scrollDisabledElements = $([]);

        this._checkRunning();

        return this;
      }
    }, {
      key: "_checkRunning",
      value: function _checkRunning() {
        if (!this._scrollDisabledElements.length) {
          this._stop();

          return;
        }

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        if (this._isRunning) {
          return;
        }

        this._isRunning = true;
        window.addEventListener('touchstart', this._onTouchStart);
        window.addEventListener('touchend', this._onTouchEnd);
        window.addEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('keydown', this._onKeyDown);
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(event) {
        event = $.event.fix(event);
        this._touchStartEventObject = event;
        return true;
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd() {
        this._touchStartEventObject = null;
        return true;
      }
    }, {
      key: "_onScrollEvent",
      value: function _onScrollEvent(event) {
        event = $.event.fix(event);
        return this._preventScroll(event);
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        event = $.event.fix(event);

        if (!this._preventScrollOnKeys[event.keyCode]) {
          return;
        }

        var $target = $(event.target);

        if ($target.is(this._ignoreKeysOnElementsMatching)) {
          return;
        }

        return this._preventScroll(event);
      }
    }, {
      key: "_preventScroll",
      value: function _preventScroll(event) {
        var _event$touches;

        var isGesture = ((_event$touches = event.touches) === null || _event$touches === void 0 ? void 0 : _event$touches.length) > 1;

        if (isGesture) {
          return;
        }

        var $target = $(event.target);

        if (this._scrollDisabledElements.length) {
          var scrollingParent = this._getScrollingParent(event, $target);

          if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
            this.$window.scroll();
            return;
          }
        }

        event.preventDefault();
        return false;
      }
    }, {
      key: "_getScrollingParent",
      value: function _getScrollingParent(event, $target) {
        var _this$_touchStartEven;

        var isTouchEvent = event.type === 'touchmove';
        var hasTouchStartEvent = (_this$_touchStartEven = this._touchStartEventObject) === null || _this$_touchStartEven === void 0 ? void 0 : _this$_touchStartEven.originalEvent;

        if (isTouchEvent && !hasTouchStartEvent) {
          return $target;
        }

        var directionY = this._getScrollDirection(event);

        if (directionY === 'none') {
          return this.$body;
        }

        var parents = [$target[0]].concat(_toConsumableArray($target.parents()));

        for (var i = 0, l = parents.length; i < l; i++) {
          var $parent = $(parents[i]);

          if ($parent.is('body')) {
            return this.$body;
          }

          if (!this._isScrollable($parent)) {
            continue;
          }

          if (!this._isScrolling($parent, directionY)) {
            continue;
          }

          return $parent;
        }

        return this.$body;
      }
    }, {
      key: "_isScrollable",
      value: function _isScrollable($target) {
        var scrollType = $target.css('overflow-y');

        if (scrollType !== 'auto' && scrollType !== 'scroll') {
          return false;
        }

        var pointerEvents = $target.css('pointer-events');

        if (pointerEvents === 'none') {
          return false;
        }

        return true;
      }
    }, {
      key: "_isScrolling",
      value: function _isScrolling($target, directionY) {
        var scrollTop = Math.ceil($target.scrollTop());
        var innerHeight = $target.outerHeight();
        var scrollHeight = $target[0].scrollHeight;
        var hasScrollingSpace = false;

        switch (directionY) {
          case 'down':
            hasScrollingSpace = scrollTop + innerHeight < scrollHeight;

            if (hasScrollingSpace) {
              return true;
            }

            break;

          case 'up':
            hasScrollingSpace = scrollTop > 0;

            if (hasScrollingSpace) {
              return true;
            }

            break;
        }

        return false;
      }
    }, {
      key: "_getScrollDirection",
      value: function _getScrollDirection(event) {
        var deltaY = this._getScrollDelta(event);

        if (deltaY === 0) {
          return 'none';
        }

        return deltaY > 0 ? 'up' : 'down';
      }
    }, {
      key: "_getScrollDelta",
      value: function _getScrollDelta(event) {
        var deltaY = 0;
        var isTouchEvent = event.type === 'touchmove';
        var originalEvent = event.originalEvent;

        if (isTouchEvent) {
          var startOriginalEvent = this._touchStartEventObject.originalEvent;
          var currentY = originalEvent.pageY;
          var previousY = startOriginalEvent.pageY;

          if (currentY === 0 || currentY === previousY) {
            currentY = originalEvent.touches[0].pageY;
            previousY = startOriginalEvent.touches[0].pageY;
          }

          deltaY = currentY - previousY;
        } else {
          var hasDeltaY = originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined;

          if (hasDeltaY) {
            deltaY = -originalEvent.deltaY;
          } else {
            deltaY = originalEvent.wheelDelta || 0;
          }
        }

        return deltaY;
      }
    }, {
      key: "_stop",
      value: function _stop() {
        if (!this._isRunning) {
          return;
        }

        this._isRunning = false;
        window.removeEventListener('touchstart', this._onTouchStart);
        window.removeEventListener('touchend', this._onTouchEnd);
        window.removeEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('keydown', this._onKeyDown);
      }
    }]);

    return Scroll;
  }(Backbone.Controller));

  var WrapFocus = __AMD("core/js/a11y/wrapFocus", function (_Backbone$Controller) {
    _inherits(WrapFocus, _Backbone$Controller);

    var _super = _createSuper(WrapFocus);

    function WrapFocus() {
      _classCallCheck(this, WrapFocus);

      return _super.apply(this, arguments);
    }

    _createClass(WrapFocus, [{
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, '_onWrapAround');

        this.listenTo(Adapt, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        var config = Adapt.a11y.config;
        $('body').on('click focus', config._options._focusguard, this._onWrapAround);
      }
    }, {
      key: "_onWrapAround",
      value: function _onWrapAround(event) {
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();
        Adapt.a11y.focusFirst('body', {
          defer: false
        });
      }
    }]);

    return WrapFocus;
  }(Backbone.Controller));

  var Popup = __AMD("core/js/a11y/popup", function (_Backbone$Controller) {
    _inherits(Popup, _Backbone$Controller);

    var _super = _createSuper(Popup);

    function Popup() {
      _classCallCheck(this, Popup);

      return _super.apply(this, arguments);
    }

    _createClass(Popup, [{
      key: "initialize",
      value: function initialize() {
        this._floorStack = [$('body')];
        this._focusStack = [];
        this._tabIndexes = {};
        this._ariaHiddens = {};
        this._elementUIDIndex = 0;
        this.listenTo(Adapt, {
          'popup:opened': function ($element, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with Adapt.a11y.popupOpened($element);');
            this.opened($element, true);
          },
          'popup:closed': function ($target, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            Adapt.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with Adapt.a11y.popupClosed($target);');
            this.closed($target, true);
          }
        });
      }
    }, {
      key: "opened",
      value: function opened($popupElement, silent) {
        $popupElement = $popupElement || $(document.activeElement);

        this._addPopupLayer($popupElement);

        if (!silent) {
          Adapt.trigger('popup:opened', $popupElement, true);
        }

        return this;
      }
    }, {
      key: "_addPopupLayer",
      value: function _addPopupLayer($popupElement) {
        var _this = this;

        $popupElement = $($popupElement);
        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
          return $popupElement;
        }

        this._floorStack.push($popupElement);

        this._focusStack.push($(document.activeElement));

        var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
        var $branch = $popupElement.add($popupElement.parents());
        var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
        $elements = $elements.add($siblings);
        $elements.each(function (index, item) {
          var $item = $(item);
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if (_this._tabIndexes[elementUID] === undefined) {
            _this._tabIndexes[elementUID] = [];
          }

          if (_this._ariaHiddens[elementUID] === undefined) {
            _this._ariaHiddens[elementUID] = [];
          }

          var tabindex = $item.attr('tabindex');
          var ariaHidden = $item.attr('aria-hidden');

          _this._tabIndexes[elementUID].push(tabindex === undefined ? '' : tabindex);

          _this._ariaHiddens[elementUID].push(ariaHidden === undefined ? '' : ariaHidden);

          if (config._options._isPopupTabIndexManagementEnabled) {
            $item.attr('tabindex', -1);
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            $item.attr('aria-hidden', true);
          }
        });
        var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);

        if (config._options._isPopupTabIndexManagementEnabled) {
          $items.attr('tabindex', 0);
        }

        if (config._options._isPopupAriaHiddenManagementEnabled) {
          $items.removeAttr('aria-hidden').removeClass('aria-hidden').parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }
      }
    }, {
      key: "closed",
      value: function closed($focusElement, silent) {
        var $previousFocusElement = this._removeLastPopupLayer();

        $focusElement = $focusElement || $previousFocusElement || $('body');

        if (!silent) {
          Adapt.trigger('popup:closed', $focusElement, true);
        }

        Adapt.a11y.focusFirst($($focusElement), {
          preventScroll: true
        });
        return this;
      }
    }, {
      key: "_removeLastPopupLayer",
      value: function _removeLastPopupLayer() {
        var _this2 = this;

        var config = Adapt.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
          return $(document.activeElement);
        }

        if (this._floorStack.length <= 1) {
          return;
        }

        this._floorStack.pop();

        $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function (index, item) {
          var _this2$_tabIndexes$el, _this2$_tabIndexes$el2;

          var $item = $(item);
          var previousTabIndex = '';
          var previousAriaHidden = '';
          var elementUID;

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this2._elementUIDIndex;
          }

          elementUID = item.a11y_uid;

          if ((_this2$_tabIndexes$el = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el !== void 0 && _this2$_tabIndexes$el.length) {
            previousTabIndex = _this2._tabIndexes[elementUID].pop();
            previousAriaHidden = _this2._ariaHiddens[elementUID].pop();
          }

          if ((_this2$_tabIndexes$el2 = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el2 !== void 0 && _this2$_tabIndexes$el2.length) {
            delete _this2._tabIndexes[elementUID];
            delete _this2._ariaHiddens[elementUID];
          }

          if (config._options._isPopupTabIndexManagementEnabled) {
            if (previousTabIndex === '') {
              $item.removeAttr('tabindex');
            } else {
              $item.attr({
                'tabindex': previousTabIndex
              });
            }
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            if (previousAriaHidden === '') {
              $item.removeAttr('aria-hidden');
            } else {
              $item.attr({
                'aria-hidden': previousAriaHidden
              });
            }
          }
        });
        return this._focusStack.pop();
      }
    }, {
      key: "setCloseTo",
      value: function setCloseTo($focusElement) {
        var $original = this._focusStack.pop();

        this._focusStack.push($focusElement);

        return $original;
      }
    }]);

    return Popup;
  }(Backbone.Controller));

  var defaultAriaLevels = __AMD("core/js/enums/defaultAriaLevels", {
    _menu: 1,
    _menuGroup: 2,
    _menuItem: 2,
    _page: 1,
    _article: 2,
    _block: 3,
    _component: 4,
    _componentItem: 5,
    _notify: 1
  });

  Object.assign($.fn, {
    isFixedPostion: function () {
      Adapt.a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
      return false;
    },
    a11y_aria_label: function () {
      Adapt.a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
      return this;
    },
    limitedScrollTo: function () {
      Adapt.a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
      return this;
    },
    a11y_text: function () {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return this;
    },
    a11y_selected: function () {
      Adapt.a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
      return this;
    },
    a11y_on: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.findTabbable($element); and Adapt.a11y.toggleAccessible($elements, isAccessible); instead.');
      var $tabbable = Adapt.a11y.findTabbable(this);
      Adapt.a11y.toggleAccessible($tabbable, isOn);
      return this;
    },
    a11y_only: function () {
      Adapt.a11y.log.removed('$("..").a11y_only, use Adapt.a11y.popupOpened($popupElement); instead.');
      return this;
    },
    scrollDisable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollDisable, use Adapt.a11y.scrollDisable($elements); instead.');
      Adapt.a11y.scrollDisable(this);
      return this;
    },
    scrollEnable: function () {
      if (Adapt.a11y.config._options._isScrollDisableEnabled === false) {
        return this;
      }

      Adapt.a11y.log.deprecated('$("..").scrollEnable, use Adapt.a11y.scrollEnable($elements); instead.');
      Adapt.a11y.scrollEnable(this);
      return this;
    },
    a11y_popup: function () {
      Adapt.a11y.log.deprecated('$("..").a11y_popup, use Adapt.a11y.popupOpened($popupElement); instead.');
      return Adapt.a11y.popupOpened(this);
    },
    a11y_cntrl: function (isOn, withDisabled) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl, use Adapt.a11y.toggleAccessible($elements, isAccessible); and if needed Adapt.a11y.toggleEnabled($elements, isEnabled); instead.');
      Adapt.a11y.toggleAccessible(this, isOn);
      if (withDisabled) Adapt.a11y.toggleEnabled(this, isOn);
      return this;
    },
    a11y_cntrl_enabled: function (isOn) {
      Adapt.a11y.log.deprecated('$("..").a11y_cntrl_enabled, use Adapt.a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
      Adapt.a11y.toggleAccessibleEnabled(this, isOn);
      return this;
    },
    isReadable: function () {
      Adapt.a11y.log.deprecated('$("..").isReadable, use Adapt.a11y.isReadable($element); instead.');
      return Adapt.a11y.isReadable(this);
    },
    findForward: function (selector) {
      Adapt.a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFirstForward(this, selector);
    },
    findWalk: function (selector) {
      Adapt.a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
      return Adapt.a11y._findFindForwardDescendant(this, selector);
    },
    focusNoScroll: function () {
      Adapt.a11y.log.deprecated('$("..").focusNoScroll, use Adapt.a11y.focus($element); instead.');
      return Adapt.a11y.focus(this);
    },
    focusNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusNext, use Adapt.a11y.focusNext($element); or if needed Adapt.a11y.findFirstReadable($element); instead.');

      if (returnOnly) {
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusNext(this);
    },
    focusOrNext: function (returnOnly) {
      Adapt.a11y.log.deprecated('$("..").focusOrNext, use Adapt.a11y.focusFirst($element); or if needed Adapt.a11y.findFirstReadable($element); or Adapt.a11y.isReadable($element); instead.');

      if (returnOnly) {
        if (Adapt.a11y.isReadable(this)) return this;
        return Adapt.a11y.findFirstReadable(this);
      }

      return Adapt.a11y.focusFirst(this);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$("..").a11y_focus, use Adapt.a11y.focusFirst($element, { defer: true }); instead.');
      Adapt.a11y.focusFirst(this, {
        defer: !dontDefer
      });
      return this;
    }
  });
  Object.assign($, {
    a11y_alert: function () {
      Adapt.a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
      return this;
    },
    a11y_update: function () {
      Adapt.a11y.log.removed('a11y_update is no longer required.');
      return this;
    },
    a11y_text: function (text) {
      Adapt.a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_on: function (isOn, selector) {
      Adapt.a11y.log.deprecated('$("..").a11y_on, use Adapt.a11y.toggleHidden($elements, isHidden); instead.');
      return Adapt.a11y.toggleHidden(selector, !isOn);
    },
    a11y_popdown: function ($focusTarget) {
      Adapt.a11y.log.removed('$.a11y_popdown, use Adapt.a11y.popupClosed($focusTarget); instead.');
      return Adapt.a11y.popupClosed($focusTarget);
    },
    a11y_focus: function (dontDefer) {
      Adapt.a11y.log.deprecated('$.a11y_focus, use Adapt.a11y.focusFirst("body", { defer: true }); instead.');
      Adapt.a11y.focusFirst('body', {
        defer: !dontDefer
      });
      return this;
    },
    a11y_normalize: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_normalize, use Adapt.a11y.normalize("html"); instead.');
      return Adapt.a11y.normalize(html);
    },
    a11y_remove_breaks: function (html) {
      Adapt.a11y.log.deprecated('$.a11y_remove_breaks, use Adapt.a11y.removeBreaks("html"); instead.');
      return Adapt.a11y.removeBreaks(html);
    }
  });

  var A11y = function (_Backbone$Controller) {
    _inherits(A11y, _Backbone$Controller);

    var _super = _createSuper(A11y);

    function A11y() {
      _classCallCheck(this, A11y);

      return _super.apply(this, arguments);
    }

    _createClass(A11y, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isFocusOutlineKeyboardOnlyEnabled: true,
          _isFocusOutlineDisabled: false,
          _isFocusAssignmentEnabled: true,
          _isFocusOnClickEnabled: true,
          _isFocusNextOnDisabled: true,
          _isScrollDisableEnabled: true,
          _isAriaHiddenManagementEnabled: true,
          _isPopupManagementEnabled: true,
          _isPopupWrapFocusEnabled: true,
          _isPopupAriaHiddenManagementEnabled: true,
          _isPopupTabIndexManagementEnabled: true,
          _ariaHiddenExcludes: ':not(#wrapper):not(body)',
          _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
          _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
          _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
          _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
          _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
          _focusForwardElementsExcludes: ':not([aria-labelledby][role=dialog],[aria-labelledby][role=main],[aria-labelledby][role=region],[aria-labelledby][role=radiogroup],[aria-labelledby][role=group],[aria-labelledby][role=tablist],[aria-labelledby][role=list],[aria-labelledby][role=tree],[aria-labelledby][role=treegrid],[aria-labelledby][role=table],[aria-labelledby][role=grid][aria-labelledby],[role=menu],[aria-labelledby][role=rowgroup])',
          _focusguard: '.a11y-focusguard',
          _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',
          _warnFirstOnly: true,
          _warn: true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.isFocusable = this.isFocusable.bind(this);
        this.isReadable = this.isReadable.bind(this);
        this.isTabbable = this.isTabbable.bind(this);
        this.$html = $('html');
        this._htmlCharRegex = /&.*;/g;
        this.config = null;
        this._browserFocus = new BrowserFocus();
        this._keyboardFocusOutline = new KeyboardFocusOutline();
        this._wrapFocus = new WrapFocus();
        this._popup = new Popup();
        this._scroll = new Scroll();
        this.log = new Log();

        this._removeLegacyElements();

        this.listenToOnce(Adapt, {
          'configModel:dataLoaded': this._onConfigDataLoaded,
          'navigationView:postRender': this._removeLegacyElements
        }, this);
        Adapt.on('device:changed', this._setupNoSelect);
        this.listenTo(Adapt, {
          'router:location': this._onNavigationStart,
          'contentObjectView:ready router:plugin': this._onNavigationEnd
        });
      }
    }, {
      key: "_onConfigDataLoaded",
      value: function _onConfigDataLoaded() {
        this.config = Adapt.config.get('_accessibility');
        this.config._isActive = false;
        this.config._options = _.defaults(this.config._options || {}, this.defaults());
        Adapt.offlineStorage.set('a11y', false);
        this.$html.toggleClass('has-accessibility', this.isEnabled());

        this._setupNoSelect();

        this._addFocuserDiv();

        if (this._isReady) {
          return;
        }

        this._isReady = true;
        Adapt.trigger('accessibility:ready');
      }
    }, {
      key: "_setupNoSelect",
      value: function _setupNoSelect() {
        var _this$config,
            _this = this;

        if (!((_this$config = this.config) !== null && _this$config !== void 0 && _this$config._disableTextSelectOnClasses)) {
          return;
        }

        var classes = this.config._disableTextSelectOnClasses.split(' ');

        var isMatch = classes.some(function (className) {
          return _this.$html.is(className);
        });
        this.$html.toggleClass('u-no-select', isMatch);
      }
    }, {
      key: "_addFocuserDiv",
      value: function _addFocuserDiv() {
        if ($('#a11y-focuser').length) {
          return;
        }

        $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1">&nbsp;</div>'));
      }
    }, {
      key: "_removeLegacyElements",
      value: function _removeLegacyElements() {
        var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
        var $navigationElements = $('.nav').find('#accessibility-toggle, #accessibility-instructions');

        if (!$legacyElements.length && !$navigationElements.length) {
          return;
        }

        Adapt.log.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
        $legacyElements.remove();
        $navigationElements.remove();
      }
    }, {
      key: "_onNavigationStart",
      value: function _onNavigationStart() {
        var _this2 = this;

        if (!this.isEnabled()) {
          return;
        }

        _.defer(function () {
          return _this2.toggleHidden('.contentobject', true);
        });
      }
    }, {
      key: "_onNavigationEnd",
      value: function _onNavigationEnd(view) {
        var _view$model;

        if ((view === null || view === void 0 ? void 0 : (_view$model = view.model) === null || _view$model === void 0 ? void 0 : _view$model.get('_id')) !== Adapt.location._currentId || !this.isEnabled()) {
          return;
        }

        this.toggleHidden('.contentobject', false);
      }
    }, {
      key: "isActive",
      value: function isActive() {
        this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
        return false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$config2;

        return (_this$config2 = this.config) === null || _this$config2 === void 0 ? void 0 : _this$config2._isEnabled;
      }
    }, {
      key: "ariaLevel",
      value: function ariaLevel() {
        var defaultLevelOrType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var overrideLevelOrType = arguments.length > 1 ? arguments[1] : undefined;
        var cfg = Adapt.config.get('_accessibility');

        if (overrideLevelOrType) {
          defaultLevelOrType = overrideLevelOrType;
        }

        if (!isNaN(defaultLevelOrType)) {
          return defaultLevelOrType;
        }

        if (_.isString(defaultLevelOrType)) {
          var _cfg$_ariaLevels, _ariaLevels;

          var ariaLevels = (_cfg$_ariaLevels = cfg._ariaLevels) !== null && _cfg$_ariaLevels !== void 0 ? _cfg$_ariaLevels : defaultAriaLevels;
          return (_ariaLevels = ariaLevels === null || ariaLevels === void 0 ? void 0 : ariaLevels['_' + defaultLevelOrType]) !== null && _ariaLevels !== void 0 ? _ariaLevels : defaultLevelOrType;
        }

        return defaultLevelOrType;
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden($elements) {
        var isHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
          return this;
        }

        if (isHidden === true) {
          $elements.attr('aria-hidden', true);
        } else {
          $elements.removeAttr('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleAccessibleEnabled",
      value: function toggleAccessibleEnabled($elements, isAccessibleEnabled) {
        this.toggleAccessible($elements, isAccessibleEnabled);
        this.toggleEnabled($elements, isAccessibleEnabled);
        return this;
      }
    }, {
      key: "toggleAccessible",
      value: function toggleAccessible($elements) {
        var isReadable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
          return this;
        }

        if (!isReadable) {
          $elements.attr({
            tabindex: '-1',
            'aria-hidden': 'true'
          }).addClass('aria-hidden');
        } else {
          $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
          $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled($elements) {
        var isEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);

        if ($elements.length === 0) {
          return this;
        }

        if (!isEnabled) {
          $elements.attr({
            tabindex: '-1',
            'aria-disabled': 'true'
          }).addClass('is-disabled');
        } else {
          $elements.removeAttr('aria-disabled tabindex').removeClass('is-disabled');
        }

        return this;
      }
    }, {
      key: "findFirstTabbable",
      value: function findFirstTabbable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isTabbable);
      }
    }, {
      key: "findFirstReadable",
      value: function findFirstReadable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isReadable);
      }
    }, {
      key: "findFirstFocusable",
      value: function findFirstFocusable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isFocusable);
      }
    }, {
      key: "findTabbable",
      value: function findTabbable($element) {
        var config = this.config;
        return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      }
    }, {
      key: "findReadable",
      value: function findReadable($element) {
        var _this3 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this3.isReadable(element);
        });
      }
    }, {
      key: "findFocusable",
      value: function findFocusable($element) {
        var _this4 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this4.isFocusable(element);
        });
      }
    }, {
      key: "isTabbable",
      value: function isTabbable($element) {
        var config = this.config;
        var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);

        if (!value) {
          return null;
        }

        return value;
      }
    }, {
      key: "isReadable",
      value: function isReadable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        var $branch = checkParents ? $element.add($element.parents()) : $element;
        var isNotVisible = $branch.toArray().some(function (item) {
          var $item = $(item);
          return $item.css('display') === 'none' || $item.css('visibility') === 'hidden' || $item.attr('aria-hidden') === 'true';
        });

        if (isNotVisible) {
          return false;
        }

        var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements) || $element.is(config._options._readableElements);

        if (hasNativeFocusOrIsScreenReadable) {
          return true;
        }

        var childNodes = $element[0].childNodes;

        for (var c = 0, cl = childNodes.length; c < cl; c++) {
          var childNode = childNodes[c];
          var isTextNode = childNode.nodeType === 3;

          if (!isTextNode) {
            continue;
          }

          var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);

          if (isOnlyWhiteSpace) {
            continue;
          }

          return true;
        }

        return null;
      }
    }, {
      key: "isFocusable",
      value: function isFocusable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        if (!$element.is(config._options._focusForwardElementsExcludes)) return null;
        return this.isReadable($element, checkParents);
      }
    }, {
      key: "_findFirstForward",
      value: function _findFirstForward($element, selector) {
        var _this5 = this;

        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        if ($element.length === 0) {
          return $element.not('*');
        }

        var $found = this._findFirstForwardDescendant($element, iterator);

        if ($found.length) {
          return $found;
        }

        $element.nextAll().toArray().some(function (sibling) {
          var $sibling = $(sibling);
          var value = iterator($sibling);

          if (value === false) {
            return false;
          }

          if (value) {
            $found = $sibling;
            return true;
          }

          $found = _this5._findFirstForwardDescendant($sibling, iterator);
          return Boolean($found.length);
        });

        if ($found.length) {
          return $found;
        }

        $element.add($element.parents()).toArray().reverse().some(function (parent) {
          var $parent = $(parent);

          if (iterator($parent) === false) {
            return false;
          }

          return $parent.nextAll().toArray().some(function (sibling) {
            var $sibling = $(sibling);
            var value = iterator($sibling);

            if (value === false) {
              return false;
            }

            if (value) {
              $found = $sibling;
              return true;
            }

            $found = _this5._findFirstForwardDescendant($sibling, iterator);
            return Boolean($found.length);
          });
        });

        if (!$found.length) {
          return $element.not('*');
        }

        return $found;
      }
    }, {
      key: "_findFirstForwardDescendant",
      value: function _findFirstForwardDescendant($element, selector) {
        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        var $notFound = $element.not('*');

        if ($element.length === 0) {
          return $notFound;
        }

        var stack = [{
          item: $element[0],
          value: undefined
        }];
        var stackIndexPosition = 0;
        var childIndexPosition = stackIndexPosition + 1;

        do {
          var stackEntry = stack[stackIndexPosition];
          var $stackItem = $(stackEntry.item);

          switch (stackEntry.value) {
            case true:
              return $stackItem;

            case false:
              return $notFound;
          }

          $stackItem.children().toArray().forEach(function (item) {
            var $item = $(item);
            var value = iterator($item);

            if (value === false) {
              return;
            }

            stack.splice(childIndexPosition++, 0, {
              item: item,
              value: value
            });
          });
          stackIndexPosition++;
          childIndexPosition = stackIndexPosition + 1;
        } while (stackIndexPosition < stack.length);

        return $notFound;
      }
    }, {
      key: "focusNext",
      value: function focusNext($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        $element = this.findFirstFocusable($element);
        this.focus($element, options);
        return this;
      }
    }, {
      key: "focusFirst",
      value: function focusFirst($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();

        if (this.isReadable($element)) {
          this.focus($element, options);
          return $element;
        }

        $element = this.findFirstFocusable($element);
        this.focus($element, options);
        return $element;
      }
    }, {
      key: "focus",
      value: function focus($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        var config = this.config;

        if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
          return this;
        }

        function perform() {
          if ($element.attr('tabindex') === undefined) {
            $element.attr({
              tabindex: '-1',
              'data-a11y-force-focus': 'true'
            });
          }

          if (options.preventScroll) {
            var y = $(window).scrollTop();

            try {
              $element[0].focus({
                preventScroll: true
              });
            } catch (e) {}

            switch (Adapt.device.browser) {
              case 'internet explorer':
              case 'microsoft edge':
              case 'safari':
                window.scrollTo(null, y);
            }
          } else {
            $element[0].focus();
          }
        }

        if (options.defer) {
          _.defer(perform);
        } else {
          perform();
        }

        return this;
      }
    }, {
      key: "normalize",
      value: function normalize(htmls) {
        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var text = $('<div>' + htmls + '</div>').text();
        return text.replace(this._htmlCharRegex, '');
      }
    }, {
      key: "removeBreaks",
      value: function removeBreaks(htmls) {
        var _this6 = this;

        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var $div = $('<div>' + htmls + '</div>');
        var stack = [$div[0]];
        var stackIndex = 0;
        var outputs = [];

        do {
          if (stack[stackIndex].childNodes.length) {
            var nodes = stack[stackIndex].childNodes;
            var usable = nodes.filter(function (node) {
              var isTextNode = node.nodeType === 3;

              if (isTextNode) {
                return true;
              }

              var isStyleElement = $(node).is(_this6.config._options._wrapStyleElements);

              if (isStyleElement) {
                return true;
              }

              return false;
            });
            outputs.push.apply(outputs, usable);
            stack.push.apply(stack, nodes);
          }

          stackIndex++;
        } while (stackIndex < stack.length);

        var rtnText = '';
        outputs.forEach(function (item) {
          rtnText += item.outerHTML || item.textContent;
        });
        return rtnText;
      }
    }, {
      key: "scrollEnable",
      value: function scrollEnable($elements) {
        this._scroll.enable($elements);

        return this;
      }
    }, {
      key: "scrollDisable",
      value: function scrollDisable($elements) {
        this._scroll.disable($elements);

        return this;
      }
    }, {
      key: "popupOpened",
      value: function popupOpened($popupElement) {
        this._popup.opened($popupElement);

        return this;
      }
    }, {
      key: "popupClosed",
      value: function popupClosed($focusElement) {
        this._popup.closed($focusElement);

        return this;
      }
    }, {
      key: "setPopupCloseTo",
      value: function setPopupCloseTo($focusElement) {
        return this._popup.setCloseTo($focusElement);
      }
    }]);

    return A11y;
  }(Backbone.Controller);

  var a11y = __AMD("core/js/a11y", Adapt.a11y = new A11y());

  Object.defineProperty(Adapt, 'accessibility', {
    get: function () {
      a11y.log.deprecated('Adapt.accessibility has moved to Adapt.a11y');
      return a11y;
    }
  });

  var AdaptCollection = __AMD("core/js/collections/adaptCollection", function (_Backbone$Collection) {
    _inherits(AdaptCollection, _Backbone$Collection);

    var _super = _createSuper(AdaptCollection);

    function AdaptCollection() {
      _classCallCheck(this, AdaptCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.once('reset', this.loadedData, this);
      }
    }, {
      key: "loadedData",
      value: function loadedData() {
        Adapt.trigger('adaptCollection:dataLoaded');
      }
    }]);

    return AdaptCollection;
  }(Backbone.Collection));

  var BuildModel = __AMD("core/js/models/buildModel", function (_LockingModel) {
    _inherits(BuildModel, _LockingModel);

    var _super = _createSuper(BuildModel);

    function BuildModel() {
      _classCallCheck(this, BuildModel);

      return _super.apply(this, arguments);
    }

    _createClass(BuildModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          jsonext: 'json'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this.isLoaded = true;
            Adapt.trigger('buildModel:dataLoaded');
          },
          error: function () {
            console.log('Unable to load adapt/js/build.js');
            Adapt.trigger('buildModel:dataLoaded');
          }
        });
      }
    }, {
      key: "isFrameworkVersion",
      value: function isFrameworkVersion(version) {
        return semver__default['default'].satisfies(this.get('package').version, version, {
          includePrerelease: true
        });
      }
    }, {
      key: "isPluginInstalled",
      value: function isPluginInstalled(name) {
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
        var plugin = this.get('plugins').find(function (plugin) {
          if (plugin.name !== name) return false;
          return semver__default['default'].satisfies(plugin.version, version, {
            includePrerelease: true
          });
        });
        return Boolean(plugin);
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        if (this.isLoaded) return Promise.resolve();
        return new Promise(function (resolve) {
          Adapt.once('buildModel:dataLoaded', resolve);
        });
      }
    }]);

    return BuildModel;
  }(LockingModel));

  var ConfigModel = __AMD("core/js/models/configModel", function (_LockingModel) {
    _inherits(ConfigModel, _LockingModel);

    var _super = _createSuper(ConfigModel);

    function ConfigModel() {
      _classCallCheck(this, ConfigModel);

      return _super.apply(this, arguments);
    }

    _createClass(ConfigModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          screenSize: {
            large: 900,
            medium: 760,
            small: 520
          },
          _forceRouteLocking: false,
          _canLoadData: true,
          _disableAnimation: false
        };
      }
    }, {
      key: "setValuesFromURLParams",
      value: function setValuesFromURLParams() {
        var _this = this;

        var paramMappings = {
          dir: '_defaultDirection',
          lang: '_defaultLanguage'
        };
        var params = new URLSearchParams(window.location.search);
        Object.entries(paramMappings).forEach(function (_ref) {
          var _Adapt$build$get;

          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          var passedVal = params.get(key);
          if (!passedVal) return;
          if (key === 'lang' && ((_Adapt$build$get = Adapt.build.get('availableLanguageNames')) === null || _Adapt$build$get === void 0 ? void 0 : _Adapt$build$get.includes(passedVal)) === false) return;

          _this.set(value, passedVal);
        });
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this2 = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this2.setValuesFromURLParams();

            Adapt.trigger('offlineStorage:prepare');
            Adapt.wait.queue(function () {
              Adapt.trigger('configModel:dataLoaded');
              if (!_this2.get('_canLoadData')) return;
              Adapt.trigger('configModel:loadCourseData');
            });
          },
          error: function () {
            return console.log('Unable to load course/config.json');
          }
        });
      }
    }, {
      key: "loadData",
      value: function loadData() {}
    }]);

    return ConfigModel;
  }(LockingModel));

  var ModelEvent = __AMD("core/js/modelEvent", function (_Backbone$Controller) {
    _inherits(ModelEvent, _Backbone$Controller);

    var _super = _createSuper(ModelEvent);

    function ModelEvent() {
      _classCallCheck(this, ModelEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ModelEvent, [{
      key: "initialize",
      value: function initialize(type, target, value) {
        this.type = type;
        this.target = target;
        this.value = value;
        this.canBubble = true;
        this.deepPath = [target];
        this.timeStamp = null;
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        this.canBubble = false;
      }
    }, {
      key: "addPath",
      value: function addPath(target) {
        this.deepPath.unshift(target);
      }
    }]);

    return ModelEvent;
  }(Backbone.Controller));

  var AdaptModel = __AMD("core/js/models/adaptModel", function (_LockingModel) {
    _inherits(AdaptModel, _LockingModel);

    var _super = _createSuper(AdaptModel);

    function AdaptModel() {
      _classCallCheck(this, AdaptModel);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _objectSpread2({}, this.attributes);

        delete json._children;
        delete json._parent;
        return $.extend(true, {}, json);
      }
    }, {
      key: "get",
      value: function get(name) {
        switch (name) {
          case '_parent':
          case '_children':
            Adapt.log.deprecated('Use model.getChildren() or model.getParent() instead of model.get(\'_children\') or model.get(\'_parent\')');
        }

        return _get(_getPrototypeOf(AdaptModel.prototype), "get", this).call(this, name);
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canShowFeedback: true,
          _classes: '',
          _canReset: true,
          _canRequestChild: false,
          _isComplete: false,
          _isInteractionComplete: false,
          _isA11yRegionEnabled: false,
          _isA11yCompletionDescriptionEnabled: true,
          _requireCompletionOf: -1,
          _isEnabled: true,
          _isResetOnRevisit: false,
          _isAvailable: true,
          _isOptional: false,
          _isRendered: false,
          _isReady: false,
          _isVisible: true,
          _isLocked: false,
          _isHidden: false
        };
      }
    }, {
      key: "trackingPosition",
      get: function () {
        var _this = this;

        var firstDescendant = this.getAllDescendantModels(false).concat([this])[0];
        var nearestTrackingIdModel = [firstDescendant].concat(firstDescendant.getAncestorModels()).find(function (model) {
          return model.has('_trackingId');
        });
        if (!nearestTrackingIdModel) return;
        var trackingId = nearestTrackingIdModel.get('_trackingId');
        var trackingIdDescendants = [nearestTrackingIdModel].concat(nearestTrackingIdModel.getAllDescendantModels(true));
        var indexInTrackingIdDescendants = trackingIdDescendants.findIndex(function (descendant) {
          return descendant === _this;
        });

        if (indexInTrackingIdDescendants >= 0) {
          return [trackingId, indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = nearestTrackingIdModel.getAncestorModels();
        var ancestorDistance = trackingIdAncestors.findIndex(function (ancestor) {
          return ancestor === _this;
        });
        return [trackingId, -(ancestorDistance + 1)];
      }
    }, {
      key: "parse",
      value: function parse(data) {
        if (data._isResetOnRevisit === 'false') {
          data._isResetOnRevisit = false;
        }

        return data;
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ['_id', '_isComplete', '_isInteractionComplete'];
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return [String, Boolean, Boolean];
      }
    }, {
      key: "bubblingEvents",
      value: function bubblingEvents() {
        return ['change:_isComplete', 'change:_isInteractionComplete', 'change:_isActive'];
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        var _this2 = this;

        if (this.hasManagedChildren) {
          this.setupChildListeners();
        }

        this.init();

        _.defer(function () {
          if (_this2.hasManagedChildren) {
            _this2.checkCompletionStatus();

            _this2.checkInteractionCompletionStatus();

            _this2.checkLocking();
          }

          _this2.setupTrackables();
        });
      }
    }, {
      key: "setupTrackables",
      value: function setupTrackables() {
        var _this3 = this;

        var originalTrackableStateFunction = this.triggerTrackableState;
        this.triggerTrackableState = _.compose(function () {
          _this3.triggerTrackableState.isQueued = true;
        }, _.debounce(function () {
          originalTrackableStateFunction.apply(_this3);
          _this3.triggerTrackableState.isQueued = false;
        }, 17));
        this.listenTo(this, 'change', function (_ref) {
          var changed = _ref.changed;

          if (_this3.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {
            return;
          }

          var trackablePropertyNames = _.result(_this3, 'trackable', []);

          var changedPropertyNames = Object.keys(changed);
          var isTrackable = changedPropertyNames.find(function (item) {
            return trackablePropertyNames.includes(item);
          });

          if (isTrackable) {
            _this3.triggerTrackableState();
          }
        });
      }
    }, {
      key: "setupChildListeners",
      value: function setupChildListeners() {
        var children = this.getChildren();

        if (!children.length) {
          return;
        }

        this.listenTo(children, {
          all: this.onAll,
          bubble: this.bubble,
          'change:_isReady': this.checkReadyStatus,
          'change:_isComplete': this.onIsComplete,
          'change:_isInteractionComplete': this.checkInteractionCompletionStatus
        });
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        var _ref2;

        var trackable = this.resultExtend('trackable', []);
        var json = this.toJSON();
        var args = trackable;
        args.unshift(json);
        return (_ref2 = _).pick.apply(_ref2, _toConsumableArray(args));
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(state) {
        var _ref3;

        var trackable = this.resultExtend('trackable', []);
        var args = trackable;
        args.unshift(state);
        state = (_ref3 = _).pick.apply(_ref3, _toConsumableArray(args));
        this.set(state);
        return this;
      }
    }, {
      key: "triggerTrackableState",
      value: function triggerTrackableState() {
        Adapt.trigger('state:change', this, this.getTrackableState());
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');
        if (!canReset) return false;

        switch (type) {
          case 'hard':
          case true:
            this.set({
              _isEnabled: true,
              _isComplete: false,
              _isInteractionComplete: false
            });
            return true;

          case 'soft':
            this.set({
              _isEnabled: true,
              _isInteractionComplete: false
            });
            return true;
        }

        return false;
      }
    }, {
      key: "checkReadyStatus",
      value: function checkReadyStatus(model, value) {
        if (value === false) {
          return false;
        }

        var children = this.getAvailableChildModels();

        if (children.find(function (child) {
          return child.get('_isReady') === false && child.get('_isRendered');
        })) {
          return false;
        }

        this.set('_isReady', true);
        return true;
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.get('_isVisible')) return;
        this.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
      }
    }, {
      key: "checkInteractionCompletionStatus",
      value: function checkInteractionCompletionStatus() {
        Adapt.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
      }
    }, {
      key: "checkCompletionStatusFor",
      value: function checkCompletionStatusFor() {
        var completionAttribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_isComplete';
        var completed = false;
        var children = this.getAvailableChildModels();
        var requireCompletionOf = this.get('_requireCompletionOf');

        if (requireCompletionOf === -1) {
          completed = children.every(function (child) {
            return child.get(completionAttribute) || child.get('_isOptional');
          });
        } else {
          completed = children.filter(function (child) {
            return child.get(completionAttribute) && !child.get('_isOptional');
          }).length >= requireCompletionOf;
        }

        this.set(completionAttribute, completed);
        Adapt.checkedCompletion();
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {}
    }, {
      key: "isTypeGroup",
      value: function isTypeGroup(typeGroup) {
        var hasUpperCase = /[A-Z]+/.test(typeGroup);
        var isPluralized = typeGroup.slice(-1) === 's';
        var lowerCased = typeGroup.toLowerCase();
        var singular = isPluralized && lowerCased.slice(0, -1);
        var singularLowerCased = (singular || lowerCased).toLowerCase();

        if (isPluralized || hasUpperCase) {
          Adapt.log.deprecated("'".concat(typeGroup, "' appears pluralized or contains uppercase characters, suggest using the singular, lowercase type group '").concat(singularLowerCased, "'."));
        }

        var pluralizedLowerCaseTypes = [singularLowerCased, !isPluralized && "".concat(lowerCased, "s")].filter(Boolean);
        var typeGroups = this.getTypeGroups();

        if (_.intersection(pluralizedLowerCaseTypes, typeGroups).length) {
          return true;
        }

        return false;
      }
    }, {
      key: "getTypeGroups",
      value: function getTypeGroups() {
        if (this._typeGroups) return this._typeGroups;
        var typeGroups = [this.get('_type')];
        var parentClass = this;

        while (parentClass = Object.getPrototypeOf(parentClass)) {
          if (!Object.prototype.hasOwnProperty.call(parentClass, 'getTypeGroup')) continue;
          typeGroups.push(parentClass.getTypeGroup.call(this));
        }

        return this._typeGroups = _.uniq(typeGroups.filter(Boolean).map(function (s) {
          return s.toLowerCase();
        }));
      }
    }, {
      key: "findAncestor",
      value: function findAncestor(ancestorType) {
        var parent = this.getParent();
        if (!parent) return;

        if (!ancestorType || parent.isTypeGroup(ancestorType)) {
          return parent;
        }

        return parent.findAncestor(ancestorType);
      }
    }, {
      key: "findDescendantModels",
      value: function findDescendantModels(descendants, options) {
        var allDescendantsModels = this.getAllDescendantModels();
        var returnedDescendants = allDescendantsModels.filter(function (model) {
          return model.isTypeGroup(descendants);
        });

        if (!options) {
          return returnedDescendants;
        }

        if (options.where) {
          return returnedDescendants.filter(function (descendant) {
            for (var property in options.where) {
              var value = options.where[property];

              if (descendant.get(property) !== value) {
                return false;
              }
            }

            return true;
          });
        }
      }
    }, {
      key: "getAllDescendantModels",
      value: function getAllDescendantModels(isParentFirst) {
        var descendants = [];

        if (!this.hasManagedChildren) {
          return descendants;
        }

        var children = this.getChildren();
        children.models.forEach(function (child) {
          if (!child.hasManagedChildren) {
            descendants.push(child);
            return;
          }

          var subDescendants = child.getAllDescendantModels(isParentFirst);

          if (isParentFirst === true) {
            descendants.push(child);
          }

          descendants.push.apply(descendants, _toConsumableArray(subDescendants));

          if (isParentFirst !== true) {
            descendants.push(child);
          }
        });
        return descendants;
      }
    }, {
      key: "findRelativeModel",
      value: function findRelativeModel(relativeString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rootModel = options.limitParentId ? Adapt.findById(options.limitParentId) : Adapt.course;
        var relativeDescriptor = Adapt.parseRelativeString(relativeString);
        var searchBackwards = relativeDescriptor.offset < 0;
        var moveBy = Math.abs(relativeDescriptor.offset);
        var movementCount = 0;
        var hasDescendantsOfType = Boolean(this.findDescendantModels(relativeDescriptor.type).length);

        if (hasDescendantsOfType) {
          moveBy--;
        }

        var pageDescendants;

        if (searchBackwards) {
          var _pageDescendants;

          pageDescendants = [rootModel];

          (_pageDescendants = pageDescendants).push.apply(_pageDescendants, _toConsumableArray(rootModel.getAllDescendantModels(true)));

          pageDescendants.reverse();
        } else {
          pageDescendants = rootModel.getAllDescendantModels(false);
          pageDescendants.push(rootModel);
        }

        var modelId = this.get('_id');
        var modelIndex = pageDescendants.findIndex(function (pageDescendant) {
          if (pageDescendant.get('_id') === modelId) {
            return true;
          }

          return false;
        });
        var isFilterFunction = typeof options.filter === 'function';

        if (options.loop) {
          var totalOfType = pageDescendants.reduce(function (count, model) {
            if (!model.isTypeGroup(relativeDescriptor.type)) return count;
            return ++count;
          }, 0);
          moveBy = moveBy % totalOfType;
          pageDescendants = pageDescendants.concat(pageDescendants.slice(0));
        }

        for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
          var descendant = pageDescendants[i];
          if (!descendant.isTypeGroup(relativeDescriptor.type)) continue;
          var isSelf = i === modelIndex;
          if (!isSelf && isFilterFunction && !options.filter(descendant)) continue;

          if (movementCount > moveBy) {
            break;
          }

          if (movementCount === moveBy) {
            return Adapt.findById(descendant.get('_id'));
          }

          movementCount++;
        }
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return true;
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        if (this._childrenCollection) {
          return this._childrenCollection;
        }

        var childrenCollection;

        if (!this.hasManagedChildren) {
          childrenCollection = new Backbone.Collection();
        } else {
          var id = this.get('_id');
          var children = Adapt.data.filter(function (model) {
            return model.get('_parentId') === id;
          });
          childrenCollection = new Backbone.Collection(children);
        }

        if (this.get('_type') === 'block' && childrenCollection.length === 2 && childrenCollection.models[0].get('_layout') !== 'left') {
          childrenCollection.comparator = '_layout';
          childrenCollection.sort();
        }

        this.setChildren(childrenCollection);
        return this._childrenCollection;
      }
    }, {
      key: "setChildren",
      value: function setChildren(children) {
        this._childrenCollection = children;
        this.set('_children', children);
      }
    }, {
      key: "getAvailableChildModels",
      value: function getAvailableChildModels() {
        return this.getChildren().where({
          _isAvailable: true
        });
      }
    }, {
      key: "getParent",
      value: function getParent() {
        if (this._parentModel) {
          return this._parentModel;
        }

        var parentId = this.get('_parentId');
        if (!parentId) return;
        this.setParent(Adapt.findById(parentId));
        return this._parentModel;
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        this._parentModel = parent;
        this.set('_parentId', this._parentModel.get('_id'));
        this.set('_parent', this._parentModel);
      }
    }, {
      key: "getAncestorModels",
      value: function getAncestorModels(shouldIncludeChild) {
        var parents = [];
        var context = this;
        if (shouldIncludeChild) parents.push(context);

        while (context.has('_parentId')) {
          context = context.getParent();
          parents.push(context);
        }

        return parents.length ? parents : null;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings(passSiblingsAndIncludeSelf) {
        var id = this.get('_id');
        var parentId = this.get('_parentId');
        var siblings;

        if (!passSiblingsAndIncludeSelf) {
          if (this._hasSiblingsAndSelf === false) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId && model.get('_id') !== id;
          });
          this._hasSiblingsAndSelf = false;
        } else {
          if (this._hasSiblingsAndSelf) {
            return this.get('_siblings');
          }

          siblings = Adapt.data.filter(function (model) {
            return model.get('_parentId') === parentId;
          });
          this._hasSiblingsAndSelf = true;
        }

        var siblingsCollection = new Backbone.Collection(siblings);
        this.set('_siblings', siblingsCollection);
        return siblingsCollection;
      }
    }, {
      key: "setOnChildren",
      value: function setOnChildren() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.set.apply(this, args);
        if (!this.hasManagedChildren) return;
        var children = this.getChildren();
        children.models.forEach(function (child) {
          return child.setOnChildren.apply(child, args);
        });
      }
    }, {
      key: "setOptional",
      value: function setOptional(value) {
        Adapt.log.deprecated('Use model.set(\'_isOptional\', value) as setOptional() may be removed in the future');
        this.set({
          _isOptional: value
        });
      }
    }, {
      key: "checkLocking",
      value: function checkLocking() {
        var lockType = this.get('_lockType');
        if (!lockType) return;

        switch (lockType) {
          case 'sequential':
            this.setSequentialLocking();
            break;

          case 'unlockFirst':
            this.setUnlockFirstLocking();
            break;

          case 'lockLast':
            this.setLockLastLocking();
            break;

          case 'custom':
            this.setCustomLocking();
            break;

          default:
            console.warn("AdaptModel.checkLocking: unknown _lockType '".concat(lockType, "' found on ").concat(this.get('_id')));
        }
      }
    }, {
      key: "setSequentialLocking",
      value: function setSequentialLocking() {
        var children = this.getAvailableChildModels();
        children.slice(1).forEach(function (child, index) {
          var previousChild = children[index];
          var isLockedByPreviousChild = previousChild.get('_isLocked') || !previousChild.get('_isComplete') && !previousChild.get('_isOptional');
          child.set('_isLocked', isLockedByPreviousChild);
        }, false);
      }
    }, {
      key: "setUnlockFirstLocking",
      value: function setUnlockFirstLocking() {
        var children = this.getAvailableChildModels();
        var firstChild = children.shift();
        var isLockedByFirstChild = !firstChild.get('_isComplete') && !firstChild.get('_isOptional');
        children.forEach(function (child) {
          return child.set('_isLocked', isLockedByFirstChild);
        });
      }
    }, {
      key: "setLockLastLocking",
      value: function setLockLastLocking() {
        var children = this.getAvailableChildModels();
        var lastChild = children.pop();
        var isLockedByChildren = children.some(function (child) {
          return !child.get('_isComplete') && !child.get('_isOptional');
        });
        lastChild.set('_isLocked', isLockedByChildren);
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this4 = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          return child.set('_isLocked', _this4.shouldLock(child));
        });
      }
    }, {
      key: "shouldLock",
      value: function shouldLock(child) {
        var lockedBy = child.get('_lockedBy');
        if (!lockedBy) return false;
        return lockedBy.some(function (id) {
          try {
            var anotherModel = Adapt.findById(id);
            return anotherModel.get('_isAvailable') && (anotherModel.get('_isLocked') || !anotherModel.get('_isComplete') && !anotherModel.get('_isOptional'));
          } catch (e) {
            console.warn("AdaptModel.shouldLock: unknown _lockedBy ID '".concat(id, "' found on ").concat(child.get('_id')));
            return false;
          }
        });
      }
    }, {
      key: "onIsComplete",
      value: function onIsComplete() {
        this.checkCompletionStatus();
        this.checkLocking();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.get('_isResetOnRevisit');
        this.reset(isResetOnRevisit);
      }
    }, {
      key: "deepClone",
      value: function deepClone() {
        var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var ModelClass = this.constructor;
        var clonedModel = new ModelClass(this.toJSON());

        if (modifier) {
          modifier(clonedModel, this);
        }

        var clonedId = clonedModel.get('_id');
        var hasId = Boolean(clonedId);
        var shouldAssignUniqueId = this.get('_id') === clonedId;

        if (hasId && shouldAssignUniqueId) {
          var cid = _.uniqueId(ModelClass.prototype.cidPrefix || 'c');

          clonedId = "".concat(clonedId, "_").concat(cid);
          clonedModel.set('_id', clonedId);
        }

        if (hasId) {
          Adapt.data.add(clonedModel);
        }

        if (this.hasManagedChildren) {
          this.getChildren().each(function (child) {
            if (!child.deepClone) {
              throw new Error('Cannot deepClone child.');
            }

            child.deepClone(function (clone, child) {
              if (hasId) {
                clone.set('_parentId', clonedId);
              }

              if (modifier) {
                modifier(clone, child);
              }
            });
          });
        }

        clonedModel.getParent().getChildren().add(clonedModel);
        clonedModel.setupModel();
        return clonedModel;
      }
    }, {
      key: "onAll",
      value: function onAll(type, model, value) {
        if (!_.result(this, 'bubblingEvents').includes(type)) return;
        var event = new ModelEvent(type, model, value);
        this.bubble(event);
      }
    }, {
      key: "bubble",
      value: function bubble(event) {
        if (!event.canBubble) return;
        event.addPath(this);
        this.trigger("bubble:".concat(event.type, " bubble"), event);
      }
    }]);

    return AdaptModel;
  }(LockingModel));

  var ContentObjectModel = __AMD("core/js/models/contentObjectModel", function (_AdaptModel) {
    _inherits(ContentObjectModel, _AdaptModel);

    var _super = _createSuper(ContentObjectModel);

    function ContentObjectModel() {
      _classCallCheck(this, ContentObjectModel);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._parent, use contentObjectModel.getParent() instead, parent models are defined by the JSON');
        var isParentCourse = this.get('_parentId') === Adapt.course.get('_id');

        if (isParentCourse) {
          return 'course';
        }

        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._siblings, use contentObjectModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('contentObjectModel._children, use contentObjectModel.hasManagedChildren instead, child models are defined by the JSON');
        return null;
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'contentobject';
      }
    }]);

    return ContentObjectModel;
  }(AdaptModel));

  var MenuModel = function (_ContentObjectModel) {
    _inherits(MenuModel, _ContentObjectModel);

    var _super = _createSuper(MenuModel);

    function MenuModel() {
      _classCallCheck(this, MenuModel);

      return _super.apply(this, arguments);
    }

    _createClass(MenuModel, [{
      key: "_children",
      get: function () {
        Adapt.log.deprecated('menuModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'menu';
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this.shouldLock(child));
          if (!(child instanceof MenuModel)) return;
          child.checkLocking();
        });
      }
    }]);

    return MenuModel;
  }(ContentObjectModel);

  Adapt.register('menu', {
    model: MenuModel
  });
  var MenuModel$1 = __AMD("core/js/models/menuModel", MenuModel);

  var CourseModel = function (_MenuModel) {
    _inherits(CourseModel, _MenuModel);

    var _super = _createSuper(CourseModel);

    function CourseModel() {
      _classCallCheck(this, CourseModel);

      return _super.apply(this, arguments);
    }

    _createClass(CourseModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('courseModel._parent, use courseModel.getParent() instead, parent models are defined by the JSON');
        return null;
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('courseModel._siblings, use courseModel.getSiblings() instead, sibling models are defined by the JSON');
        return null;
      }
    }]);

    return CourseModel;
  }(MenuModel$1);

  Adapt.register('course', {
    model: CourseModel
  });
  var CourseModel$1 = __AMD("core/js/models/courseModel", CourseModel);

  var StartController = function (_Backbone$Controller) {
    _inherits(StartController, _Backbone$Controller);

    var _super = _createSuper(StartController);

    function StartController() {
      _classCallCheck(this, StartController);

      return _super.apply(this, arguments);
    }

    _createClass(StartController, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(StartController.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.model = null;
      }
    }, {
      key: "loadCourseData",
      value: function loadCourseData() {
        this.model = new LockingModel(Adapt.course.get('_start'));
      }
    }, {
      key: "setStartLocation",
      value: function setStartLocation() {
        if (!this.isEnabled()) return;
        window.history.replaceState('', '', this.getStartHash());
      }
    }, {
      key: "returnToStartLocation",
      value: function returnToStartLocation() {
        var startIds = this.model.get('_startIds');

        if (startIds) {
          startIds.forEach(function (startId) {
            return startId._skipIfComplete = false;
          });
        }

        window.location.hash = this.getStartHash(true);
      }
    }, {
      key: "getStartHash",
      value: function getStartHash(alwaysForce) {
        var startId = this.getStartId();
        var isRouteSpecified = window.location.href.indexOf('#') > -1;
        var shouldForceStartId = alwaysForce || this.model.get('_force');
        var shouldNavigateToStartId = startId && (!isRouteSpecified || shouldForceStartId);

        if (shouldNavigateToStartId && startId !== Adapt.course.get('_id')) {
          return '#/id/' + startId;
        }

        return window.location.hash || '#/';
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$model;

        return Boolean((_this$model = this.model) === null || _this$model === void 0 ? void 0 : _this$model.get('_isEnabled'));
      }
    }, {
      key: "getStartId",
      value: function getStartId() {
        var startId = this.model.get('_id');
        var startIds = this.model.get('_startIds');
        if (!(startIds !== null && startIds !== void 0 && startIds.length)) return startId;
        var $html = $('html');

        for (var i = 0, l = startIds.length; i < l; i++) {
          var item = startIds[i];
          var className = item._className;
          var skipIfComplete = item._skipIfComplete;
          var model = Adapt.findById(item._id);

          if (!model) {
            console.log('startController: cannot find id', item._id);
            continue;
          }

          if (skipIfComplete) {
            if (model.get('_isComplete')) continue;
          }

          if (!className || $html.is(className) || $html.hasClass(className)) {
            startId = item._id;
            break;
          }
        }

        return startId;
      }
    }]);

    return StartController;
  }(Backbone.Controller);

  Adapt.once('adapt:start', function () {
    Adapt.startController.loadCourseData();
    Adapt.startController.setStartLocation();
  });
  Adapt.on('navigation:returnToStart', function () {
    Adapt.startController.returnToStartLocation();
  });
  __AMD("core/js/startController", Adapt.startController = new StartController());

  var Data = function (_AdaptCollection) {
    _inherits(Data, _AdaptCollection);

    var _super = _createSuper(Data);

    function Data() {
      _classCallCheck(this, Data);

      return _super.apply(this, arguments);
    }

    _createClass(Data, [{
      key: "model",
      value: function model(json) {
        var ModelClass = Adapt.getModelClass(json);

        if (!ModelClass) {
          return new LockingModel(json);
        }

        return new ModelClass(json, {
          parse: true
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(Data.prototype), "initialize", this).call(this);

        this.on({
          add: this.onAdded,
          remove: this.onRemoved
        });
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.reset();
                  this._byAdaptID = {};
                  Adapt.build = new BuildModel(null, {
                    url: 'adapt/js/build.min.js',
                    reset: true
                  });
                  _context.next = 5;
                  return Adapt.build.whenReady();

                case 5:
                  $('html').attr('data-adapt-framework-version', Adapt.build.get('package').version);
                  this.loadConfigData();

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "onAdded",
      value: function onAdded(model) {
        this._byAdaptID[model.get('_id')] = model;
      }
    }, {
      key: "onRemoved",
      value: function onRemoved(model) {
        delete this._byAdaptID[model.get('_id')];
      }
    }, {
      key: "loadConfigData",
      value: function loadConfigData() {
        Adapt.config = new ConfigModel(null, {
          url: 'course/config.' + Adapt.build.get('jsonext'),
          reset: true
        });
        this.listenToOnce(Adapt, 'configModel:loadCourseData', this.onLoadCourseData);
        this.listenTo(Adapt.config, {
          'change:_activeLanguage': this.onLanguageChange,
          'change:_defaultDirection': this.onDirectionChange
        });
      }
    }, {
      key: "onDirectionChange",
      value: function onDirectionChange(model, direction) {
        if (direction === 'rtl') {
          $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
        } else {
          $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
        }
      }
    }, {
      key: "onLoadCourseData",
      value: function onLoadCourseData() {
        if (!Adapt.config.get('_activeLanguage')) {
          Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));
          return;
        }

        this.loadCourseData();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange(model, language) {
        Adapt.offlineStorage.set('lang', language);

        if (Adapt.get('_isStarted')) {
          Adapt.set('_isStarted', false);
        }

        this.loadCourseData(language);
      }
    }, {
      key: "loadCourseData",
      value: function () {
        var _loadCourseData = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(newLanguage) {
          var language, courseFolder;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  language = Adapt.config.get('_activeLanguage');
                  courseFolder = 'course/' + language + '/';
                  $('html').attr('lang', language);
                  _context2.next = 5;
                  return this.loadManifestFiles(courseFolder);

                case 5:
                  _context2.next = 7;
                  return this.triggerDataLoaded();

                case 7:
                  _context2.next = 9;
                  return this.triggerDataReady(newLanguage);

                case 9:
                  this.triggerInit();

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function loadCourseData(_x) {
          return _loadCourseData.apply(this, arguments);
        }

        return loadCourseData;
      }()
    }, {
      key: "getJSON",
      value: function getJSON(path) {
        return new Promise(function (resolve, reject) {
          $.getJSON(path, function (data) {
            data.__path__ = path;
            resolve(data);
          }).fail(reject);
        });
      }
    }, {
      key: "loadManifestFiles",
      value: function () {
        var _loadManifestFiles = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(languagePath) {
          var _this = this;

          var manifestPath, manifest, allFileData, allModelData, course;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.trigger('loading');
                  this.reset();
                  manifestPath = languagePath + 'language_data_manifest.js';
                  _context3.prev = 3;
                  _context3.next = 6;
                  return this.getJSON(manifestPath);

                case 6:
                  manifest = _context3.sent;
                  _context3.next = 13;
                  break;

                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  manifest = ['course.json', 'contentObjects.json', 'articles.json', 'blocks.json', 'components.json'];
                  Adapt.log.warnOnce("Manifest path '".concat(manifestPath, " not found. Using traditional files: ").concat(manifest.join(', ')));

                case 13:
                  _context3.next = 15;
                  return Promise.all(manifest.map(function (filePath) {
                    return _this.getJSON("".concat(languagePath).concat(filePath));
                  }));

                case 15:
                  allFileData = _context3.sent;
                  allModelData = allFileData.reduce(function (result, fileData) {
                    if (Array.isArray(fileData)) {
                      result.push.apply(result, _toConsumableArray(fileData));
                    } else if (fileData instanceof Object) {
                      result.push(fileData);
                    } else {
                      Adapt.log.warnOnce("File data isn't an array or object: ".concat(fileData.__path__));
                    }

                    return result;
                  }, []);
                  course = allModelData.find(function (modelData) {
                    return modelData._type === 'course';
                  });

                  if (course) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error('Expected a model data with "_type": "course", none found.');

                case 20:
                  Adapt.trigger('courseModel:dataLoading');
                  Adapt.course = this.push(course);
                  Adapt.trigger('courseModel:dataLoaded');
                  allModelData.forEach(function (modelData) {
                    if (modelData._type === 'course') {
                      return;
                    }

                    _this.push(modelData);
                  });
                  this.trigger('reset');
                  this.trigger('loaded');
                  _context3.next = 28;
                  return Adapt.wait.queue();

                case 28:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[3, 9]]);
        }));

        function loadManifestFiles(_x2) {
          return _loadManifestFiles.apply(this, arguments);
        }

        return loadManifestFiles;
      }()
    }, {
      key: "triggerDataLoaded",
      value: function () {
        var _triggerDataLoaded = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  Adapt.log.debug('Firing app:dataLoaded');

                  try {
                    this.forEach(function (model) {
                      var _model$setupModel;

                      return (_model$setupModel = model.setupModel) === null || _model$setupModel === void 0 ? void 0 : _model$setupModel.call(model);
                    });
                    Adapt.trigger('app:dataLoaded');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataLoading trigger', e);
                  }

                  _context4.next = 4;
                  return Adapt.wait.queue();

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function triggerDataLoaded() {
          return _triggerDataLoaded.apply(this, arguments);
        }

        return triggerDataLoaded;
      }()
    }, {
      key: "triggerDataReady",
      value: function () {
        var _triggerDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(newLanguage) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (newLanguage) {
                    Adapt.trigger('app:languageChanged', newLanguage);
                    this.performStartController();
                  }

                  Adapt.log.debug('Firing app:dataReady');

                  try {
                    Adapt.trigger('app:dataReady');
                  } catch (e) {
                    Adapt.log.error('Error during app:dataReady trigger', e);
                  }

                  _context5.next = 5;
                  return Adapt.wait.queue();

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function triggerDataReady(_x3) {
          return _triggerDataReady.apply(this, arguments);
        }

        return triggerDataReady;
      }()
    }, {
      key: "performStartController",
      value: function performStartController() {
        Adapt.startController.loadCourseData();
        var hash = Adapt.startController.isEnabled() ? Adapt.startController.getStartHash(false) : '#/';
        Adapt.router.navigate(hash, {
          trigger: true,
          replace: true
        });
      }
    }, {
      key: "triggerInit",
      value: function triggerInit() {
        this.isReady = true;
        this.trigger('ready');
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        var _this2 = this;

        if (this.isReady) return Promise.resolve();
        return new Promise(function (resolve) {
          _this2.once('ready', resolve);
        });
      }
    }, {
      key: "findById",
      value: function findById(id) {
        var model = this._byAdaptID[id];

        if (!model) {
          console.warn("Adapt.findById() unable to find id: ".concat(id));
          return;
        }

        return model;
      }
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition(trackingPosition) {
        var _trackingPosition = _slicedToArray(trackingPosition, 2),
            trackingId = _trackingPosition[0],
            indexInTrackingIdDescendants = _trackingPosition[1];

        var trackingIdModel = this.find(function (model) {
          return model.get('_trackingId') === trackingId;
        });

        if (!trackingIdModel) {
          console.warn("Adapt.findByTrackingPosition() unable to find trackingPosition: ".concat(trackingPosition));
          return;
        }

        if (indexInTrackingIdDescendants >= 0) {
          var trackingIdDescendants = [trackingIdModel].concat(trackingIdModel.getAllDescendantModels(true));
          return trackingIdDescendants[indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = trackingIdModel.getAncestorModels();
        var ancestorDistance = Math.abs(indexInTrackingIdDescendants) - 1;
        return trackingIdAncestors[ancestorDistance];
      }
    }]);

    return Data;
  }(AdaptCollection);

  var data = __AMD("core/js/data", Adapt.data = new Data());

  var OfflineStorage$1 = function (_Backbone$Controller) {
    _inherits(OfflineStorage, _Backbone$Controller);

    var _super = _createSuper(OfflineStorage);

    function OfflineStorage() {
      _classCallCheck(this, OfflineStorage);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorage, [{
      key: "initialize",
      value: function initialize(handler) {
        this.ready = true;
        this._handler = undefined;

        if (!handler) {
          return;
        }

        this.ready = false;
        this._handler = handler;
      }
    }, {
      key: "hasHandler",
      value: function hasHandler() {
        return this._handler !== undefined;
      }
    }, {
      key: "save",
      value: function save() {
        var _this$_handler, _this$_handler$save;

        Adapt.trigger('tracking:save');
        return (_this$_handler = this._handler) === null || _this$_handler === void 0 ? void 0 : (_this$_handler$save = _this$_handler.save) === null || _this$_handler$save === void 0 ? void 0 : _this$_handler$save.apply(this._handler, arguments);
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        var _this$_handler2;

        if ((_this$_handler2 = this._handler) !== null && _this$_handler2 !== void 0 && _this$_handler2.serialize) {
          return this._handler.serialize.apply(this._handler, arguments);
        }

        return JSON.stringify(value);
      }
    }, {
      key: "deserialize",
      value: function deserialize(value) {
        var _this$_handler3;

        if ((_this$_handler3 = this._handler) !== null && _this$_handler3 !== void 0 && _this$_handler3.deserialize) {
          return this._handler.deserialize.apply(this._handler, arguments);
        }

        return JSON.parse(value);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _this$_handler4;

        if ((_this$_handler4 = this._handler) !== null && _this$_handler4 !== void 0 && _this$_handler4.set) {
          return this._handler.set.apply(this._handler, arguments);
        }

        this[name] = value;
      }
    }, {
      key: "get",
      value: function get(name) {
        var _this$_handler5;

        if ((_this$_handler5 = this._handler) !== null && _this$_handler5 !== void 0 && _this$_handler5.get) {
          return this._handler.get.apply(this._handler, arguments);
        }

        return this[name];
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.ready = true;
        Adapt.trigger('offlineStorage:ready');
      }
    }]);

    return OfflineStorage;
  }(Backbone.Controller);

  Adapt.offlineStorage = new OfflineStorage$1();
  var OfflineStorage$2 = __AMD("core/js/offlineStorage", Adapt.offlineStorage);

  var COMPLETION_STATE = ENUM(['INCOMPLETE', 'COMPLETED', 'PASSED', 'FAILED']);
  var COMPLETION_STATE$1 = __AMD("core/js/enums/completionStateEnum", COMPLETION_STATE);

  var Tracking = function (_Backbone$Controller) {
    _inherits(Tracking, _Backbone$Controller);

    var _super = _createSuper(Tracking);

    function Tracking() {
      _classCallCheck(this, Tracking);

      return _super.apply(this, arguments);
    }

    _createClass(Tracking, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _requireContentCompleted: true,
          _requireAssessmentCompleted: false
        };
        this._assessmentState = null;
        Adapt.once('configModel:dataLoaded', this.loadConfig.bind(this));
        Adapt.on('app:dataReady', this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this._config._requireAssessmentCompleted) {
          this.listenTo(Adapt, {
            'assessment:complete': this.onAssessmentComplete,
            'assessment:restored': this.onAssessmentRestored
          });
        }

        if (this._config._requireContentCompleted) {
          this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);
        }
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(assessmentState) {
        this._assessmentState = assessmentState;
        this.submitScore();
        this.checkCompletion();
      }
    }, {
      key: "submitScore",
      value: function submitScore() {
        if (!this._config._shouldSubmitScore) return;

        if (this._assessmentState.isPercentageBased) {
          Adapt.offlineStorage.set('score', this._assessmentState.scoreAsPercent, 0, 100);
          return;
        }

        Adapt.offlineStorage.set('score', this._assessmentState.score, this._assessmentState.minScore, this._assessmentState.maxScore);
      }
    }, {
      key: "onAssessmentRestored",
      value: function onAssessmentRestored(assessmentState) {
        this._assessmentState = assessmentState;
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var completionData = this.getCompletionData();

        if (completionData.status === COMPLETION_STATE$1.INCOMPLETE) {
          return;
        }

        Adapt.trigger('tracking:complete', completionData);
        Adapt.log.debug('tracking:complete', completionData);
      }
    }, {
      key: "getCompletionData",
      value: function getCompletionData() {
        var completionData = {
          status: COMPLETION_STATE$1.INCOMPLETE,
          assessment: null
        };

        if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {
          return completionData;
        }

        if (this._config._requireAssessmentCompleted) {
          if (!this._assessmentState) {
            return completionData;
          }

          completionData.status = this._assessmentState.isPass ? COMPLETION_STATE$1.PASSED : COMPLETION_STATE$1.FAILED;
          completionData.assessment = this._assessmentState;
          return completionData;
        }

        completionData.status = COMPLETION_STATE$1.COMPLETED;
        return completionData;
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt.config.has('_completionCriteria')) {
          this._config = Adapt.config.get('_completionCriteria');
        }
      }
    }]);

    return Tracking;
  }(Backbone.Controller);

  Adapt.tracking = new Tracking();
  __AMD("core/js/tracking", Adapt.tracking);

  var Device = function (_Backbone$Controller) {
    _inherits(Device, _Backbone$Controller);

    var _super = _createSuper(Device);

    function Device() {
      _classCallCheck(this, Device);

      return _super.apply(this, arguments);
    }

    _createClass(Device, [{
      key: "initialize",
      value: function initialize() {
        this.$html = $('html');
        this.$window = $(window);
        this.touch = Modernizr.touchevents;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();
        this.browser = (Bowser__default['default'].name || '').toLowerCase();
        this.version = (Bowser__default['default'].version || '').toLowerCase();
        this.OS = this.getOperatingSystem().toLowerCase();
        this.osVersion = Bowser__default['default'].osversion || '';
        this.renderingEngine = this.getRenderingEngine();
        this.onWindowResize = _.debounce(this.onWindowResize.bind(this), 100);
        this.listenTo(Adapt, {
          'configModel:dataLoaded': this.onConfigDataLoaded
        });
        var browser = this.browser.toLowerCase();
        var browserString = browser.replace(/msie|internet explorer/, 'ie');
        browserString += " version-".concat(this.version, " OS-").concat(this.OS, " ").concat(this.getAppleDeviceType());
        browserString += browserString.replace('.', '-').toLowerCase();
        browserString += " pixel-density-".concat(this.pixelDensity());
        this.$html.addClass(browserString);
      }
    }, {
      key: "orientation",
      get: function () {
        return this.screenWidth >= this.screenHeight ? 'landscape' : 'portrait';
      }
    }, {
      key: "aspectRatio",
      get: function () {
        return this.screenWidth / this.screenHeight;
      }
    }, {
      key: "onConfigDataLoaded",
      value: function onConfigDataLoaded() {
        this.screenSize = this.checkScreenSize();
        this.$html.addClass('size-' + this.screenSize);

        if (this.orientation) {
          this.$html.addClass('orientation-' + this.orientation);
        }

        this.$window.on('resize orientationchange', this.onWindowResize);
      }
    }, {
      key: "checkScreenSize",
      value: function checkScreenSize() {
        var screenSizeConfig = Adapt.config.get('screenSize');
        var screenSize;
        var screensizeEmThreshold = 300;
        var baseFontSize = 16;
        var mediumEmBreakpoint = screenSizeConfig.medium > screensizeEmThreshold ? screenSizeConfig.medium / baseFontSize : screenSizeConfig.medium;
        var smallEmBreakpoint = screenSizeConfig.small > screensizeEmThreshold ? screenSizeConfig.small / baseFontSize : screenSizeConfig.small;
        var fontSize = parseFloat($('html').css('font-size'));
        var screenSizeEmWidth = this.screenWidth / fontSize;

        if (screenSizeEmWidth >= mediumEmBreakpoint) {
          screenSize = 'large';
        } else if (screenSizeEmWidth >= smallEmBreakpoint) {
          screenSize = 'medium';
        } else {
          screenSize = 'small';
        }

        return screenSize;
      }
    }, {
      key: "getScreenWidth",
      value: function getScreenWidth() {
        return this.isAppleDevice() ? this.getAppleScreenWidth() : window.innerWidth || this.$window.width();
      }
    }, {
      key: "getScreenHeight",
      value: function getScreenHeight() {
        return this.isAppleDevice() ? this.getAppleScreenHeight() : window.innerHeight || this.$window.height();
      }
    }, {
      key: "getOperatingSystem",
      value: function getOperatingSystem() {
        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android', 'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];
        var os = flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';

        if (os === '') {
          var platform = navigator.platform.toLowerCase();
          var match = platform.match(/win|mac|linux/);
          if (match) os = match[0];
          if (os === 'win') os = 'windows';
          if (!os) os = 'PlatformUnknown';
        }

        return os;
      }
    }, {
      key: "getRenderingEngine",
      value: function getRenderingEngine() {
        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        var previousWidth = this.screenWidth;
        var previousHeight = this.screenHeight;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();

        if (previousWidth === this.screenWidth && previousHeight === this.screenHeight) {
          return;
        }

        var newScreenSize = this.checkScreenSize();

        if (newScreenSize !== this.screenSize) {
          this.screenSize = newScreenSize;
          this.$html.removeClass('size-small size-medium size-large').addClass('size-' + this.screenSize);

          if (this.orientation) {
            this.$html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + this.orientation);
          }

          Adapt.trigger('device:changed', this.screenSize);
        }

        Adapt.trigger('device:preResize device:resize device:postResize', this.screenWidth);
      }
    }, {
      key: "isAppleDevice",
      value: function isAppleDevice() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      }
    }, {
      key: "getAppleScreenWidth",
      value: function getAppleScreenWidth() {
        return Math.abs(window.orientation) === 90 ? window.screen.height : window.screen.width;
      }
    }, {
      key: "getAppleScreenHeight",
      value: function getAppleScreenHeight() {
        return Math.abs(window.orientation) === 90 ? window.screen.width : window.screen.height;
      }
    }, {
      key: "getAppleDeviceType",
      value: function getAppleDeviceType() {
        var flags = ['iphone', 'ipad', 'ipod'];
        return flags.find(function (name) {
          return Bowser__default['default'][name];
        }) || '';
      }
    }, {
      key: "pixelDensity",
      value: function pixelDensity() {
        var pixelDensity = window.devicePixelRatio || 1;

        if (pixelDensity >= 3) {
          return 'ultra-high';
        } else if (pixelDensity >= 2) {
          return 'high';
        } else if (pixelDensity >= 1.5) {
          return 'medium';
        } else {
          return 'low';
        }
      }
    }]);

    return Device;
  }(Backbone.Controller);

  var device = __AMD("core/js/device", Adapt.device = new Device());

  var DrawerItemView = function (_Backbone$View) {
    _inherits(DrawerItemView, _Backbone$View);

    var _super = _createSuper(DrawerItemView);

    function DrawerItemView() {
      _classCallCheck(this, DrawerItemView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerItemView, [{
      key: "className",
      value: function className() {
        return 'drawer__menu drawer__item';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'list'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'drawer:empty', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__item-btn': 'onDrawerItemClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['drawerItem'];
        $(this.el).html(template(data)).appendTo('.drawer__holder');
        return this;
      }
    }, {
      key: "onDrawerItemClicked",
      value: function onDrawerItemClicked(event) {
        event.preventDefault();
        var eventCallback = this.model.get('eventCallback');
        Adapt.trigger(eventCallback);
      }
    }]);

    return DrawerItemView;
  }(Backbone.View);

  DrawerItemView.type = 'drawerItem';
  var DrawerItemView$1 = __AMD("core/js/views/drawerItemView", DrawerItemView);

  var DrawerView = function (_Backbone$View) {
    _inherits(DrawerView, _Backbone$View);

    var _super = _createSuper(DrawerView);

    function DrawerView() {
      _classCallCheck(this, DrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerView, [{
      key: "className",
      value: function className() {
        return 'drawer u-display-none';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-modal': 'true',
          'aria-labelledby': 'drawer-heading',
          'aria-hidden': 'true'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _Adapt$config$get$_du, _Adapt$config$get;

        this._isVisible = false;
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this.drawerDir = Adapt.config.get('_defaultDirection') === 'rtl' ? 'left' : 'right';
        this.drawerDuration = (_Adapt$config$get$_du = (_Adapt$config$get = Adapt.config.get('_drawer')) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._duration) !== null && _Adapt$config$get$_du !== void 0 ? _Adapt$config$get$_du : 400;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'navigation:toggleDrawer': this.toggleDrawer,
          'drawer:triggerCustomView': this.openCustomView,
          'drawer:closeDrawer': this.onCloseDrawer,
          'remove': this.onRemove,
          'drawer:remove': this.remove
        });
        this.onKeyUp = this.onKeyUp.bind(this);
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.onCloseDrawer();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__back': 'onBackButtonClicked',
          'click .drawer__close': 'onCloseClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.drawer;
        $(this.el).html(template({
          _globals: Adapt.course.get('_globals')
        })).prependTo('body');
        var shadowTemplate = Handlebars.templates.shadow;
        $(shadowTemplate()).prependTo('body');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('a, button, input, select, textarea').attr('tabindex', -1);
        this.checkIfDrawerIsAvailable();
      }
    }, {
      key: "openCustomView",
      value: function openCustomView(view, hasBackButton) {
        this._hasBackButton = hasBackButton;
        this._isCustomViewVisible = true;
        Adapt.trigger('drawer:empty');
        this.showDrawer();
        this.$('.drawer__holder').html(view);
      }
    }, {
      key: "checkIfDrawerIsAvailable",
      value: function checkIfDrawerIsAvailable() {
        var isEmptyDrawer = this.collection.length === 0;
        $('.js-nav-drawer-btn').toggleClass('u-display-none', isEmptyDrawer);

        if (isEmptyDrawer) {
          Adapt.trigger('drawer:noItems');
        }
      }
    }, {
      key: "onBackButtonClicked",
      value: function onBackButtonClicked(event) {
        event.preventDefault();
        this.showDrawer(true);
      }
    }, {
      key: "onCloseClicked",
      value: function onCloseClicked(event) {
        event.preventDefault();
        this.hideDrawer();
      }
    }, {
      key: "onCloseDrawer",
      value: function onCloseDrawer($toElement) {
        this.hideDrawer($toElement);
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.hideDrawer();
      }
    }, {
      key: "toggleDrawer",
      value: function toggleDrawer() {
        if (this._isVisible && this._isCustomViewVisible === false) {
          this.hideDrawer();
          return;
        }

        this.showDrawer(true);
      }
    }, {
      key: "showDrawer",
      value: function showDrawer(emptyDrawer) {
        var _this = this;

        this.$el.removeClass('u-display-none').removeAttr('aria-hidden');

        if (!this._isVisible) {
          Adapt.a11y.popupOpened(this.$el);
          Adapt.a11y.scrollDisable('body');
          this._isVisible = true;
        }

        this.$('a, button, input, select, textarea').attr('tabindex', 0);

        if (emptyDrawer) {
          this.$('.drawer__back').addClass('u-display-none');
          this._isCustomViewVisible = false;
          this.emptyDrawer();

          if (this.collection.models.length === 1) {
            Adapt.trigger(this.collection.models[0].get('eventCallback'));
            this._isCustomViewVisible = false;
          } else {
            this.renderItems();
            Adapt.trigger('drawer:openedItemView');
          }
        } else {
          var hideDrawerBackButton = !this._hasBackButton || this.collection.models.length <= 1;
          this.$('.drawer__back').toggleClass('u-display-none', hideDrawerBackButton);
          Adapt.trigger('drawer:openedCustomView');
        }

        var complete = function () {
          _this.addShadowEvent();

          Adapt.trigger('drawer:opened');
          Adapt.a11y.focusFirst(_this.$el, {
            defer: true
          });
        };

        var direction = {};

        if (this.disableAnimation) {
          $('.js-shadow').removeClass('u-display-none');
          $('.js-drawer-holder').scrollTop(0);
          direction[this.drawerDir] = 0;
          this.$el.css(direction);
          complete();
        } else {
          var _Adapt$config$get2;

          $('.js-shadow').velocity({
            opacity: 1
          }, {
            duration: this.drawerDuration,
            begin: function () {
              $('.js-shadow').removeClass('u-display-none');
              $('.js-drawer-holder').scrollTop(0);
              complete();
            }
          });
          var easing = ((_Adapt$config$get2 = Adapt.config.get('_drawer')) === null || _Adapt$config$get2 === void 0 ? void 0 : _Adapt$config$get2._showEasing) || 'easeOutQuart';
          direction[this.drawerDir] = 0;
          this.$el.velocity(direction, this.drawerDuration, easing);
        }
      }
    }, {
      key: "emptyDrawer",
      value: function emptyDrawer() {
        this.$('.drawer__holder').empty();
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        Adapt.trigger('drawer:empty');
        this.emptyDrawer();
        this.collection.forEach(function (model) {
          return new DrawerItemView$1({
            model: model
          });
        });
      }
    }, {
      key: "hideDrawer",
      value: function hideDrawer($toElement) {
        var _this2 = this;

        if (!this._isVisible) return;
        var direction = {};
        Adapt.a11y.popupClosed($toElement);
        this._isVisible = false;
        Adapt.a11y.scrollEnable('body');

        if (this.disableAnimation) {
          direction[this.drawerDir] = -this.$el.width();
          this.$el.css(direction).addClass('u-display-none').attr('aria-hidden', 'true');
          $('.js-shadow').addClass('u-display-none');
          Adapt.trigger('drawer:closed');
        } else {
          var _Adapt$config$get3;

          var easing = ((_Adapt$config$get3 = Adapt.config.get('_drawer')) === null || _Adapt$config$get3 === void 0 ? void 0 : _Adapt$config$get3._hideEasing) || 'easeInQuart';
          direction[this.drawerDir] = -this.$el.width();
          this.$el.velocity(direction, this.drawerDuration, easing, function () {
            _this2.$el.addClass('u-display-none').attr('aria-hidden', 'true');

            Adapt.trigger('drawer:closed');
          });
          $('.js-shadow').velocity({
            opacity: 0
          }, {
            duration: this.drawerDuration,
            complete: function () {
              $('.js-shadow').addClass('u-display-none');
            }
          });
        }

        this._isCustomViewVisible = false;
        this.removeShadowEvent();
      }
    }, {
      key: "addShadowEvent",
      value: function addShadowEvent() {
        var _this3 = this;

        $('.js-shadow').one('click touchstart', function () {
          return _this3.onCloseDrawer();
        });
      }
    }, {
      key: "removeShadowEvent",
      value: function removeShadowEvent() {
        $('.js-shadow').off('click touchstart');
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(DrawerView.prototype), "remove", this).call(this);

        $(window).off('keyup', this.onKeyUp);
        Adapt.trigger('drawer:empty');
        this.collection.reset();
        $('.js-shadow').remove();
      }
    }]);

    return DrawerView;
  }(Backbone.View);

  Object.assign(DrawerView, {
    childContainer: '.js-drawer-holder',
    childView: DrawerItemView$1
  });
  var DrawerView$1 = __AMD("core/js/views/drawerView", DrawerView);

  var DrawerCollection = new Backbone.Collection(null, {
    comparator: 'drawerOrder'
  });
  var Drawer = {};

  Drawer.addItem = function (drawerObject, eventCallback) {
    drawerObject.eventCallback = eventCallback;
    DrawerCollection.add(drawerObject);
  };

  Drawer.triggerCustomView = function (view, hasBackButton) {
    if (hasBackButton !== false) {
      hasBackButton = true;
    }

    Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);
  };

  Adapt.on({
    'adapt:start': function () {
      new DrawerView$1({
        collection: DrawerCollection
      });
    },
    'app:languageChanged': function () {
      Adapt.trigger('drawer:remove');
    }
  });
  __AMD("core/js/drawer", Adapt.drawer = Drawer);

  var NotifyPushView = __AMD("core/js/views/notifyPushView", function (_Backbone$View) {
    _inherits(NotifyPushView, _Backbone$View);

    var _super = _createSuper(NotifyPushView);

    function NotifyPushView() {
      _classCallCheck(this, NotifyPushView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushView, [{
      key: "className",
      value: function className() {
        var classes = 'notify-push ';
        classes += this.model.get('_classes') || '';
        return classes;
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'dialog',
          'aria-labelledby': 'notify-push-heading',
          'aria-modal': 'false'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, {
          'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
          'remove': this.remove
        });
        this.listenTo(this.model.collection, {
          'remove': this.updateIndexPosition,
          'change:_index': this.updatePushPosition
        });
        this.preRender();
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-push-close-btn': 'closePush',
          'click .js-notify-push-inner': 'triggerEvent'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.hasBeenRemoved = false;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['notifyPush'];
        this.$el.html(template(data)).appendTo('#wrapper');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.addClass('is-active');

        _.delay(this.closePush.bind(this), this.model.get('_timeout'));

        Adapt.trigger('notify:pushShown');
      }
    }, {
      key: "closePush",
      value: function closePush(event) {
        var _this = this;

        if (event) {
          event.preventDefault();
        }

        if (this.hasBeenRemoved === false) {
          this.hasBeenRemoved = true;
          this.$el.removeClass('is-active');

          _.delay(function () {
            _this.model.collection.remove(_this.model);

            Adapt.trigger('notify:pushRemoved', _this);

            _this.remove();
          }, 600);
        }
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        Adapt.trigger(this.model.get('_callbackEvent'));
        this.closePush();
      }
    }, {
      key: "updateIndexPosition",
      value: function updateIndexPosition() {
        var _this2 = this;

        if (this.hasBeenRemoved) return;
        var models = this.model.collection.models;
        models.forEach(function (model, index) {
          if (!model.get('_isActive')) return;
          model.set('_index', index);

          _this2.updatePushPosition();
        });
      }
    }, {
      key: "updatePushPosition",
      value: function updatePushPosition() {
        if (this.hasBeenRemoved) {
          return;
        }

        if (typeof this.model.get('_index') !== 'undefined') {
          var elementHeight = this.$el.height();
          var offset = 20;
          var navigationHeight = $('.nav').height();
          var currentIndex = this.model.get('_index');
          var flippedIndex = currentIndex === 0 ? 1 : 0;

          if (this.model.collection.where({
            _isActive: true
          }).length === 1) {
            flippedIndex = 0;
          }

          var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
          this.$el.css('top', positionLowerPush);
        }
      }
    }]);

    return NotifyPushView;
  }(Backbone.View));

  var NotifyModel = __AMD("core/js/models/notifyModel", function (_LockingModel) {
    _inherits(NotifyModel, _LockingModel);

    var _super = _createSuper(NotifyModel);

    function NotifyModel() {
      _classCallCheck(this, NotifyModel);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _showIcon: false,
          _timeout: 3000
        };
      }
    }]);

    return NotifyModel;
  }(LockingModel));

  var NotifyPushCollection = __AMD("core/js/collections/notifyPushCollection", function (_Backbone$Collection) {
    _inherits(NotifyPushCollection, _Backbone$Collection);

    var _super = _createSuper(NotifyPushCollection);

    function NotifyPushCollection() {
      _classCallCheck(this, NotifyPushCollection);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushCollection, [{
      key: "initialize",
      value: function initialize() {
        this.model = NotifyModel;
        this.listenTo(this, 'add', this.onPushAdded);
        this.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);
      }
    }, {
      key: "onPushAdded",
      value: function onPushAdded(model) {
        this.checkPushCanShow(model);
      }
    }, {
      key: "checkPushCanShow",
      value: function checkPushCanShow(model) {
        if (!this.canShowPush()) return;
        model.set('_isActive', true);
        this.showPush(model);
      }
    }, {
      key: "canShowPush",
      value: function canShowPush() {
        var availablePushNotifications = this.where({
          _isActive: true
        });
        return availablePushNotifications.length < 2;
      }
    }, {
      key: "showPush",
      value: function showPush(model) {
        new NotifyPushView({
          model: model
        });
      }
    }, {
      key: "onRemovePush",
      value: function onRemovePush(view) {
        var inactivePushNotifications = this.where({
          _isActive: false
        });

        if (inactivePushNotifications.length > 0) {
          this.checkPushCanShow(inactivePushNotifications[0]);
        }
      }
    }]);

    return NotifyPushCollection;
  }(Backbone.Collection));

  var ChildEvent = __AMD("core/js/childEvent", function (_Backbone$Controller) {
    _inherits(ChildEvent, _Backbone$Controller);

    var _super = _createSuper(ChildEvent);

    function ChildEvent() {
      _classCallCheck(this, ChildEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ChildEvent, [{
      key: "initialize",
      value: function initialize(type, target, model) {
        this.type = type;
        this.target = target;
        this.isForced = false;
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
        this.hasRequestChild = false;
        this._model = model;
      }
    }, {
      key: "model",
      get: function () {
        return this._model;
      },
      set: function (model) {
        if (this.type !== 'requestChild') {
          Adapt.log.warn("Cannot change model in ".concat(this.type, " event."));
          return;
        }

        if (this._model) {
          Adapt.log.warn("Cannot inject two models in one sitting. ".concat(model.get('_id'), " attempts to overwrite ").concat(this._model.get('_id')));
          return;
        }

        this._model = model;
        this.hasRequestChild = true;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
      }
    }, {
      key: "force",
      value: function force() {
        this.isForced = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!immediate) {
          return this.stopNext();
        }

        this.isStoppedImmediate = true;
      }
    }, {
      key: "stopNext",
      value: function stopNext() {
        this.isStoppedNext = true;
      }
    }, {
      key: "close",
      value: function close() {
        this.trigger('closed');
      }
    }]);

    return ChildEvent;
  }(Backbone.Controller));

  var register = __AMD("core/js/reactHelpers", function register(name, component) {
    templates[name] = function () {
      var mode = 'reactTemplate';

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt.trigger(preRenderEvent.type, preRenderEvent);
      var value = component.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  });

  (function () {
    var original = React__default['default'].createElement;

    React__default['default'].createElement = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var name = args[0];
      var mode = 'reactElement';
      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt.trigger(preRenderEvent.type, preRenderEvent);
      var value = original.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  })();

  var templates = {};
  function html(html) {
    if (!html) return;
    logging.deprecated('reactHelpers.html please use react dangerouslySetInnerHTML instead: https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml');
    return {
      __html: html
    };
  }
  function compile(template) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var output = Handlebars.compile(template).apply(void 0, args);
    return output;
  }
  function classes() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    return _.uniq(_.flatten(args).filter(Boolean).join(' ').split(' ')).join(' ');
  }
  function prefixClasses(prefixes) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }

    var classes = _.flatten(args).filter(Boolean);

    var prefixed = _.flatten(prefixes.map(function (prefix) {
      return classes.map(function (className) {
        return "".concat(prefix).concat(className);
      });
    }));

    return _.uniq(prefixed.join(' ').split(' ')).join(' ');
  }

  var AdaptView = function (_Backbone$View) {
    _inherits(AdaptView, _Backbone$View);

    var _super = _createSuper(AdaptView);

    function AdaptView() {
      _classCallCheck(this, AdaptView);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptView, [{
      key: "attributes",
      value: function attributes() {
        return {
          'data-adapt-id': this.model.get('_id')
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(this.model, {
          'change:_isVisible': this.toggleVisibility,
          'change:_isHidden': this.toggleHidden,
          'change:_isComplete': this.onIsCompleteChange
        });
        this.isJSX = (this.constructor.template || '').includes('.jsx');

        if (this.isJSX) {
          var _this$model, _this$model$getChildr;

          this._classSet = new Set(_.result(this, 'className').trim().split(/\s+/));
          this.listenTo(this.model, 'all', this.changed);
          var children = (_this$model = this.model) === null || _this$model === void 0 ? void 0 : (_this$model$getChildr = _this$model.getChildren) === null || _this$model$getChildr === void 0 ? void 0 : _this$model$getChildr.call(_this$model);
          children && this.listenTo(children, 'all', this.changed);
          this.listenTo(Adapt, 'device:changed', this.changed);
        }

        this.model.set({
          _globals: Adapt.course.get('_globals'),
          _isReady: false
        });
        this._isRemoved = false;

        if (Adapt.location._currentId === this.model.get('_id')) {
          Adapt.parentView = this;
        }

        this.preRender();
        this.render();
        this.setupOnScreenHandler();
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function () {
        var _postRender = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.addChildren();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function postRender() {
          return _postRender.apply(this, arguments);
        }

        return postRender;
      }()
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender view:preRender"), this);

        if (this.isJSX) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt.trigger("".concat(type, "View:render view:render"), this);

        _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this._isRemoved) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _context2.next = 4;
                  return _this.postRender();

                case 4:
                  Adapt.trigger("".concat(type, "View:postRender view:postRender"), _this);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })));

        return this;
      }
    }, {
      key: "changed",
      value: function changed() {
        var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (!this.isJSX) {
          throw new Error('Cannot call changed on a non-react view');
        }

        if (typeof eventName === 'string' && eventName.startsWith('bubble')) {
          return;
        }

        var props = _objectSpread2(_objectSpread2(_objectSpread2({}, this), this.model.toJSON()), {}, {
          _globals: Adapt.course.get('_globals')
        });

        var Template = templates[this.constructor.template.replace('.jsx', '')];
        this.updateViewProperties();
        ReactDOM__default['default'].render(React__default['default'].createElement(Template, props), this.el);
      }
    }, {
      key: "updateViewProperties",
      value: function updateViewProperties() {
        var _this2 = this;

        var classesToAdd = _.result(this, 'className').trim().split(/\s+/);

        classesToAdd.forEach(function (i) {
          return _this2._classSet.add(i);
        });

        var classesToRemove = _toConsumableArray(this._classSet).filter(function (i) {
          return !classesToAdd.includes(i);
        });

        classesToRemove.forEach(function (i) {
          return _this2._classSet["delete"](i);
        });

        this._setAttributes(_objectSpread2(_objectSpread2({}, _.result(this, 'attributes')), {}, {
          id: _.result(this, 'id')
        }));

        this.$el.removeClass(classesToRemove).addClass(classesToAdd);
      }
    }, {
      key: "setupOnScreenHandler",
      value: function setupOnScreenHandler() {
        var _this3 = this;

        var onscreen = this.model.get('_onScreen');
        if (!(onscreen !== null && onscreen !== void 0 && onscreen._isEnabled)) return;
        this.$el.addClass("has-animation ".concat(onscreen._classes, "-before"));
        this.$el.on('onscreen.adaptView', function (e, m) {
          if (!m.onscreen) return;
          var minVerticalInview = onscreen._percentInviewVertical || 33;
          if (m.percentInviewVertical < minVerticalInview) return;

          _this3.$el.addClass("".concat(onscreen._classes, "-after")).off('onscreen.adaptView');
        });
      }
    }, {
      key: "addChildren",
      value: function () {
        var _addChildren = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var addedCount, models, event, subsequentModels, model, ChildView, childView;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.nthChild = this.nthChild || 0;
                  _context3.next = 3;
                  return this.addDescendants(false);

                case 3:
                  addedCount = _context3.sent;

                case 4:

                  models = this.model.getAvailableChildModels();
                  event = this._getAddChildEvent(models[this.nthChild]);

                  if (event) {
                    _context3.next = 9;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 9:
                  if (event.isForced) {
                    event.reset();
                  }

                  if (!(event.isStoppedImmediate || !event.model)) {
                    _context3.next = 14;
                    break;
                  }

                  subsequentModels = models.slice(this.nthChild);
                  subsequentModels.forEach(function (model) {
                    return model.setOnChildren('_isRendered', false);
                  });
                  return _context3.abrupt("break", 26);

                case 14:
                  model = event.model;
                  model.set({
                    _isRendered: true,
                    _nthChild: ++this.nthChild
                  });
                  ChildView = this.constructor.childView || Adapt.getViewClass(model);

                  if (ChildView) {
                    _context3.next = 19;
                    break;
                  }

                  throw new Error("The component '".concat(model.attributes._id, "' ('").concat(model.attributes._component, "') has not been installed, and so is not available in your project."));

                case 19:
                  childView = new ChildView({
                    model: model
                  });
                  this.addChildView(childView);
                  addedCount++;

                  if (!event.isStoppedNext) {
                    _context3.next = 24;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 24:
                  _context3.next = 4;
                  break;

                case 26:
                  if (addedCount) {
                    _context3.next = 28;
                    break;
                  }

                  return _context3.abrupt("return", addedCount);

                case 28:
                  this.model.set('_isReady', false);
                  return _context3.abrupt("return", addedCount);

                case 30:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function addChildren() {
          return _addChildren.apply(this, arguments);
        }

        return addChildren;
      }()
    }, {
      key: "addChildView",
      value: function addChildView(childView) {
        var childViews = this.getChildViews() || [];
        childViews.push(childView);
        this.setChildViews(childViews);
        var $parentContainer = this.$(this.constructor.childContainer);

        switch (childView.model.get('_renderPosition')) {
          case 'outer-append':
            this.$el.append(childView.$el);
            break;

          case 'inner-append':
          default:
            $parentContainer.append(childView.$el);
            break;
        }

        Adapt.trigger('view:childAdded', this, childView);
        return childView;
      }
    }, {
      key: "addDescendants",
      value: function () {
        var _addDescendants = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var addedDescendantCount, childViews, i, l, view;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  addedDescendantCount = 0;
                  childViews = this.getChildViews();

                  if (childViews) {
                    _context4.next = 4;
                    break;
                  }

                  return _context4.abrupt("return", addedDescendantCount);

                case 4:
                  i = 0, l = childViews.length;

                case 5:
                  if (!(i < l)) {
                    _context4.next = 20;
                    break;
                  }

                  view = childViews[i];

                  if (!view.addChildren) {
                    _context4.next = 13;
                    break;
                  }

                  _context4.next = 10;
                  return view.addChildren();

                case 10:
                  _context4.t0 = _context4.sent;
                  _context4.next = 14;
                  break;

                case 13:
                  _context4.t0 = 0;

                case 14:
                  addedDescendantCount = _context4.t0;

                  if (!addedDescendantCount) {
                    _context4.next = 17;
                    break;
                  }

                  return _context4.abrupt("break", 20);

                case 17:
                  i++;
                  _context4.next = 5;
                  break;

                case 20:
                  if (addedDescendantCount) {
                    _context4.next = 23;
                    break;
                  }

                  this.model.checkReadyStatus();
                  return _context4.abrupt("return", addedDescendantCount);

                case 23:
                  this.model.set('_isReady', false);
                  return _context4.abrupt("return", addedDescendantCount);

                case 25:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function addDescendants() {
          return _addDescendants.apply(this, arguments);
        }

        return addDescendants;
      }()
    }, {
      key: "whenReady",
      value: function () {
        var _whenReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var _this4 = this;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!this.model.get('_isReady')) {
                    _context5.next = 2;
                    break;
                  }

                  return _context5.abrupt("return");

                case 2:
                  return _context5.abrupt("return", new Promise(function (resolve) {
                    var onReadyChange = function (model, value) {
                      if (!value) return;

                      _this4.stopListening(_this4.model, 'change:_isReady', onReadyChange);

                      resolve();
                    };

                    _this4.listenTo(_this4.model, 'change:_isReady', onReadyChange);

                    _this4.model.checkReadyStatus();
                  }));

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function whenReady() {
          return _whenReady.apply(this, arguments);
        }

        return whenReady;
      }()
    }, {
      key: "_getAddChildEvent",
      value: function _getAddChildEvent(model) {
        var isRequestChild = !model;
        var event = new ChildEvent(null, this, model);

        if (isRequestChild) {
          var canRequestChild = this.model.get('_canRequestChild');

          if (!canRequestChild) {
            return;
          }

          event.type = 'requestChild';
          Adapt.trigger('view:requestChild', event);

          if (!event.hasRequestChild) {
            event.close();
            return;
          }
        }

        event.type = 'addChild';
        Adapt.trigger('view:addChild', event);
        event.close();
        return event;
      }
    }, {
      key: "findDescendantViews",
      value: function findDescendantViews(isParentFirst) {
        var descendants = [];
        var childViews = this.getChildViews();
        childViews === null || childViews === void 0 ? void 0 : childViews.forEach(function (view) {
          var _view$findDescendantV;

          if (isParentFirst) descendants.push(view);
          var children = (_view$findDescendantV = view.findDescendantViews) === null || _view$findDescendantV === void 0 ? void 0 : _view$findDescendantV.call(view, isParentFirst);
          if (children) descendants.push.apply(descendants, _toConsumableArray(children));
          if (!isParentFirst) descendants.push(view);
        });
        return descendants;
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.model.set('_isReady', true);
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.model.get('_isVisible')) return;
        this.model.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "resetCompletionStatus",
      value: function resetCompletionStatus(type) {
        if (!this.model.get('_canReset')) return;
        var descendantComponents = this.model.findDescendantModels('component');

        if (descendantComponents.length === 0) {
          this.model.reset(type);
        } else {
          descendantComponents.forEach(function (model) {
            return model.reset(type);
          });
        }
      }
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this5 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove view:remove"), this);
        this._isRemoved = true;
        this.stopListening();
        Adapt.wait["for"](function (end) {
          if (_this5.isJSX) {
            ReactDOM__default['default'].unmountComponentAtNode(_this5.el);
          }

          _this5.$el.off('onscreen.adaptView');

          _get(_getPrototypeOf(AdaptView.prototype), "remove", _this5).call(_this5);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove view:postRemove"), _this5);
          });

          end();
        });
        return this;
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        return this.model.get('_isVisible') ? '' : 'u-visibility-hidden';
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility() {
        this.$el.toggleClass('u-visibility-hidden', !this.model.get('_isVisible'));
      }
    }, {
      key: "setHidden",
      value: function setHidden() {
        return this.model.get('_isHidden') ? 'u-display-none' : '';
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden() {
        this.$el.toggleClass('u-display-none', this.model.get('_isHidden'));
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$el.toggleClass('is-complete', isComplete);
      }
    }, {
      key: "getChildViews",
      value: function getChildViews() {
        if (!this._childViews) return this._childViews;
        return Object.entries(this._childViews).map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2);
              _ref3[0];
              var value = _ref3[1];

          return value;
        });
      }
    }, {
      key: "setChildViews",
      value: function setChildViews(value) {
        this._childViews = value;
      }
    }, {
      key: "childViews",
      get: function () {
        Adapt.log.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');

        if (Array.isArray(this._childViews)) {
          return _.indexBy(this._childViews, function (view) {
            return view.model.get('_id');
          });
        }

        return this._childViews;
      },
      set: function (value) {
        Adapt.log.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');
        this.setChildViews(value);
      }
    }]);

    return AdaptView;
  }(Backbone.View);

  AdaptView.className = '';
  var AdaptView$1 = __AMD("core/js/views/adaptView", AdaptView);

  var NotifyView = __AMD("core/js/views/notifyView", function (_Backbone$View) {
    _inherits(NotifyView, _Backbone$View);

    var _super = _createSuper(NotifyView);

    function NotifyView() {
      _classCallCheck(this, NotifyView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyView, [{
      key: "className",
      value: function className() {
        return "notify ".concat(this.model.get('_classes') || '');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return Object.assign({
          role: 'dialog',
          'aria-labelledby': 'notify-heading',
          'aria-modal': 'true'
        }, this.model.get('_attributes'));
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-btn-alert': 'onAlertButtonClicked',
          'click .js-notify-btn-prompt': 'onPromptButtonClicked',
          'click .js-notify-close-btn': 'onCloseButtonClicked',
          'click .js-notify-shadow-click': 'onShadowClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'resetNotifySize', 'onKeyUp');

        this.disableAnimation = Adapt.config.get('_disableAnimation') || false;
        this.isOpen = false;
        this.hasOpened = false;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt, {
          'remove page:scrollTo': this.closeNotify,
          'notify:resize': this.resetNotifySize,
          'notify:cancel': this.cancelNotify,
          'notify:close': this.closeNotify,
          'device:resize': this.resetNotifySize
        });
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates.notify;
        this.$el.css('visibility', 'hidden');
        this.$el.html(template(data)).appendTo('body');
        this.$('.notify__popup').css('visibility', 'hidden');
        this.$el.css('visibility', 'visible');
        this.showNotify();
        return this;
      }
    }, {
      key: "onAlertButtonClicked",
      value: function onAlertButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger(this.model.get('_callbackEvent'), this);
      }
    }, {
      key: "onPromptButtonClicked",
      value: function onPromptButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt.trigger($(event.currentTarget).attr('data-event'), this);
      }
    }, {
      key: "onCloseButtonClicked",
      value: function onCloseButtonClicked(event) {
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "onShadowClicked",
      value: function onShadowClicked(event) {
        event.preventDefault();
        if (this.model.get('_closeOnShadowClick') === false) return;
        this.cancelNotify();
      }
    }, {
      key: "cancelNotify",
      value: function cancelNotify() {
        if (this.model.get('_isCancellable') === false) return;
        this.closeNotify();
        Adapt.trigger('notify:cancelled', this);
      }
    }, {
      key: "resetNotifySize",
      value: function resetNotifySize() {
        if (!this.hasOpened) return;
        this.resizeNotify();
      }
    }, {
      key: "resizeNotify",
      value: function resizeNotify() {
        var windowHeight = $(window).height();
        var notifyHeight = this.$('.notify__popup-inner').outerHeight();
        var isFullWindow = notifyHeight >= windowHeight;
        this.$('.notify__popup').css({
          'height': isFullWindow ? '100%' : 'auto',
          'top': isFullWindow ? 0 : '',
          'margin-top': isFullWindow ? '' : -(notifyHeight / 2),
          'overflow-y': isFullWindow ? 'scroll' : '',
          '-webkit-overflow-scrolling': isFullWindow ? 'touch' : ''
        });
      }
    }, {
      key: "showNotify",
      value: function () {
        var _showNotify = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.isOpen = true;
                  _context.next = 3;
                  return this.addSubView();

                case 3:
                  Adapt.notify.stack.push(this);
                  this.$previousActiveElement = $(document.activeElement);
                  Adapt.trigger('notify:opened', this);
                  this.$el.imageready(this.onLoaded.bind(this));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function showNotify() {
          return _showNotify.apply(this, arguments);
        }

        return showNotify;
      }()
    }, {
      key: "onLoaded",
      value: function onLoaded() {
        var _this = this;

        if (this.disableAnimation) {
          this.$('.notify__shadow').css('display', 'block');
        } else {
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__shadow').css('display', 'block');
            }
          });
        }

        this.resizeNotify();

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'visible');
          this.onOpened();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__popup').css('visibility', 'visible');

              _this.onOpened();
            }
          });
        }
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        $.inview();
        this.hasOpened = true;
        Adapt.a11y.popupOpened(this.$('.notify__popup'));
        Adapt.a11y.scrollDisable('body');
        $('html').addClass('notify');
        Adapt.a11y.focusFirst(this.$('.notify__popup'), {
          defer: false
        });
      }
    }, {
      key: "addSubView",
      value: function () {
        var _addSubView = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var model, View;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.subView = this.model.get('_view');

                  if (this.model.get('_id')) {
                    model = Adapt.findById(this.model.get('_id'));
                    View = Adapt.getViewClass(model);
                    this.subView = new View({
                      model: model
                    });
                  }

                  if (this.subView) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  this.subView.$el.on('resize', this.resetNotifySize);
                  this.$('.notify__content-inner').prepend(this.subView.$el);

                  if (!(!(this.subView instanceof AdaptView$1) || this.subView.model.get('_isReady'))) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return");

                case 8:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    var check = function (model, value) {
                      if (!value) return;

                      _this2.subView.model.off('change:_isReady', check);

                      resolve();
                    };

                    _this2.subView.model.on('change:_isReady', check);
                  }));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function addSubView() {
          return _addSubView.apply(this, arguments);
        }

        return addSubView;
      }()
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        var _this3 = this;

        var stackItem = Adapt.notify.stack[Adapt.notify.stack.length - 1];
        if (this !== stackItem) return;
        Adapt.notify.stack.pop();
        if (!this.isOpen) return;
        this.isOpen = false;

        if (this.hasOpened) {
          this.onCloseReady();
          return;
        }

        this.listenToOnce(Adapt, 'popup:opened', function () {
          _.defer(_this3.onCloseReady.bind(_this3));
        });
      }
    }, {
      key: "onCloseReady",
      value: function onCloseReady() {
        var _this4 = this;

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'hidden');
          this.$el.css('visibility', 'hidden');
          this.remove();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$('.notify__popup').css('visibility', 'hidden');
            }
          });
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$el.css('visibility', 'hidden');

              _this4.remove();
            }
          });
        }

        Adapt.a11y.scrollEnable('body');
        $('html').removeClass('notify');
        Adapt.a11y.popupClosed(this.$previousActiveElement);
        Adapt.trigger('notify:closed', this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _get2;

        this.removeSubView();
        $(window).off('keyup', this.onKeyUp);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NotifyView.prototype), "remove", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "removeSubView",
      value: function removeSubView() {
        if (!this.subView) return;
        this.subView.$el.off('resize', this.resetNotifySize);

        if (this.subView instanceof AdaptView$1) {
          var views = [].concat(_toConsumableArray(this.subView.findDescendantViews()), [this.subView]);
          views.forEach(function (view) {
            view.model.set('_isReady', false);
            view.remove();
          });
        } else {
          this.subView.remove();
        }

        this.subView = null;
      }
    }]);

    return NotifyView;
  }(Backbone.View));

  var Notify = function (_Backbone$Controller) {
    _inherits(Notify, _Backbone$Controller);

    var _super = _createSuper(Notify);

    function Notify() {
      _classCallCheck(this, Notify);

      return _super.apply(this, arguments);
    }

    _createClass(Notify, [{
      key: "initialize",
      value: function initialize() {
        this._stack = [];
        this.notifyPushes = new NotifyPushCollection();
        this.listenTo(Adapt, {
          'notify:popup': this._deprecated.bind(this, 'popup'),
          'notify:alert': this._deprecated.bind(this, 'alert'),
          'notify:prompt': this._deprecated.bind(this, 'prompt'),
          'notify:push': this._deprecated.bind(this, 'push')
        });
      }
    }, {
      key: "stack",
      get: function () {
        return this._stack;
      }
    }, {
      key: "_deprecated",
      value: function _deprecated(type, notifyObject) {
        Adapt.log.deprecated("NOTIFY DEPRECATED: Adapt.trigger('notify:".concat(type, "', notifyObject); is no longer supported, please use Adapt.notify.").concat(type, "(notifyObject);"));
        return this.create(notifyObject, {
          _type: type
        });
      }
    }, {
      key: "create",
      value: function create(notifyObject, defaults) {
        notifyObject = _.defaults({}, notifyObject, defaults, {
          _type: 'popup',
          _isCancellable: true,
          _showCloseButton: true,
          _closeOnShadowClick: true
        });

        if (notifyObject._type === 'push') {
          this.notifyPushes.push(notifyObject);
          return;
        }

        return new NotifyView({
          model: new NotifyModel(notifyObject)
        });
      }
    }, {
      key: "popup",
      value: function popup(notifyObject) {
        return this.create(notifyObject, {
          _type: 'popup'
        });
      }
    }, {
      key: "alert",
      value: function alert(notifyObject) {
        return this.create(notifyObject, {
          _type: 'alert'
        });
      }
    }, {
      key: "prompt",
      value: function prompt(notifyObject) {
        return this.create(notifyObject, {
          _type: 'prompt'
        });
      }
    }, {
      key: "push",
      value: function push(notifyObject) {
        return this.create(notifyObject, {
          _type: 'push'
        });
      }
    }]);

    return Notify;
  }(Backbone.Controller);

  var notify = __AMD("core/js/notify", Adapt.notify = new Notify());

  var RouterModel = __AMD("core/js/models/routerModel", function (_LockingModel) {
    _inherits(RouterModel, _LockingModel);

    var _super = _createSuper(RouterModel);

    function RouterModel() {
      _classCallCheck(this, RouterModel);

      return _super.apply(this, arguments);
    }

    _createClass(RouterModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _canNavigate: true,
          _shouldNavigateFocus: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canNavigate: false,
          _shouldNavigateFocus: false
        };
      }
    }]);

    return RouterModel;
  }(LockingModel));

  var Router = function (_Backbone$Router) {
    _inherits(Router, _Backbone$Router);

    var _super = _createSuper(Router);

    function Router() {
      _classCallCheck(this, Router);

      return _super.apply(this, arguments);
    }

    _createClass(Router, [{
      key: "routes",
      value: function routes() {
        return {
          '': 'handleRoute',
          'id/:id': 'handleRoute',
          ':pluginName(/*location)(/*action)': 'handleRoute'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(_ref) {
        var model = _ref.model;
        this._isBackward = false;
        this.model = model;
        this._navigationRoot = null;
        this._isCircularNavigationInProgress = false;
        this.showLoading();
        this.$wrapper = $('#wrapper');
        this.$html = $('html');
        this.listenToOnce(Adapt, 'app:dataReady', this.setDocumentTitle);
        this.listenTo(Adapt, 'router:navigateTo', this.navigateToArguments);
      }
    }, {
      key: "rootModel",
      get: function () {
        return this._navigationRoot || Adapt.course;
      },
      set: function (model) {
        this._navigationRoot = model;
      }
    }, {
      key: "showLoading",
      value: function showLoading() {
        $('.js-loading').show();
      }
    }, {
      key: "hideLoading",
      value: function hideLoading() {
        $('.js-loading').hide();
      }
    }, {
      key: "setDocumentTitle",
      value: function setDocumentTitle() {
        var currentModel = Adapt.location._currentModel;
        var hasSubTitle = currentModel && currentModel !== Adapt.router.rootModel && currentModel.get('title');
        var title = [this.rootModel.get('title'), hasSubTitle && currentModel.get('title')].filter(Boolean).join(' | ');
        this.listenToOnce(Adapt, 'contentObjectView:preRender', function () {
          var escapedTitle = $("<div>".concat(title, "</div>")).text();
          document.title = escapedTitle;
        });
      }
    }, {
      key: "navigateToArguments",
      value: function navigateToArguments(args) {
        args = args.filter(function (v) {
          return v !== null;
        });
        var options = {
          trigger: false,
          replace: false
        };

        if (args.length === 1 && Adapt.findById(args[0])) {
          this.navigate('#/id/' + args[0], options);
          return;
        }

        if (args.length <= 3) {
          this.navigate('#/' + args.join('/'), options);
          return;
        }

        Adapt.log.deprecated('Use Backbone.history.navigate or window.location.href instead of Adapt.trigger(\'router:navigateTo\')');
        this.handleRoute.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "handleRoute",
      value: function handleRoute() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args = args.filter(function (v) {
          return v !== null;
        });

        if (this.model.get('_canNavigate')) {
          this._isCircularNavigationInProgress = false;
        }

        if (this._isCircularNavigationInProgress === false) {
          Adapt.trigger('router:navigate', args);
        }

        if (this.model.get('_canNavigate')) {
          this.model.set('_canNavigate', false, {
            pluginName: 'adapt'
          });
          this._isBackward = false;

          if (args.length <= 1) {
            return this.handleId.apply(this, _toConsumableArray(args));
          }

          return this.handlePluginRouter.apply(this, _toConsumableArray(args));
        }

        if (this._isCircularNavigationInProgress) {
          this._isCircularNavigationInProgress = false;
          return;
        }

        this._isCircularNavigationInProgress = true;
        Adapt.trigger('router:navigationCancelled', args);
        Backbone.history.history[this._isBackward ? 'forward' : 'back']();
        this._isBackward = false;
      }
    }, {
      key: "handlePluginRouter",
      value: function () {
        var _handlePluginRouter = _asyncToGenerator(regeneratorRuntime.mark(function _callee(pluginName, location, action) {
          var pluginLocation;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  pluginLocation = [pluginName, location && "-".concat(location), action && "-".concat(action)].filter(Boolean).join('');
                  _context.next = 3;
                  return this.updateLocation(pluginLocation, null, null, null);

                case 3:
                  Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);
                  Adapt.trigger('router:plugin', pluginName, location, action);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handlePluginRouter(_x, _x2, _x3) {
          return _handlePluginRouter.apply(this, arguments);
        }

        return handlePluginRouter;
      }()
    }, {
      key: "handleId",
      value: function () {
        var _handleId = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(id) {
          var _this = this;

          var rootModel, model, isContentObject, navigateToId, isRoot, startController, isCourse, type, location, ViewClass, isMenu;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  rootModel = Adapt.router.rootModel;
                  model = !id ? rootModel : Adapt.findById(id);

                  if (model) {
                    _context2.next = 5;
                    break;
                  }

                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });
                  return _context2.abrupt("return");

                case 5:
                  isContentObject = model instanceof ContentObjectModel;
                  navigateToId = model.get('_id');
                  model = isContentObject ? model : model.findAncestor('contentobject');
                  id = model.get('_id');
                  isRoot = model === rootModel;

                  if (!(isRoot && Adapt.course.has('_start'))) {
                    _context2.next = 14;
                    break;
                  }

                  startController = Adapt.course.get('_start');

                  if (!(startController._isEnabled === true && startController._isMenuDisabled === true)) {
                    _context2.next = 14;
                    break;
                  }

                  return _context2.abrupt("return");

                case 14:
                  if (!(model.get('_isLocked') && Adapt.config.get('_forceRouteLocking'))) {
                    _context2.next = 20;
                    break;
                  }

                  Adapt.log.warn('Unable to navigate to locked id: ' + id);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                  if (!(Adapt.location._previousId === undefined)) {
                    _context2.next = 19;
                    break;
                  }

                  return _context2.abrupt("return", this.navigate('#/', {
                    trigger: true,
                    replace: true
                  }));

                case 19:
                  return _context2.abrupt("return", this.navigateBack());

                case 20:
                  this.showLoading();
                  _context2.next = 23;
                  return Adapt.remove();

                case 23:
                  isCourse = model instanceof CourseModel$1;
                  type = isCourse ? 'menu' : model.get('_type');
                  location = isCourse ? 'course' : "".concat(type, "-").concat(id);
                  model.set('_isVisited', true);
                  _context2.next = 29;
                  return this.updateLocation(location, type, id, model);

                case 29:
                  Adapt.once('contentObjectView:ready', function () {
                    _this.model.set('_canNavigate', true, {
                      pluginName: 'adapt'
                    });

                    _this.handleNavigationFocus();
                  });
                  Adapt.trigger("router:".concat(type, " router:contentObject"), model);
                  ViewClass = Adapt.getViewClass(model);
                  isMenu = model instanceof MenuModel$1;

                  if (!(!ViewClass && isMenu)) {
                    _context2.next = 36;
                    break;
                  }

                  Adapt.log.deprecated("Using event based menu view instantiation for '".concat(Adapt.getViewName(model), "'"));
                  return _context2.abrupt("return");

                case 36:
                  if (isMenu) {
                    _context2.next = 40;
                    break;
                  }

                  _.invoke(model.getAllDescendantModels(), 'checkIfResetOnRevisit');

                  _context2.next = 40;
                  return Adapt.deferUntilCompletionChecked();

                case 40:
                  this.$wrapper.append(new ViewClass({
                    model: model
                  }).$el);

                  if (!(!isContentObject && !this.isScrolling)) {
                    _context2.next = 44;
                    break;
                  }

                  _context2.next = 44;
                  return Adapt.navigateToElement('.' + navigateToId, {
                    replace: true,
                    duration: 400
                  });

                case 44:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function handleId(_x4) {
          return _handleId.apply(this, arguments);
        }

        return handleId;
      }()
    }, {
      key: "updateLocation",
      value: function () {
        var _updateLocation = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(currentLocation, type, id, currentModel) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  Adapt.location._previousModel = Adapt.location._currentModel;
                  Adapt.location._previousId = Adapt.location._currentId;
                  Adapt.location._previousContentType = Adapt.location._contentType;
                  Adapt.location._currentModel = currentModel;
                  Adapt.location._currentId = id;
                  Adapt.location._contentType = type;
                  Adapt.location._currentLocation = currentLocation;

                  if (type === 'menu') {
                    Adapt.location._lastVisitedType = 'menu';
                    Adapt.location._lastVisitedMenu = id;
                  } else if (type === 'page') {
                    Adapt.location._lastVisitedType = 'page';
                    Adapt.location._lastVisitedPage = id;
                  }

                  this.setDocumentTitle();
                  this.setGlobalClasses();
                  Adapt.trigger('router:location', Adapt.location);
                  _context3.next = 13;
                  return Adapt.wait.queue();

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function updateLocation(_x5, _x6, _x7, _x8) {
          return _updateLocation.apply(this, arguments);
        }

        return updateLocation;
      }()
    }, {
      key: "setGlobalClasses",
      value: function setGlobalClasses() {
        var currentModel = Adapt.location._currentModel;
        var htmlClasses = (currentModel === null || currentModel === void 0 ? void 0 : currentModel.get('_htmlClasses')) || '';
        var classes = Adapt.location._currentId ? "location-".concat(Adapt.location._contentType, " location-id-").concat(Adapt.location._currentId) : "location-".concat(Adapt.location._currentLocation);
        var currentClasses = "".concat(classes, " ").concat(htmlClasses);
        this.$html.removeClass(Adapt.location._previousClasses).addClass(currentClasses).attr('data-location', Adapt.location._currentLocation);
        this.$wrapper.removeClass().addClass(classes).attr('data-location', Adapt.location._currentLocation);
        Adapt.location._previousClasses = currentClasses;
      }
    }, {
      key: "handleNavigationFocus",
      value: function handleNavigationFocus() {
        if (!this.model.get('_shouldNavigateFocus')) return;
        Adapt.a11y.focus('body');
      }
    }, {
      key: "navigateBack",
      value: function navigateBack() {
        this._isBackward = true;
        Backbone.history.history.back();
      }
    }, {
      key: "navigateToCurrentRoute",
      value: function navigateToCurrentRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        if (!Adapt.location._currentId) {
          return;
        }

        var currentId = Adapt.location._currentModel.get('_id');

        var isRoot = Adapt.location._currentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + currentId;
        this.navigate(route, {
          trigger: true,
          replace: true
        });
      }
    }, {
      key: "navigateToPreviousRoute",
      value: function navigateToPreviousRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var currentModel = Adapt.location._currentModel;
        var previousModel = Adapt.location._previousModel;

        if (!currentModel) {
          return this.navigateBack();
        }

        if (Adapt.location._currentModel instanceof MenuModel$1) {
          return this.navigateToParent();
        }

        if (previousModel) {
          return this.navigateBack();
        }

        this.navigateToParent();
      }
    }, {
      key: "navigateToParent",
      value: function navigateToParent(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var parentId = Adapt.location._currentModel.get('_parentId');

        var parentModel = Adapt.findById(parentId);
        var isRoot = parentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + parentId;
        this.navigate(route, {
          trigger: true
        });
      }
    }, {
      key: "navigateToHomeRoute",
      value: function navigateToHomeRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        this.navigate('#/', {
          trigger: true
        });
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(selector) {
          var _this2 = this;

          var settings,
              currentModelId,
              currentModel,
              shouldReplace,
              contentObject,
              contentObjectId,
              isNotInCurrentContentObject,
              location,
              disableScrollToAnimation,
              $wrapper,
              offsetTop,
              _args4 = arguments;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  settings = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                  currentModelId = selector.replace(/\./g, '').split(' ')[0];
                  currentModel = Adapt.findById(currentModelId);

                  if (!(currentModel && (!currentModel.get('_isRendered') || !currentModel.get('_isReady')))) {
                    _context4.next = 17;
                    break;
                  }

                  shouldReplace = settings.replace || false;
                  contentObject = currentModel instanceof ContentObjectModel ? currentModel : currentModel.findAncestor('contentobject');
                  contentObjectId = contentObject.get('_id');
                  isNotInCurrentContentObject = contentObjectId !== Adapt.location._currentId;

                  if (!isNotInCurrentContentObject) {
                    _context4.next = 15;
                    break;
                  }

                  this.isScrolling = true;
                  this.navigate("#/id/".concat(currentModelId), {
                    trigger: true,
                    replace: shouldReplace
                  });
                  this.model.set('_shouldNavigateFocus', false, {
                    pluginName: 'adapt'
                  });
                  _context4.next = 14;
                  return new Promise(function (resolve) {
                    return Adapt.once('contentObjectView:ready', _.debounce(function () {
                      _this2.model.set('_shouldNavigateFocus', true, {
                        pluginName: 'adapt'
                      });

                      resolve();
                    }, 1));
                  });

                case 14:
                  this.isScrolling = false;

                case 15:
                  _context4.next = 17;
                  return Adapt.parentView.renderTo(currentModelId);

                case 17:
                  if (currentModel && selector === currentModel.get('_id')) {
                    selector = ".".concat(selector);
                  }

                  location = Adapt.location._contentType ? Adapt.location._contentType : Adapt.location._currentLocation;
                  Adapt.trigger("".concat(location, ":scrollTo"), selector);
                  disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;

                  if (disableScrollToAnimation) {
                    settings.duration = 0;
                  } else if (!settings.duration) {
                    settings.duration = $.scrollTo.defaults.duration;
                  }

                  $wrapper = $('#wrapper');
                  offsetTop = -parseInt($wrapper.css('padding-top'));

                  if ($(selector).hasClass('component')) {
                    offsetTop -= $(selector).find('.aria-label').height() || 0;
                  }

                  if (!settings.offset) settings.offset = {
                    top: offsetTop,
                    left: 0
                  };
                  if (settings.offset.top === undefined) settings.offset.top = offsetTop;
                  if (settings.offset.left === undefined) settings.offset.left = 0;
                  if (settings.offset.left === 0) settings.axis = 'y';

                  if (Adapt.get('_canScroll') !== false) {
                    $.scrollTo(selector, settings);
                  }

                  _context4.next = 32;
                  return new Promise(function (resolve) {
                    _.delay(function () {
                      Adapt.a11y.focusNext(selector);
                      Adapt.trigger("".concat(location, ":scrolledTo"), selector);
                      resolve();
                    }, settings.duration + 300);
                  });

                case 32:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function navigateToElement(_x9) {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "get",
      value: function get() {
        var _this$model;

        Adapt.log.deprecated('Adapt.router.get, please use Adapt.router.model.get');
        return (_this$model = this.model).get.apply(_this$model, arguments);
      }
    }, {
      key: "set",
      value: function set() {
        var _this$model2;

        Adapt.log.deprecated('Adapt.router.set, please use Adapt.router.model.set');
        return (_this$model2 = this.model).set.apply(_this$model2, arguments);
      }
    }]);

    return Router;
  }(Backbone.Router);

  Adapt.router = new Router({
    model: new RouterModel(null, {
      reset: true
    })
  });
  Adapt.navigateToElement = Adapt.router.navigateToElement.bind(Adapt.router);
  var router = __AMD("core/js/router", Adapt.router);

  var AdaptSubsetCollection = __AMD("core/js/collections/adaptSubsetCollection", function (_AdaptCollection) {
    _inherits(AdaptSubsetCollection, _AdaptCollection);

    var _super = _createSuper(AdaptSubsetCollection);

    function AdaptSubsetCollection() {
      _classCallCheck(this, AdaptSubsetCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSubsetCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        _get(_getPrototypeOf(AdaptSubsetCollection.prototype), "initialize", this).call(this, models, options);

        this.parent = options.parent;
        this.listenTo(this.parent, 'reset', this.loadSubset);
      }
    }, {
      key: "loadSubset",
      value: function loadSubset() {
        var _this = this;

        this.set(this.parent.filter(function (model) {
          return model instanceof _this.model;
        }));
        this._byAdaptID = this.groupBy('_id');
      }
    }]);

    return AdaptSubsetCollection;
  }(AdaptCollection));

  var ArticleModel = function (_AdaptModel) {
    _inherits(ArticleModel, _AdaptModel);

    var _super = _createSuper(ArticleModel);

    function ArticleModel() {
      _classCallCheck(this, ArticleModel);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('articleModel._parent, use articleModel.getParent() instead, parent models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('articleModel._siblings, use articleModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('articleModel._children, use articleModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'article';
      }
    }]);

    return ArticleModel;
  }(AdaptModel);

  Adapt.register('article', {
    model: ArticleModel
  });
  var ArticleModel$1 = __AMD("core/js/models/articleModel", ArticleModel);

  var BlockModel = function (_AdaptModel) {
    _inherits(BlockModel, _AdaptModel);

    var _super = _createSuper(BlockModel);

    function BlockModel() {
      _classCallCheck(this, BlockModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlockModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('blockModel._parent, use blockModel.getParent() instead, parent models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('blockModel._siblings, use blockModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_children",
      get: function () {
        Adapt.log.deprecated('blockModel._children, use blockModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'block';
      }
    }]);

    return BlockModel;
  }(AdaptModel);

  Adapt.register('block', {
    model: BlockModel
  });
  var BlockModel$1 = __AMD("core/js/models/blockModel", BlockModel);

  var ComponentModel = function (_AdaptModel) {
    _inherits(ComponentModel, _AdaptModel);

    var _super = _createSuper(ComponentModel);

    function ComponentModel() {
      _classCallCheck(this, ComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentModel, [{
      key: "_parent",
      get: function () {
        Adapt.log.deprecated('componentModel._parent, use componentModel.getParent() instead, parent models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_siblings",
      get: function () {
        Adapt.log.deprecated('componentModel._siblings, use componentModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'component';
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return AdaptModel.resultExtend('defaults', {
          _isA11yComponentDescriptionEnabled: true,
          _userAnswer: null,
          _attemptStates: null
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return AdaptModel.resultExtend('trackable', ['_userAnswer', '_attemptStates']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return AdaptModel.resultExtend('trackableType', [Array, Array]);
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return false;
      }
    }, {
      key: "init",
      value: function init() {
        if (Adapt.get('_isStarted')) {
          this.onAdaptInitialize();
          return;
        }

        this.listenToOnce(Adapt, 'adapt:initialize', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        this.restoreUserAnswers();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {}
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {}
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', null);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(ComponentModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.resetUserAnswer();
        return true;
      }
    }, {
      key: "getAttemptState",
      value: function getAttemptState() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toJSON();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var values = trackables.map(function (n) {
          return object[n];
        });
        var booleans = values.filter(function (v, i) {
          return types[i] === Boolean;
        }).map(Boolean);
        var numbers = values.filter(function (v, i) {
          return types[i] === Number;
        }).map(function (v) {
          return Number(v) || 0;
        });
        var arrays = values.filter(function (v, i) {
          return types[i] === Array;
        });
        return [numbers, booleans, arrays];
      }
    }, {
      key: "getAttemptObject",
      value: function getAttemptObject() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptState();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var numbers = (state[0] || []).slice(0);
        var booleans = (state[1] || []).slice(0);
        var arrays = (state[2] || []).slice(0);
        var object = {};
        trackables.forEach(function (n, i) {
          if (n === '_id') return;

          switch (types[i]) {
            case Number:
              object[n] = numbers.shift();
              break;

            case Boolean:
              object[n] = booleans.shift();
              break;

            case Array:
              object[n] = arrays.shift();
              break;
          }
        });
        return object;
      }
    }, {
      key: "setAttemptObject",
      value: function setAttemptObject(object) {
        var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.set(object, {
          silent: silent
        });
      }
    }, {
      key: "addAttemptObject",
      value: function addAttemptObject() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptObject();
        var attemptStates = this.get('_attemptStates') || [];
        var state = this.getAttemptState(object);
        attemptStates.push(state);
        this.set('_attemptStates', attemptStates);
      }
    }, {
      key: "getAttemptObjects",
      value: function getAttemptObjects() {
        var _this = this;

        var states = this.get('_attemptStates') || [];
        return states.map(function (state) {
          return _this.getAttemptObject(state);
        });
      }
    }]);

    return ComponentModel;
  }(AdaptModel);

  Adapt.register('component', {
    model: ComponentModel
  });
  var ComponentModel$1 = __AMD("core/js/models/componentModel", ComponentModel);

  var PageModel = function (_ContentObjectModel) {
    _inherits(PageModel, _ContentObjectModel);

    var _super = _createSuper(PageModel);

    function PageModel() {
      _classCallCheck(this, PageModel);

      return _super.apply(this, arguments);
    }

    _createClass(PageModel, [{
      key: "_children",
      get: function () {
        Adapt.log.deprecated('pageModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'page';
      }
    }]);

    return PageModel;
  }(ContentObjectModel);

  Adapt.register('page', {
    model: PageModel
  });
  __AMD("core/js/models/pageModel", PageModel);

  var ContentObjectView = __AMD("core/js/views/contentObjectView", function (_AdaptView) {
    _inherits(ContentObjectView, _AdaptView);

    var _super = _createSuper(ContentObjectView);

    function ContentObjectView() {
      _classCallCheck(this, ContentObjectView);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'main',
          'aria-labelledby': "".concat(this.model.get('_id'), "-heading")
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return [this.constructor.type, 'contentobject', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].filter(Boolean).join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        $.inview.lock(this.constructor.type + 'View');
        this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;
        this.$el.css('opacity', 0);
        this.listenTo(this.model, 'change:_isReady', this.isReady);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRender contentObjectView:preRender view:preRender"), this);

        if (this.isReact) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt.trigger("".concat(type, "View:render contentObjectView:render view:render"), this);

        _.defer(function () {
          if (_this._isRemoved) return;

          _this.postRender();

          Adapt.trigger("".concat(type, "View:postRender contentObjectView:postRender view:postRender"), _this);
        });

        return this;
      }
    }, {
      key: "isReady",
      value: function () {
        var _isReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var type, performIsReady;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!this.model.get('_isReady') || this._isTriggeredReady)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  this._isTriggeredReady = true;
                  type = this.constructor.type;

                  performIsReady = function () {
                    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                      var styleOptions;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              Adapt.trigger("".concat(type, "View:preReady contentObjectView:preReady view:preReady"), _this2);
                              _context.next = 3;
                              return Adapt.wait.queue();

                            case 3:
                              $('.js-loading').hide();

                              if (Adapt.get('_shouldContentObjectScrollTop') !== false) {
                                $(window).scrollTop(0);
                              }

                              Adapt.trigger("".concat(type, "View:ready contentObjectView:ready view:ready"), _this2);
                              $.inview.unlock("".concat(type, "View"));
                              styleOptions = {
                                opacity: 1
                              };

                              if (_this2.disableAnimation) {
                                _this2.$el.css(styleOptions);

                                $.inview();

                                _.defer(function () {
                                  Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                });
                              } else {
                                _this2.$el.velocity(styleOptions, {
                                  duration: 'fast',
                                  complete: function () {
                                    $.inview();
                                    Adapt.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                  }
                                });
                              }

                              $(window).scroll();

                            case 10:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function performIsReady() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _.defer(performIsReady);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function isReady() {
          return _isReady.apply(this, arguments);
        }

        return isReady;
      }()
    }, {
      key: "renderTo",
      value: function () {
        var _renderTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(id) {
          var isRenderToSelf, models, index, model, isLocked, ids, forceUntilId;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  isRenderToSelf = id === this.model.get('_id');

                  if (!isRenderToSelf) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return");

                case 3:
                  models = this.model.getAllDescendantModels(true).filter(function (model) {
                    return model.get('_isAvailable');
                  });
                  index = models.findIndex(function (model) {
                    return model.get('_id') === id;
                  });

                  if (!(index === -1)) {
                    _context3.next = 7;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\" as it isn't a descendant."));

                case 7:
                  model = models[index];

                  if (!(model.get('_isRendered') && model.get('_isReady'))) {
                    _context3.next = 10;
                    break;
                  }

                  return _context3.abrupt("return");

                case 10:
                  models = models.slice(0, index + 1);
                  isLocked = models.some(function (model) {
                    return model.get('_isLocked');
                  });

                  if (!isLocked) {
                    _context3.next = 14;
                    break;
                  }

                  throw new Error("Cannot renderTo ".concat(id, " as it is preceded by locked content"));

                case 14:
                  ids = _.indexBy(models, function (model) {
                    return model.get('_id');
                  });

                  forceUntilId = function (event) {
                    var addingId = event.model.get('_id');
                    if (!ids[addingId]) return;
                    event.force();
                    if (addingId !== id) return;
                    Adapt.off('view:addChild', forceUntilId);
                  };

                  Adapt.on('view:addChild', forceUntilId);
                  _context3.next = 19;
                  return this.addChildren();

                case 19:
                  _context3.next = 21;
                  return this.whenReady();

                case 21:
                  if (!(!model.get('_isRendered') || !model.get('_isReady'))) {
                    _context3.next = 23;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\"."));

                case 23:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function renderTo(_x) {
          return _renderTo.apply(this, arguments);
        }

        return renderTo;
      }()
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt.trigger("".concat(type, "View:preRemove contentObjectView:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this3 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt.trigger("".concat(type, "View:remove contentObjectView:remove view:remove"), this);
        this._isRemoved = true;
        Adapt.wait["for"](function (end) {
          if (_this3.isReact) {
            ReactDOM.unmountComponentAtNode(_this3.el);
          }

          _this3.$el.off('onscreen.adaptView');

          _this3.findDescendantViews().reverse().forEach(function (view) {
            view.remove();
          });

          _this3.setChildViews(null);

          _get(_getPrototypeOf(ContentObjectView.prototype), "remove", _this3).call(_this3);

          _.defer(function () {
            Adapt.trigger("".concat(type, "View:postRemove contentObjectView:postRemove view:postRemove"), _this3);

            _this3.trigger('postRemove');
          });

          end();
        });
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.remove();

        if (Adapt.parentView === this) {
          Adapt.parentView = null;
        }
      }
    }]);

    return ContentObjectView;
  }(AdaptView$1));

  var PageView = function (_ContentObjectView) {
    _inherits(PageView, _ContentObjectView);

    var _super = _createSuper(PageView);

    function PageView() {
      _classCallCheck(this, PageView);

      return _super.apply(this, arguments);
    }

    _createClass(PageView, [{
      key: "remove",
      value: function remove() {
        if (this.$pageLabel) {
          this.$pageLabel.remove();
        }

        _get(_getPrototypeOf(PageView.prototype), "remove", this).call(this);
      }
    }]);

    return PageView;
  }(ContentObjectView);

  Object.assign(PageView, {
    childContainer: '.article__container',
    type: 'page',
    template: 'page'
  });
  Adapt.register('page', {
    view: PageView
  });
  __AMD("core/js/views/pageView", PageView);

  var ArticleView = function (_AdaptView) {
    _inherits(ArticleView, _AdaptView);

    var _super = _createSuper(ArticleView);

    function ArticleView() {
      _classCallCheck(this, ArticleView);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleView, [{
      key: "className",
      value: function className() {
        return ['article', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return ArticleView;
  }(AdaptView$1);

  Object.assign(ArticleView, {
    childContainer: '.block__container',
    type: 'article',
    template: 'article'
  });
  Adapt.register('article', {
    view: ArticleView
  });
  var ArticleView$1 = __AMD("core/js/views/articleView", ArticleView);

  var BlockView = function (_AdaptView) {
    _inherits(BlockView, _AdaptView);

    var _super = _createSuper(BlockView);

    function BlockView() {
      _classCallCheck(this, BlockView);

      return _super.apply(this, arguments);
    }

    _createClass(BlockView, [{
      key: "className",
      value: function className() {
        return ['block', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return BlockView;
  }(AdaptView$1);

  Object.assign(BlockView, {
    childContainer: '.component__container',
    type: 'block',
    template: 'block'
  });
  Adapt.register('block', {
    view: BlockView
  });
  __AMD("core/js/views/blockView", BlockView);

  var MPABC = function (_Backbone$Controller) {
    _inherits(MPABC, _Backbone$Controller);

    var _super = _createSuper(MPABC);

    function MPABC() {
      _classCallCheck(this, MPABC);

      return _super.apply(this, arguments);
    }

    _createClass(MPABC, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(data, {
          loading: this.waitForDataLoaded,
          loaded: this.onDataLoaded
        });
        this.setupSubsetCollections();
      }
    }, {
      key: "waitForDataLoaded",
      value: function waitForDataLoaded() {
        Adapt.wait.begin();
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        Adapt.wait.end();
      }
    }, {
      key: "setupSubsetCollections",
      value: function setupSubsetCollections() {
        Adapt.contentObjects = new AdaptSubsetCollection(null, {
          parent: data,
          model: ContentObjectModel
        });
        Adapt.articles = new AdaptSubsetCollection(null, {
          parent: data,
          model: ArticleModel$1
        });
        Adapt.blocks = new AdaptSubsetCollection(null, {
          parent: data,
          model: BlockModel$1
        });
        Adapt.components = new AdaptSubsetCollection(null, {
          parent: data,
          model: ComponentModel$1
        });
      }
    }]);

    return MPABC;
  }(Backbone.Controller);

  __AMD("core/js/mpabc", Adapt.mpabc = new MPABC());

  var helpers$1 = {
    lowercase: function (text) {
      return text.toLowerCase();
    },
    capitalise: function (text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    },
    inc: function (index) {
      return index + 1;
    },
    dec: function (index) {
      return index - 1;
    },
    odd: function (index) {
      return (index + 1) % 2 === 0 ? 'even' : 'odd';
    },
    equals: function (value, text, block) {
      return helpers$1.compare.call(this, value, '==', text, block);
    },
    compare: function (value, operator, text, block) {
      switch (operator) {
        case '===':
          if (value === text) return block.fn(this);
          break;

        case '=':
        case '==':
          if (value == text) return block.fn(this);
          break;

        case '>=':
          if (value >= text) return block.fn(this);
          break;

        case '<=':
          if (value <= text) return block.fn(this);
          break;

        case '>':
          if (value > text) return block.fn(this);
          break;

        case '<':
          if (value < text) return block.fn(this);
          break;
      }

      return block.inverse(this);
    },
    math: function (lvalue, operator, rvalue, options) {
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);

      switch (operator) {
        case '+':
          return lvalue + rvalue;

        case '-':
          return lvalue - rvalue;

        case '*':
          return lvalue * rvalue;

        case '/':
          return lvalue / rvalue;

        case '%':
          return lvalue % rvalue;
      }
    },
    any: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    all: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.every(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    none: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return !specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    compile: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      var data = this;

      if (context) {
        var _context$data$root, _context$data;

        data = (_context$data$root = (_context$data = context.data) === null || _context$data === void 0 ? void 0 : _context$data.root) !== null && _context$data$root !== void 0 ? _context$data$root : context;
      }

      return Handlebars.compile(template)(data);
    },
    compile_a11y_text: function (template, context) {
      a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return helpers$1.compile.call(this, template, context);
    },
    compile_a11y_normalize: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      return Handlebars.helpers.a11y_normalize.call(this, helpers$1.compile.call(this, template, context));
    },
    compile_a11y_remove_breaks: function (template, context) {
      if (!template) {
        return '';
      }

      return Handlebars.helpers.a11y_remove_breaks.call(this, helpers$1.compile.call(this, template, context));
    },
    import_globals: function (context) {
      if (context.data.root._globals) {
        return '';
      }

      context.data.root._globals = Adapt.course.get('_globals');
      return '';
    },
    import_adapt: function (context) {
      if (context.data.root.Adapt) {
        return;
      }

      var adapt = context.data.root.Adapt = {};
      var i, l, name;
      var directImport = ['config', 'course'];

      for (i = 0, l = directImport.length; i < l; i++) {
        name = directImport[i];
        adapt[name] = Adapt[name].toJSON();
      }

      var indexedImport = ['contentObjects', 'articles', 'blocks', 'components'];

      for (i = 0, l = indexedImport.length; i < l; i++) {
        name = indexedImport[i];
        var importArray = Adapt[name].toJSON();
        var importIndex = {};

        for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
          var item = importArray[i1];
          importIndex[item._id] = item;
        }

        adapt[name] = importIndex;
      }

      return '';
    },
    component_description: function (override, context) {
      var _this$_globals$_compo;

      if (!this._isA11yComponentDescriptionEnabled) {
        return;
      }

      var isNotDefined = !((_this$_globals$_compo = this._globals._components) !== null && _this$_globals$_compo !== void 0 && _this$_globals$_compo['_' + this._component]);

      if (isNotDefined) {
        return;
      }

      var hasOverride = arguments.length > 1;
      var description;

      if (hasOverride) {
        description = override;
        description = helpers$1.compile(description, context);
      } else {
        description = this._globals._components['_' + this._component].ariaRegion;
        description = helpers$1.compile(description, override);
      }

      if (!description) {
        return;
      }

      return new Handlebars.SafeString('<div class="aria-label">' + description + '</div>');
    },
    a11y_text: function (text) {
      a11y.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_normalize: function (htmls) {
      return a11y.normalize.apply(a11y, arguments);
    },
    a11y_remove_breaks: function (htmls) {
      return a11y.removeBreaks.apply(a11y, arguments);
    },
    a11y_aria_label: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label">' + values.join(' ') + '</div>');
    },
    a11y_aria_label_relative: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label relative">' + values.join(' ') + '</div>');
    },
    a11y_aria_image: function (texts) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="' + values.join(' ') + '"></div>');
    },
    a11y_wrap_focus: function () {
      var cfg = Adapt.config.get('_accessibility');
      if (cfg._isPopupWrapFocusEnabled === false) return '';
      return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
    },
    a11y_attrs_heading: function (levelOrType) {
      var level = a11y.ariaLevel(levelOrType, this._ariaLevel);
      return new Handlebars.SafeString(' role="heading" aria-level="' + level + '" ');
    },
    a11y_attrs_tabbable: function () {
      a11y.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
      return new Handlebars.SafeString(' role="region" tabindex="0" ');
    },
    a11y_alt_text: function (visible, alternatives) {
      var values = Array.prototype.slice.call(arguments, 1, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<span aria-hidden="true">' + visible + '</span><span class="aria-label">' + values.join(' ') + '</span>');
    }
  };
  Object.assign(helpers$1, {
    if_value_equals: function () {
      a11y.log.deprecated('if_value_equals, use equals instead.');
      return helpers$1.equals.apply(this, arguments);
    },
    numbers: function () {
      a11y.log.deprecated('numbers, use inc instead.');
      return helpers$1.inc.apply(this, arguments);
    },
    lowerCase: function () {
      a11y.log.deprecated('lowerCase, use lowercase instead.');
      return helpers$1.lowercase.apply(this, arguments);
    }
  });

  for (var name$1 in helpers$1) {
    Handlebars.registerHelper(name$1, helpers$1[name$1]);
  }

  __AMD("core/js/helpers", helpers$1);

  var Scrolling = function (_Backbone$Controller) {
    _inherits(Scrolling, _Backbone$Controller);

    var _super = _createSuper(Scrolling);

    function Scrolling() {
      _classCallCheck(this, Scrolling);

      return _super.apply(this, arguments);
    }

    _createClass(Scrolling, [{
      key: "initialize",
      value: function initialize() {
        this.$html = $('html');
        this.isLegacyScrolling = true;
        Adapt.once('configModel:dataLoaded', this._loadConfig.bind(this));
      }
    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        var config = Adapt.config.get('_scrollingContainer');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        var limitTo = config._limitToSelector;
        var isIncluded = !limitTo || this.$html.is(limitTo) || this.$html.hasClass(limitTo);
        if (!isIncluded) return;
        this.isLegacyScrolling = false;

        this._windowScrollFix();

        this._addStyling();

        this._updateScrollbarWidth();

        this.listenTo(Adapt, 'device:resize', this._updateScrollbarWidth);
      }
    }, {
      key: "_addStyling",
      value: function _addStyling() {
        this.$html.addClass('adapt-scrolling');
      }
    }, {
      key: "_updateScrollbarWidth",
      value: function _updateScrollbarWidth() {
        var $tester = $('<div class="outer" style="overflow:scroll; visibility: hidden; position:fixed; top: 0; left: 0;"><div class="inner"> </div></div>"');
        $('body').append($tester);
        var scrollBarWidth = $tester.outerWidth() - $tester.find('.inner').outerWidth();
        $tester.remove();
        var documentStyle = document.documentElement.style;
        documentStyle.setProperty('--adapt-scrollbar-width', "".concat(scrollBarWidth, "px"));
      }
    }, {
      key: "_windowScrollFix",
      value: function _windowScrollFix() {
        var body = document.body;
        var html = Adapt.scrolling.$html[0];
        var scrollY = {
          get: function () {
            return body.scrollTop;
          },
          set: function (value) {
            return body.scrollTop = value;
          }
        };
        var scrollX = {
          get: function () {
            return body.scrollLeft;
          },
          set: function (value) {
            return body.scrollLeft = value;
          }
        };
        var scrollHeight = {
          get: function () {
            return body.scrollHeight;
          },
          set: function (value) {
            return body.scrollHeight = value;
          }
        };
        var scrollWidth = {
          get: function () {
            return body.scrollWidth;
          },
          set: function (value) {
            return body.scrollWidth = value;
          }
        };
        Object.defineProperties(window, {
          scrollY: scrollY,
          scrollX: scrollX,
          pageYOffset: scrollY,
          pageXOffset: scrollX
        });
        Object.defineProperties(html, {
          scrollHeight: scrollHeight,
          scrollWidth: scrollWidth
        });

        window.scrollTo = function () {
          var _ref, _ref2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var isObject = args.length === 1 && _typeof(args[0]) === 'object' && args[0] !== null;
          var left = (_ref = isObject ? args[0].left : args[0]) !== null && _ref !== void 0 ? _ref : null;
          var top = (_ref2 = isObject ? args[0].top : args[1]) !== null && _ref2 !== void 0 ? _ref2 : null;
          left !== null && (body.scrollLeft = left);
          top !== null && (body.scrollTop = top);
        };

        var MouseEvent = window.MouseEvent;
        Object.defineProperties(MouseEvent.prototype, {
          pageX: {
            get: function () {
              return this.clientX + scrollX.get();
            }
          },
          pageY: {
            get: function () {
              return this.clientY + scrollY.get();
            }
          }
        });
        var $window = $(window);
        $(document.body).on('scroll', function () {
          return $window.scroll();
        });
      }
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee(selector) {
          var settings,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  settings = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  Adapt.log.deprecated('Adapt.scrollTo and Adapt.scrolling.scrollTo, use Adapt.navigateToElement instead.');
                  return _context.abrupt("return", Adapt.router.navigateToElement(selector, settings));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function scrollTo(_x) {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }]);

    return Scrolling;
  }(Backbone.Controller);

  Adapt.scrolling = new Scrolling();
  Adapt.scrollTo = Adapt.scrolling.scrollTo.bind(Adapt.scrolling);
  __AMD("core/js/scrolling", Adapt.scrolling);

  var HeadingView = function (_Backbone$View) {
    _inherits(HeadingView, _Backbone$View);

    var _super = _createSuper(HeadingView);

    function HeadingView() {
      _classCallCheck(this, HeadingView);

      return _super.apply(this, arguments);
    }

    _createClass(HeadingView, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, 'change:_isComplete', this.updateAria);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var customHeadingType = this.$el.attr('data-a11y-heading-type');
        if (customHeadingType) data._type = customHeadingType;
        this.$el.html(template(data));
        this.checkCompletion();
      }
    }, {
      key: "updateAria",
      value: function updateAria() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var $rendered = $("<div>".concat(template(data), "</div>"));
        this.$('.aria-label').html($rendered.find('.aria-label').html());
        this.checkCompletion();
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var isComplete = this.model.get('_isComplete');
        this.$el.toggleClass('is-complete', isComplete).toggleClass('is-incomplete', !isComplete);
      }
    }]);

    return HeadingView;
  }(Backbone.View);

  HeadingView.template = 'heading';
  var HeadingView$1 = __AMD("core/js/views/headingView", HeadingView);

  var Headings = function (_Backbone$Controller) {
    _inherits(Headings, _Backbone$Controller);

    var _super = _createSuper(Headings);

    function Headings() {
      _classCallCheck(this, Headings);

      return _super.apply(this, arguments);
    }

    _createClass(Headings, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'view:render', this.onViewRender);
      }
    }, {
      key: "onViewRender",
      value: function onViewRender(view) {
        var $headingSeats = view.$('.js-heading');
        $headingSeats.each(function (index, el) {
          return new HeadingView$1({
            el: el,
            model: view.model
          });
        });
      }
    }]);

    return Headings;
  }(Backbone.Controller);

  __AMD("core/js/headings", new Headings());

  var NavigationView$1 = function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click [data-event]': 'triggerEvent'
        };
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          'role': 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenToOnce(Adapt, {
          'courseModel:dataLoading': this.remove
        });
        this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template({
          _globals: Adapt.course.get('_globals'),
          _accessibility: Adapt.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          Adapt.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        event.preventDefault();
        var currentEvent = $(event.currentTarget).attr('data-event');
        Adapt.trigger('navigation:' + currentEvent);

        switch (currentEvent) {
          case 'backButton':
            Adapt.router.navigateToPreviousRoute();
            break;

          case 'homeButton':
            Adapt.router.navigateToHomeRoute();
            break;

          case 'parentButton':
            Adapt.router.navigateToParent();
            break;

          case 'skipNavigation':
            this.skipNavigation();
            break;

          case 'returnToStart':
            Adapt.startController.returnToStartLocation();
            break;
        }
      }
    }, {
      key: "skipNavigation",
      value: function skipNavigation() {
        Adapt.a11y.focusFirst('.' + Adapt.location._contentType);
      }
    }, {
      key: "hideNavigationButton",
      value: function hideNavigationButton(model) {
        var shouldHide = model.get('_type') === 'course';
        this.$('.nav__back-btn, .nav__home-btn').toggleClass('u-display-none', shouldHide);
      }
    }, {
      key: "showNavigationButton",
      value: function showNavigationButton() {
        this.$('.nav__back-btn, .nav__home-btn').removeClass('u-display-none');
      }
    }]);

    return NavigationView;
  }(Backbone.View);

  NavigationView$1.template = 'nav';
  var NavigationView$2 = __AMD("core/js/views/navigationView", NavigationView$1);

  var NavigationController = function (_Backbone$Controller) {
    _inherits(NavigationController, _Backbone$Controller);

    var _super = _createSuper(NavigationController);

    function NavigationController() {
      _classCallCheck(this, NavigationController);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationController, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'adapt:preInitialize', this.addNavigationBar);
      }
    }, {
      key: "addNavigationBar",
      value: function addNavigationBar() {
        var adaptConfig = Adapt.course.get('_navigation');

        if (adaptConfig !== null && adaptConfig !== void 0 && adaptConfig._isDefaultNavigationDisabled) {
          Adapt.trigger('navigation:initialize');
          return;
        }

        Adapt.navigation = new NavigationView$2();
      }
    }]);

    return NavigationController;
  }(Backbone.Controller);

  __AMD("core/js/navigation", new NavigationController());

  var ComponentView = function (_AdaptView) {
    _inherits(ComponentView, _AdaptView);

    var _super = _createSuper(ComponentView);

    function ComponentView() {
      _classCallCheck(this, ComponentView);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentView, [{
      key: "attributes",
      value: function attributes() {
        if (!this.model.get('_isA11yRegionEnabled')) {
          return AdaptView$1.resultExtend('attributes', {}, this);
        }

        return AdaptView$1.resultExtend('attributes', {
          'aria-labelledby': this.model.get('_id') + '-heading',
          'role': 'region'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['component', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "renderState",
      value: function renderState() {
        Adapt.log.removed('renderState is removed and moved to item title');
      }
    }, {
      key: "setupInviewCompletion",
      value: function setupInviewCompletion() {
        var inviewElementSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.component__inner';
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.setCompletionStatus;
        this.$inviewElement = this.$(inviewElementSelector);
        this.inviewCallback = callback;
        this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
      }
    }, {
      key: "removeInviewListener",
      value: function removeInviewListener() {
        if (!this.$inviewElement) return;
        this.$inviewElement.off('inview.componentView');
        this.$inviewElement = null;
      }
    }, {
      key: "onInview",
      value: function onInview(event, visible, visiblePartX, visiblePartY) {
        if (!visible) return;

        switch (visiblePartY) {
          case 'top':
            this.hasSeenTop = true;
            break;

          case 'bottom':
            this.hasSeenBottom = true;
            break;

          case 'both':
            this.hasSeenTop = this.hasSeenBottom = true;
        }

        if (!this.hasSeenTop || !this.hasSeenBottom) return;
        this.inviewCallback();

        if (this.model.get('_isComplete')) {
          this.removeInviewListener();
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {}
    }, {
      key: "remove",
      value: function remove() {
        this.removeInviewListener();

        _get(_getPrototypeOf(ComponentView.prototype), "remove", this).call(this);
      }
    }]);

    return ComponentView;
  }(AdaptView$1);

  ComponentView.type = 'component';
  var ComponentView$1 = __AMD("core/js/views/componentView", ComponentView);

  var BUTTON_STATE = ENUM(['SUBMIT', 'CORRECT', 'INCORRECT', 'SHOW_CORRECT_ANSWER', 'HIDE_CORRECT_ANSWER', 'SHOW_FEEDBACK', 'RESET']);
  var BUTTON_STATE$1 = __AMD("core/js/enums/buttonStateEnum", BUTTON_STATE);

  var textPropertyName = {
    SUBMIT: 'submit',
    CORRECT: 'correct',
    INCORRECT: 'incorrect',
    SHOW_CORRECT_ANSWER: 'showCorrectAnswer',
    HIDE_CORRECT_ANSWER: 'hideCorrectAnswer',
    SHOW_FEEDBACK: 'showFeedback',
    RESET: 'reset'
  };
  var ButtonsView = __AMD("core/js/views/buttonsView", function (_Backbone$View) {
    _inherits(ButtonsView, _Backbone$View);

    var _super = _createSuper(ButtonsView);

    function ButtonsView() {
      _classCallCheck(this, ButtonsView);

      return _super.apply(this, arguments);
    }

    _createClass(ButtonsView, [{
      key: "initialize",
      value: function initialize(options) {
        this.parent = options.parent;
        this.listenTo(Adapt.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, {
          'change:_buttonState': this.onButtonStateChanged,
          'change:feedbackMessage': this.onFeedbackMessageChanged,
          'change:_attemptsLeft': this.onAttemptsChanged,
          'change:_canSubmit': this.onCanSubmitChange
        });
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-action': 'onActionClicked',
          'click .js-btn-feedback': 'onFeedbackClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var data = this.model.toJSON();
        var template = Handlebars.templates.buttons;

        _.defer(function () {
          _this.postRender();

          Adapt.trigger('buttonsView:postRender', _this);
        });

        this.$el.html(template(data));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.refresh();
      }
    }, {
      key: "checkResetSubmittedState",
      value: function checkResetSubmittedState() {
        var isSubmitted = this.model.get('_isSubmitted');

        if (isSubmitted) {
          this.$el.addClass('is-submitted');
          return;
        }

        this.$('.js-btn-marking').removeClass('is-incorrect is-correct').addClass('u-display-none');
        this.$el.removeClass('is-submitted');
        this.model.set('feedbackMessage', undefined);
        Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onActionClicked",
      value: function onActionClicked() {
        var buttonState = BUTTON_STATE$1(this.model.get('_buttonState'));
        this.trigger('buttons:stateUpdate', buttonState);
        this.checkResetSubmittedState();

        if (buttonState === BUTTON_STATE$1.SHOW_CORRECT_ANSWER) {
          var _this$model$getCorrec, _this$model;

          var correctAnswer = (_this$model$getCorrec = (_this$model = this.model).getCorrectAnswerAsText) === null || _this$model$getCorrec === void 0 ? void 0 : _this$model$getCorrec.call(_this$model);
          this.updateAnswerLiveRegion(correctAnswer);
        }

        if (buttonState === BUTTON_STATE$1.HIDE_CORRECT_ANSWER) {
          var _this$model$getUserAn, _this$model2;

          var userAnswer = (_this$model$getUserAn = (_this$model2 = this.model).getUserAnswerAsText) === null || _this$model$getUserAn === void 0 ? void 0 : _this$model$getUserAn.call(_this$model2);
          this.updateAnswerLiveRegion(userAnswer);
        }
      }
    }, {
      key: "onFeedbackClicked",
      value: function onFeedbackClicked() {
        this.trigger('buttons:stateUpdate', BUTTON_STATE$1.SHOW_FEEDBACK);
      }
    }, {
      key: "onFeedbackMessageChanged",
      value: function onFeedbackMessageChanged(model, changedAttribute) {
        if (changedAttribute && this.model.get('_canShowFeedback')) {
          Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), true);
          return;
        }

        Adapt.a11y.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onCanSubmitChange",
      value: function onCanSubmitChange() {
        this.onButtonStateChanged(this.model, this.model.get('_buttonState'));
      }
    }, {
      key: "onButtonStateChanged",
      value: function onButtonStateChanged(model, changedAttribute) {
        this.updateAttemptsCount();
        var $buttonsAction = this.$('.js-btn-action');
        var buttonState = BUTTON_STATE$1(changedAttribute);

        if (changedAttribute === BUTTON_STATE$1.CORRECT || changedAttribute === BUTTON_STATE$1.INCORRECT) {
          Adapt.a11y.toggleEnabled($buttonsAction, false);
          return;
        }

        var propertyName = textPropertyName[buttonState.asString];
        var ariaLabel = this.model.get('_buttons')['_' + propertyName].ariaLabel;
        var buttonText = this.model.get('_buttons')['_' + propertyName].buttonText;
        Adapt.a11y.toggleEnabled($buttonsAction, this.model.get('_canSubmit'));
        $buttonsAction.html(buttonText).attr('aria-label', ariaLabel);
      }
    }, {
      key: "checkFeedbackState",
      value: function checkFeedbackState() {
        var canShowFeedback = this.model.get('_canShowFeedback');
        this.$('.js-btn-action').toggleClass('is-full-width', !canShowFeedback);
        this.$('.js-btn-feedback').toggleClass('u-display-none', !canShowFeedback);
        this.$('.js-btn-marking').toggleClass('is-full-width u-display-none', !canShowFeedback);
      }
    }, {
      key: "updateAttemptsCount",
      value: function updateAttemptsCount() {
        var isInteractionComplete = this.model.get('_isInteractionComplete');
        var attemptsLeft = this.model.get('_attemptsLeft') ? this.model.get('_attemptsLeft') : this.model.get('_attempts');
        var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');
        var attemptsString;
        this.checkResetSubmittedState();

        if (!isInteractionComplete && attemptsLeft >= 0) {
          attemptsString = attemptsLeft + ' ';
          attemptsString += attemptsLeft === 1 ? this.model.get('_buttons').remainingAttemptText : this.model.get('_buttons').remainingAttemptsText;
        } else {
          this.$('.js-display-attempts').addClass('u-visibility-hidden');
          this.showMarking();
        }

        if (shouldDisplayAttempts) {
          this.$('.js-insert-attempts-string').html(attemptsString);
        }
      }
    }, {
      key: "updateAnswerLiveRegion",
      value: function updateAnswerLiveRegion(answer) {
        if (!answer) return;
        this.$('.js-answer-live-region').html(answer);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.shouldShowMarking) return;
        var isCorrect = this.model.get('_isCorrect');

        var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

        this.$('.js-btn-marking').removeClass('u-display-none').addClass(isCorrect ? 'is-correct' : 'is-incorrect').attr('aria-label', isCorrect ? ariaLabels.answeredCorrectly : ariaLabels.answeredIncorrectly);
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.updateAttemptsCount();
        this.checkResetSubmittedState();
        this.checkFeedbackState();
        this.onButtonStateChanged(null, this.model.get('_buttonState'));
        this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));
      }
    }]);

    return ButtonsView;
  }(Backbone.View));

  var QuestionModel = function (_ComponentModel) {
    _inherits(QuestionModel, _ComponentModel);

    var _super = _createSuper(QuestionModel);

    function QuestionModel() {
      _classCallCheck(this, QuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          _isQuestionType: true,
          _shouldDisplayAttempts: false,
          _shouldShowMarking: false,
          _canShowModelAnswer: true,
          _canShowFeedback: true,
          _canShowMarking: true,
          _canSubmit: true,
          _isSubmitted: false,
          _isCorrectAnswerShown: false,
          _questionWeight: Adapt.config.get('_questionWeight'),
          _hasItemScoring: false,
          _items: []
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ComponentModel$1.resultExtend('trackable', ['_isSubmitted', '_score', '_isCorrect', '_attemptsLeft']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return ComponentModel$1.resultExtend('trackableType', [Boolean, Number, Boolean, Number]);
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'question';
      }
    }, {
      key: "init",
      value: function init() {
        this.setupDefaultSettings();
        this.setLocking('_canSubmit', true);
        this.updateRawScore();

        _get(_getPrototypeOf(QuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        this.setupWeightSettings();
        this.setupButtonSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        var globalButtons = Adapt.course.get('_buttons');

        if (!this.has('_buttons')) {
          this.set('_buttons', globalButtons);
        } else {
          var componentButtons = this.get('_buttons');

          for (var key in componentButtons) {
            if (_typeof(componentButtons[key]) === 'object') {
              if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
                componentButtons[key].buttonText = globalButtons[key].buttonText;
              }

              if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
                componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
              }
            }

            if (!componentButtons[key] && globalButtons[key]) {
              componentButtons[key] = globalButtons[key];
            }
          }
        }
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {}
    }, {
      key: "canSubmit",
      value: function canSubmit() {}
    }, {
      key: "checkCanSubmit",
      value: function checkCanSubmit() {
        this.set('_canSubmit', this.canSubmit(), {
          pluginName: 'adapt'
        });
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        var attemptsLeft = this.get('_attemptsLeft') || this.get('_attempts');
        this.set('_attemptsLeft', attemptsLeft - 1);
      }
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.set({
          _isEnabled: false,
          _isSubmitted: true
        });
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this.isCorrect()) {
          this.set('_isCorrect', true);
        } else {
          this.set('_isCorrect', false);
        }

        this.updateRawScore();
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {}
    }, {
      key: "setScore",
      value: function setScore() {}
    }, {
      key: "updateRawScore",
      value: function updateRawScore() {
        this.set({
          _rawScore: this.score,
          _maxScore: this.maxScore,
          _minScore: this.minScore
        });
      }
    }, {
      key: "score",
      get: function () {
        return this.get('_isCorrect') ? this.maxScore : 0;
      }
    }, {
      key: "maxScore",
      get: function () {
        return this.get('_questionWeight');
      }
    }, {
      key: "minScore",
      get: function () {
        return 0;
      }
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.get('_isCorrect') || this.get('_attemptsLeft') === 0;

        if (isComplete) {
          this.setCompletionStatus();
        }

        return isComplete;
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        var isInteractionComplete = this.get('_isInteractionComplete');
        var isCorrect = this.get('_isCorrect');
        var isEnabled = this.get('_isEnabled');
        var buttonState = this.get('_buttonState');
        var canShowModelAnswer = this.get('_canShowModelAnswer');

        if (isInteractionComplete) {
          if (isCorrect || !canShowModelAnswer) {
            this.set('_buttonState', BUTTON_STATE$1.CORRECT);
          } else {
            switch (buttonState) {
              case BUTTON_STATE$1.SUBMIT:
              case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
                this.set('_buttonState', BUTTON_STATE$1.SHOW_CORRECT_ANSWER);
                break;

              default:
                this.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);
            }
          }
        } else {
          if (isEnabled) {
            this.set('_buttonState', BUTTON_STATE$1.SUBMIT);
          } else {
            this.set('_buttonState', BUTTON_STATE$1.RESET);
          }
        }
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
        } else if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {}
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: Handlebars.compile(this.get('_feedback').correct)(this.toJSON())
        });
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        var feedback = this.get('_feedback')._partlyCorrect;

        if (feedback !== null && feedback !== void 0 && feedback["final"]) {
          this.setAttemptSpecificFeedback(feedback);
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
      }
    }, {
      key: "setAttemptSpecificFeedback",
      value: function setAttemptSpecificFeedback(feedback) {
        var body = this.get('_attemptsLeft') && feedback.notFinal || feedback["final"];
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: Handlebars.compile(body)(this.toJSON())
        });
      }
    }, {
      key: "getFeedbackTitle",
      value: function getFeedbackTitle() {
        var title = this.get('_feedback').title || this.get('displayTitle') || this.get('title') || '';
        return Handlebars.compile(title)(this.toJSON());
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        return !this.get('_isComplete') || this.get('_isEnabled') && !this.get('_isSubmitted');
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        _get(_getPrototypeOf(QuestionModel.prototype), "checkIfResetOnRevisit", this).call(this);

        this.set('_buttonState', this.get('_isInteractionComplete') ? BUTTON_STATE$1.HIDE_CORRECT_ANSWER : BUTTON_STATE$1.SUBMIT);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(QuestionModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        var attempts = this.get('_attempts');
        this.set({
          _attemptsLeft: attempts,
          _isCorrect: undefined,
          _isSubmitted: false,
          _buttonState: BUTTON_STATE$1.SUBMIT,
          _shouldShowMarking: this.shouldShowMarking
        });
        return true;
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.set({
          _isEnabled: true,
          _isSubmitted: false
        });
        this.resetQuestion();
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.trigger('question:refresh');
      }
    }, {
      key: "getButtonState",
      value: function getButtonState() {
        if (this.get('_isCorrect')) {
          return BUTTON_STATE$1.CORRECT;
        }

        if (this.get('_attemptsLeft') === 0) {
          return this.get('_canShowModelAnswer') ? BUTTON_STATE$1.SHOW_CORRECT_ANSWER : BUTTON_STATE$1.INCORRECT;
        }

        return this.get('_isSubmitted') ? BUTTON_STATE$1.RESET : BUTTON_STATE$1.SUBMIT;
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        return {};
      }
    }, {
      key: "getResponse",
      value: function getResponse() {}
    }, {
      key: "getResponseType",
      value: function getResponseType() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        this.addAttemptObject();
        this.set('_shouldShowMarking', this.shouldShowMarking);
      }
    }, {
      key: "shouldShowMarking",
      get: function () {
        return !this.isInteractive() && this.get('_canShowMarking') && this.get('_isInteractionComplete');
      }
    }]);

    return QuestionModel;
  }(ComponentModel$1);

  Adapt.register('question', {
    model: QuestionModel
  });
  var QuestionModel$1 = __AMD("core/js/models/questionModel", QuestionModel);

  var QuestionView = function (_ComponentView) {
    _inherits(QuestionView, _ComponentView);

    var _super = _createSuper(QuestionView);

    function QuestionView() {
      _classCallCheck(this, QuestionView);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionView, [{
      key: "className",
      value: function className() {
        return ['component', 'is-question', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : '', this.model.get('_canShowModelAnswer') ? 'can-show-model-answer' : '', this.model.get('_canShowFeedback') ? 'can-show-feedback' : '', this.model.get('_canShowMarking') ? 'can-show-marking' : ''].join(' ');
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.isInteractive = this.isInteractive.bind(this);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(QuestionView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        logging.deprecated('questionView.isInteractive please use this.model.isInteractive, this.model.get(\'_shouldShowMarking\') or this.model.shouldShowMarking');
        return this.model.isInteractive();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        var _this = this;

        this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);
        this.listenTo(this.model, 'question:refresh', this.refresh);

        if (this.checkIfResetOnRevisit !== QuestionView.prototype.checkIfResetOnRevisit) {
          logging.deprecated('QuestionView.checkIfResetOnRevisit, please use QuestionModel.checkIfResetOnRevisit');
        }

        this.checkIfResetOnRevisit();

        _.defer(function () {
          return _this.ensureLegacyLifecycleState();
        });

        this._runModelCompatibleFunction('setupDefaultSettings');

        this.setupQuestion();
      }
    }, {
      key: "onEnabledChanged",
      value: function onEnabledChanged(model, changedAttribute) {
        if (!changedAttribute) {
          this.$('.component__widget').addClass('is-disabled');
          this.disableQuestion();
        } else {
          this.$('.component__widget').removeClass('is-disabled');
          this.enableQuestion();
        }
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {}
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {}
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var _this2 = this;

        var canReset = this.model.get('_canReset') !== false;
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');
        if (!canReset || !isResetOnRevisit) return;
        if (this.resetQuestionOnRevisit === QuestionView.prototype.resetQuestionOnRevisit) return;
        logging.deprecated('QuestionView.resetQuestionOnRevisit, please QuestionModel.reset');

        _.defer(function () {
          _this2.resetQuestionOnRevisit(isResetOnRevisit);
        });
      }
    }, {
      key: "ensureLegacyLifecycleState",
      value: function ensureLegacyLifecycleState() {
        var isInteractionComplete = this.model.get('_isInteractionComplete');

        if (isInteractionComplete) {
          this.onHideCorrectAnswerClicked();
          return;
        }

        this.onResetClicked();
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit(type) {}
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.addButtonsView();
        this.onQuestionRendered();
      }
    }, {
      key: "addButtonsView",
      value: function addButtonsView() {
        this.buttonsView = new ButtonsView({
          model: this.model,
          el: this.$('.btn__container')
        });
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);
      }
    }, {
      key: "onButtonStateUpdate",
      value: function onButtonStateUpdate(buttonState) {
        switch (buttonState) {
          case BUTTON_STATE$1.SUBMIT:
            this.onSubmitClicked();
            break;

          case BUTTON_STATE$1.RESET:
            this.onResetClicked();
            break;

          case BUTTON_STATE$1.SHOW_CORRECT_ANSWER:
            this.onShowCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
            this.onHideCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.SHOW_FEEDBACK:
            this.showFeedback();
            break;
        }
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {}
    }, {
      key: "onSubmitClicked",
      value: function onSubmitClicked() {
        var canSubmit = this._runModelCompatibleFunction('canSubmit');

        if (!canSubmit) {
          this.showInstructionError();
          this.onCannotSubmit();
          return;
        }

        this._runModelCompatibleFunction('updateAttempts');

        this._runModelCompatibleFunction('setQuestionAsSubmitted');

        this.removeInstructionError();

        this._runModelCompatibleFunction('storeUserAnswer');

        this._runModelCompatibleFunction('markQuestion', 'isCorrect');

        this._runModelCompatibleFunction('setScore');

        this._runModelCompatibleFunction('checkQuestionCompletion');

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        this.recordInteraction();

        this._runModelCompatibleFunction('setupFeedback');

        this.showFeedback();
        $(window).resize();

        this._runModelCompatibleFunction('updateButtons');

        this.model.onSubmitted();
        this.onSubmitted();
      }
    }, {
      key: "showInstructionError",
      value: function showInstructionError() {
        Adapt.trigger('questionView:showInstructionError', this);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {}
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.model.setQuestionAsSubmitted();
        this.$('.component__widget').addClass('is-submitted');
      }
    }, {
      key: "removeInstructionError",
      value: function removeInstructionError() {
        this.$('.component__instruction-inner').removeClass('validation-error');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.model.checkQuestionCompletion();

        if (isComplete) {
          this.$('.component__widget').addClass('is-complete show-user-answer');
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {
          Adapt.trigger('questionView:recordInteraction', this);
        }
      }
    }, {
      key: "showFeedback",
      value: function showFeedback() {
        if (this.model.get('_canShowFeedback')) {
          Adapt.trigger('questionView:showFeedback', this);
        } else {
          Adapt.trigger('questionView:disabledFeedback', this);
        }
      }
    }, {
      key: "onResetClicked",
      value: function onResetClicked() {
        this.setQuestionAsReset();

        this._runModelCompatibleFunction('resetUserAnswer');

        this.model.checkCanSubmit();

        this._runModelCompatibleFunction('updateButtons');

        if (!this.model.get('_isReady')) return;
        var currentModel = Adapt.findById(Adapt.location._currentId);
        if (!(currentModel !== null && currentModel !== void 0 && currentModel.get('_isReady'))) return;
        a11y.focusNext(this.$el, {
          preventScroll: true
        });
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.model.setQuestionAsReset();
        this.resetQuestion();
        this.$('.component__widget').removeClass('is-submitted');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.model.set('_buttonState', this.model.getButtonState());

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        if (this.buttonsView) {
          _.defer(this.buttonsView.refresh.bind(this.buttonsView));
        }
      }
    }, {
      key: "onShowCorrectAnswerClicked",
      value: function onShowCorrectAnswerClicked() {
        this.setQuestionAsShowCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.showCorrectAnswer();
      }
    }, {
      key: "setQuestionAsShowCorrect",
      value: function setQuestionAsShowCorrect() {
        this.$('.component__widget').addClass('is-submitted show-correct-answer').removeClass('show-user-answer');
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', true);
      }
    }, {
      key: "onHideCorrectAnswerClicked",
      value: function onHideCorrectAnswerClicked() {
        this.setQuestionAsHideCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.hideCorrectAnswer();
      }
    }, {
      key: "setQuestionAsHideCorrect",
      value: function setQuestionAsHideCorrect() {
        this.$('.component__widget').addClass('is-submitted show-user-answer').removeClass('show-correct-answer');
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', false);
      }
    }, {
      key: "getLatency",
      value: function getLatency() {
        return null;
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        return this.model[name]();
      }
    }]);

    return QuestionView;
  }(ComponentView$1);

  QuestionView._isQuestionType = true;

  var ViewOnlyQuestionViewCompatibilityLayer = function (_QuestionView) {
    _inherits(ViewOnlyQuestionViewCompatibilityLayer, _QuestionView);

    var _super2 = _createSuper(ViewOnlyQuestionViewCompatibilityLayer);

    function ViewOnlyQuestionViewCompatibilityLayer() {
      _classCallCheck(this, ViewOnlyQuestionViewCompatibilityLayer);

      return _super2.apply(this, arguments);
    }

    _createClass(ViewOnlyQuestionViewCompatibilityLayer, [{
      key: "getInteractionObject",
      value: function getInteractionObject() {
        logging.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getInteractionObject();
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        logging.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getResponse();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        logging.deprecated('QuestionView.getResponseType, please use QuestionModel.getResponseType');
        return this.model.getResponseType();
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        logging.deprecated('QuestionView.setupDefaultSettings, please use QuestionModel.setupDefaultSettings');
        return this.model.setupDefaultSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        logging.deprecated('QuestionView.setupButtonSettings, please use QuestionModel.setupButtonSettings');
        return this.model.setupButtonSettings();
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {
        logging.deprecated('QuestionView.setupWeightSettings, please use QuestionModel.setupWeightSettings');
        return this.model.setupWeightSettings();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        logging.deprecated('QuestionView.canSubmit, please use QuestionModel.canSubmit');
        return this.model.canSubmit();
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        logging.deprecated('QuestionView.updateAttempts, please use QuestionModel.updateAttempts');
        return this.model.updateAttempts();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        logging.deprecated('QuestionView.storeUserAnswer, please use QuestionModel.storeUserAnswer');
        return this.model.storeUserAnswer();
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        logging.deprecated('QuestionView.resetUserAnswer, please use QuestionModel.resetUserAnswer');
        return this.model.resetUserAnswer();
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this._isInViewOnlyCompatibleMode('isCorrect')) {
          if (this.isCorrect()) {
            this.model.set('_isCorrect', true);
          } else {
            this.model.set('_isCorrect', false);
          }

          this.model.set({
            _rawScore: this.model.get('_isCorrect') ? this.model.get('_questionWeight') : 0,
            _maxScore: this.model.get('_questionWeight'),
            _minScore: 0
          });
        } else {
          return this.model.markQuestion();
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        logging.deprecated('QuestionView.isCorrect, please use QuestionModel.isCorrect');
        return this.model.isCorrect();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        logging.deprecated('QuestionView.setScore, please use QuestionModel.setScore');
        return this.model.setScore();
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        logging.deprecated('QuestionView.updateButtons, please use QuestionModel.updateButtons');
        return this.model.updateButtons();
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (this._isInViewOnlyCompatibleMode('isPartlyCorrect')) {
          if (this.model.get('_isCorrect')) {
            this._runModelCompatibleFunction('setupCorrectFeedback');
          } else if (this.isPartlyCorrect()) {
            this._runModelCompatibleFunction('setupPartlyCorrectFeedback');
          } else {
            this._runModelCompatibleFunction('setupIncorrectFeedback');
          }
        } else {
          this.model.setupFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        logging.deprecated('QuestionView.isPartlyCorrect, please use QuestionModel.isPartlyCorrect');
        return this.model.isPartlyCorrect();
      }
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        logging.deprecated('QuestionView.setupCorrectFeedback, please use QuestionModel.setupCorrectFeedback');
        return this.model.setupCorrectFeedback();
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        logging.deprecated('QuestionView.setupPartlyCorrectFeedback, please use QuestionModel.setupPartlyCorrectFeedback');
        return this.model.setupPartlyCorrectFeedback();
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        logging.deprecated('QuestionView.setupIncorrectFeedback, please use QuestionModel.setupIncorrectFeedback');
        return this.model.setupIncorrectFeedback();
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {
          return this[name]();
        } else {
          return this.model[name]();
        }
      }
    }, {
      key: "_isInViewOnlyCompatibleMode",
      value: function _isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction) {
        var checkForFunction = lookForViewOnlyFunction || name;
        if (!this.constructor.prototype[checkForFunction]) return false;
        var hasCompatibleVersion = Object.prototype.hasOwnProperty.call(ViewOnlyQuestionViewCompatibilityLayer.prototype, checkForFunction);
        var usingCompatibleVersion = this.constructor.prototype[checkForFunction] === ViewOnlyQuestionViewCompatibilityLayer.prototype[checkForFunction];

        if (hasCompatibleVersion && usingCompatibleVersion) {
          switch (checkForFunction) {
            case 'setupFeedback':
            case 'markQuestion':
              return true;
          }

          return false;
        }

        return true;
      }
    }]);

    return ViewOnlyQuestionViewCompatibilityLayer;
  }(QuestionView);
  var QuestionView$1 = __AMD("core/js/views/questionView", ViewOnlyQuestionViewCompatibilityLayer);

  var ChooseView = function (_QuestionView) {
    _inherits(ChooseView, _QuestionView);

    var _super = _createSuper(ChooseView);

    function ChooseView() {
      _classCallCheck(this, ChooseView);

      return _super.apply(this, arguments);
    }

    _createClass(ChooseView, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.onKeyPress = this.onKeyPress.bind(this);
        this.onItemOptionSelect = this.onItemOptionSelect.bind(this);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(ChooseView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        var _this = this;

        this.$('.choose__item').imageready(function () {
          return _this.setReadyStatus();
        });
        this.setupItems();
      }
    }, {
      key: "setupItems",
      value: function setupItems() {
        var _this$model$get,
            _this2 = this;

        var _spaceSize = this.model.get('_spaceSize');

        var _spaces = '';

        for (var i = 0; i < _spaceSize; i++) {
          _spaces += '&nbsp;';
        }

        (_this$model$get = this.model.get('_items')) === null || _this$model$get === void 0 ? void 0 : _this$model$get.forEach(function (item) {
          var _choose = "<span class=\"choose__replace\">".concat(_spaces, "</span>");

          _this2.updateItem(item, _choose, false);

          if (item._selected) {
            _choose = _this2.getChoose(item);

            _this2.updateItem(item, _choose, true);
          }
        });
      }
    }, {
      key: "getChoose",
      value: function getChoose(item) {
        var _hasGraphic = item._selected._graphic && item._selected._graphic.large;

        if (!_hasGraphic) {
          return item._selected.text;
        }

        var _graphic = Adapt.device.screenSize !== 'small' ? item._selected._graphic.large : item._selected._graphic.small;

        return "<img src=\"".concat(_graphic, "\"/>");
      }
    }, {
      key: "updateItem",
      value: function updateItem(item, answer, selected) {
        var $item = this.getItemElement(item);

        if (!selected) {
          var _text = item.text.replace('[]', answer);

          return $item.find('.choose__item-text').html(_text);
        }

        $item.find('.choose__item-text .choose__replace').html(answer);
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(item) {
        if (!item) return;
        var index = item._index;
        return this.$('.choose__item').filter("[data-index=\"".concat(index, "\"]"));
      }
    }, {
      key: "onKeyPress",
      value: function onKeyPress(event) {
        if (event.which !== 13) return;
        this.onItemOptionSelect(event);
      }
    }, {
      key: "onItemOptionSelect",
      value: function onItemOptionSelect(event) {
        if (!this.model.isInteractive()) return;
        var $input = $(event.currentTarget);
        var itemIndex = $input.data('adapt-index');
        var optionIndex = parseInt($input.val());
        this.model.setOptionSelected(itemIndex, optionIndex, true);
        this.model.set('_highlighted', "".concat(itemIndex, "-").concat(optionIndex));
        var item = this.model.get('_items')[itemIndex];

        var _choose = this.getChoose(item);

        this.updateItem(item, _choose, true);
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        var _this3 = this;

        this.$('.choose__item').removeClass('is-correct is-incorrect is-selected');
        this.$('.choose__item-choice').removeClass('is-correct is-incorrect is-selected');
        this.model.set('_isAtLeastOneCorrectSelection', false);
        this.model.get('_items').forEach(function (item) {
          var $item = _this3.getItemElement(item);

          $item.find('.choose__item-text .choose__replace').replaceWith('[]');

          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
        });
        this.setupItems();
      }
    }]);

    return ChooseView;
  }(QuestionView$1);

  ChooseView.template = 'choose.jsx';
  var ChooseView$1 = __AMD("components/adapt-choose/js/chooseView", ChooseView);

  var ChooseModel = __AMD("components/adapt-choose/js/chooseModel", function (_QuestionModel) {
    _inherits(ChooseModel, _QuestionModel);

    var _super = _createSuper(ChooseModel);

    function ChooseModel() {
      _classCallCheck(this, ChooseModel);

      return _super.apply(this, arguments);
    }

    _createClass(ChooseModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(ChooseModel.prototype), "init", this).call(this);

        this.setupQuestionItemIndexes();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(ChooseModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.set('_isAtLeastOneCorrectSelection', false);
        this.get('_items').forEach(function (item) {
          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
        });
        return true;
      }
    }, {
      key: "setupQuestionItemIndexes",
      value: function setupQuestionItemIndexes() {
        var _this = this;

        this.get('_items').forEach(function (item, index) {
          if (item._index === undefined) {
            item._index = index;
            item._selected = false;
          }

          if (item._options === undefined) {
            item._options = _this.get('_choices').map(function (choice) {
              return {
                text: choice.text,
                _graphic: choice._graphic
              };
            });
          }

          item._options.forEach(function (option, index) {
            if (option._index !== undefined) return;
            option._index = index;
            option._isSelected = false;
          });
        });
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        this.get('_items').forEach(function (item) {
          return item._options = _.shuffle(item._options);
        });
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        this.get('_items').forEach(function (item) {
          item._options.forEach(function (option) {
            if (option._index !== userAnswer[item._index]) return;
            option._isSelected = true;
            item._selected = option;
          });
        });
        this.setQuestionAsSubmitted();
        this.checkCanSubmit();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var canSubmit = this.get('_items').every(function (_ref) {
          var _options = _ref._options;
          return _options.some(function (_ref2) {
            var _isSelected = _ref2._isSelected;
            return _isSelected;
          });
        });
        return canSubmit;
      }
    }, {
      key: "setOptionSelected",
      value: function setOptionSelected(itemIndex, optionIndex, isSelected) {
        var item = this.get('_items')[itemIndex];

        if (isNaN(optionIndex)) {
          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
          return this.checkCanSubmit();
        }

        item._options.forEach(function (option) {
          option._isSelected = false;
        });

        var option = item._options.find(function (_ref3) {
          var _index = _ref3._index;
          return _index === optionIndex;
        });

        option._isSelected = isSelected;
        item._selected = option;
        this.checkCanSubmit();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var userAnswer = new Array(this.get('_items').length);
        this.get('_items').forEach(function (item) {
          var optionIndex = item._options.findIndex(function (_ref4) {
            var _isSelected = _ref4._isSelected;
            return _isSelected;
          });

          userAnswer[item._index] = item._options[optionIndex]._index;
        });
        this.set({
          _userAnswer: userAnswer
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var _this2 = this;

        var numberOfCorrectAnswers = this.get('_items').reduce(function (a, item) {
          var _item$_selected;

          var isCorrect = (_item$_selected = item._selected) === null || _item$_selected === void 0 ? void 0 : _item$_selected._isCorrect;
          item._isCorrect = Boolean(isCorrect);

          if (!isCorrect) {
            return a;
          }

          _this2.set('_isAtLeastOneCorrectSelection', true);

          return ++a;
        }, 0);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

        if (numberOfCorrectAnswers === this.get('_items').length) {
          return true;
        }

        return false;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');

        if (this.get('_isCorrect')) {
          this.set('_score', questionWeight);
          return;
        }

        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var itemLength = this.get('_items').length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: null,
          source: null,
          target: null
        };
        var items = this.get('_items');
        interactions.correctResponsesPattern = [items.map(function (_ref5, questionIndex) {
          var _options = _ref5._options;
          questionIndex++;
          return [questionIndex, _options.filter(function (_ref6) {
            var _isCorrect = _ref6._isCorrect;
            return _isCorrect;
          }).map(function (_ref7) {
            var _index = _ref7._index;
            return "".concat(questionIndex, "_").concat(_index + 1);
          })].join('[.]');
        }).join('[,]')];
        interactions.source = items.map(function (item) {
          return {
            id: "".concat(item._index + 1),
            description: item.text
          };
        }).flat(Infinity);
        interactions.target = items.map(function (_ref8, index) {
          var _options = _ref8._options;
          index++;
          return _options.map(function (option) {
            return {
              id: "".concat(index, "_").concat(option._index + 1),
              description: option.text
            };
          });
        }).flat(Infinity);
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var responses = this.get('_userAnswer').map(function (userAnswer, index) {
          return "".concat(index + 1, ".").concat(userAnswer + 1);
        });
        return responses.join('#');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'matching';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var correctAnswerTemplate = Adapt.course.get('_globals')._components._choose.ariaCorrectAnswer;

        var ariaAnswer = this.get('_items').map(function (item) {
          var correctOption = item._options.find(function (_ref9) {
            var _isCorrect = _ref9._isCorrect;
            return _isCorrect;
          });

          return Handlebars.compile(correctAnswerTemplate)({
            itemText: item.text,
            correctAnswer: correctOption.text
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var userAnswerTemplate = Adapt.course.get('_globals')._components._choose.ariaUserAnswer;

        var answerArray = this.get('_userAnswer');
        var ariaAnswer = this.get('_items').map(function (item, index) {
          var key = answerArray[index];
          return Handlebars.compile(userAnswerTemplate)({
            itemText: item.text,
            userAnswer: item._options[key].text
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }]);

    return ChooseModel;
  }(QuestionModel$1));

  __AMD("components/adapt-choose/js/adapt-choose", Adapt.register('choose', {
    view: ChooseView$1,
    model: ChooseModel
  }));

  var ItemModel = __AMD("core/js/models/itemModel", function (_LockingModel) {
    _inherits(ItemModel, _LockingModel);

    var _super = _createSuper(ItemModel);

    function ItemModel() {
      _classCallCheck(this, ItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _isVisited: false,
          _score: 0
        };
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set({
          _isActive: false,
          _isVisited: false
        });
      }
    }, {
      key: "toggleActive",
      value: function toggleActive() {
        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isActive');
        this.set('_isActive', isActive);
      }
    }, {
      key: "toggleVisited",
      value: function toggleVisited() {
        var isVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isVisited');
        this.set('_isVisited', isVisited);
      }
    }]);

    return ItemModel;
  }(LockingModel));

  var ItemsComponentModel = __AMD("core/js/models/itemsComponentModel", function (_ComponentModel) {
    _inherits(ItemsComponentModel, _ComponentModel);

    var _super = _createSuper(ItemsComponentModel);

    function ItemsComponentModel() {
      _classCallCheck(this, ItemsComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemsComponentModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(ItemsComponentModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "init",
      value: function init() {
        this.setUpItems();
        this.listenTo(this.getChildren(), {
          all: this.onAll,
          'change:_isVisited': this.checkCompletionStatus
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "init", this).call(this);
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        var booleanArray = this.get('_userAnswer');
        if (!booleanArray) return;
        this.getChildren().forEach(function (child, index) {
          return child.set('_isVisited', booleanArray[index]);
        });
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var booleanArray = this.getChildren().map(function (child) {
          return child.get('_isVisited');
        });
        this.set('_userAnswer', booleanArray);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          return item._index = index;
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ItemModel
        }));
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        return this.getChildren().findWhere({
          _index: index
        });
      }
    }, {
      key: "getVisitedItems",
      value: function getVisitedItems() {
        return this.getChildren().where({
          _isVisited: true
        });
      }
    }, {
      key: "getActiveItems",
      value: function getActiveItems() {
        return this.getChildren().where({
          _isActive: true
        });
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem() {
        return this.getChildren().findWhere({
          _isActive: true
        });
      }
    }, {
      key: "areAllItemsCompleted",
      value: function areAllItemsCompleted() {
        return this.getVisitedItems().length === this.getChildren().length;
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        this.storeUserAnswer();
        if (!this.areAllItemsCompleted()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(ItemsComponentModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.getChildren().each(function (item) {
          return item.reset();
        });
        return true;
      }
    }, {
      key: "resetActiveItems",
      value: function resetActiveItems() {
        this.getChildren().each(function (item) {
          return item.toggleActive(false);
        });
      }
    }, {
      key: "setActiveItem",
      value: function setActiveItem(index) {
        var item = this.getItem(index);
        if (!item) return;
        var activeItem = this.getActiveItem();
        if (activeItem) activeItem.toggleActive(false);
        item.toggleActive(true);
      }
    }]);

    return ItemsComponentModel;
  }(ComponentModel$1));

  var AccordionModel = function (_ItemsComponentModel) {
    _inherits(AccordionModel, _ItemsComponentModel);

    var _super = _createSuper(AccordionModel);

    function AccordionModel() {
      _classCallCheck(this, AccordionModel);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionModel, [{
      key: "defaults",
      value: function defaults() {
        return ItemsComponentModel.resultExtend('defaults', {
          _shouldCollapseItems: true,
          _shouldExpandFirstItem: false,
          _toggleSpeed: 200
        }, this);
      }
    }, {
      key: "toggleItemsState",
      value: function toggleItemsState(index) {
        var item = this.getItem(index);
        var previousActiveItem = this.getActiveItem();
        item.toggleActive();
        item.toggleVisited(true);

        if (previousActiveItem && this.get('_shouldCollapseItems')) {
          previousActiveItem.toggleActive(false);
        }
      }
    }, {
      key: "checkExpandFirstItem",
      value: function checkExpandFirstItem() {
        if (!this.get('_shouldExpandFirstItem')) return;
        this.setActiveItem(0);
      }
    }]);

    return AccordionModel;
  }(ItemsComponentModel);

  var AccordionModel$1 = __AMD("components/adapt-contrib-accordion/js/accordionModel", AccordionModel);

  var AccordionView = function (_ComponentView) {
    _inherits(AccordionView, _ComponentView);

    var _super = _createSuper(AccordionView);

    function AccordionView() {
      _classCallCheck(this, AccordionView);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-toggle-item': 'onClick'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.checkIfResetOnRevisit();
        this.model.resetActiveItems();
        this.model.checkExpandFirstItem();
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion();
        }
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        this.model.toggleItemsState($(event.currentTarget).parent().data('index'));
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, isActive) {
        this.toggleItem(item, isActive);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, isVisited) {
        if (!isVisited) return;
        var $item = this.getItemElement(item);
        $item.children('.accordion__item-btn').addClass('is-visited');
      }
    }, {
      key: "toggleItem",
      value: function toggleItem(item, shouldExpand) {
        var $item = this.getItemElement(item);
        var $body = $item.children('.accordion__item-content').stop(true, true);
        $item.children('.accordion__item-btn').toggleClass('is-selected is-open', shouldExpand).toggleClass('is-closed', !shouldExpand).attr('aria-expanded', shouldExpand);

        if (!shouldExpand) {
          $body.slideUp(this.model.get('_toggleSpeed'));
          return;
        }

        $body.slideDown(this.model.get('_toggleSpeed'));
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(item) {
        var index = item.get('_index');
        return this.$('.accordion__item').filter("[data-index=\"".concat(index, "\"]"));
      }
    }]);

    return AccordionView;
  }(ComponentView$1);

  AccordionView.template = 'accordion';
  var AccordionView$1 = __AMD("components/adapt-contrib-accordion/js/accordionView", AccordionView);

  __AMD("components/adapt-contrib-accordion/js/adapt-contrib-accordion", Adapt.register('accordion', {
    model: AccordionModel$1,
    view: AccordionView$1
  }));

  var AssessmentResultsModel = ComponentModel$1.extend({
    init: function () {
      this.set('originalBody', this.get('body'));
      this.listenTo(Adapt, {
        'assessments:complete': this.onAssessmentComplete,
        'assessments:reset': this.onAssessmentReset
      });
    },
    checkIfAssessmentComplete: function () {
      if (!Adapt.assessment || this.get('_assessmentId') === undefined) {
        return;
      }

      var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
      if (!assessmentModel || assessmentModel.length === 0) return;
      var state = assessmentModel.getState();

      var isResetOnRevisit = assessmentModel.get('_assessment')._isResetOnRevisit;

      if (state.isComplete && (!state.allowResetIfPassed || !isResetOnRevisit)) {
        this.onAssessmentComplete(state);
        return;
      }

      this.setVisibility();
    },
    onAssessmentComplete: function (state) {
      if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
      this.set({
        _state: state,
        attempts: state.attempts,
        attemptsSpent: state.attemptsSpent,
        attemptsLeft: state.attemptsLeft,
        score: state.score,
        scoreAsPercent: state.scoreAsPercent,
        maxScore: state.maxScore,
        isPass: state.isPass
      });
      this.setFeedbackBand(state);
      this.checkRetryEnabled(state);
      this.setFeedbackText();
      this.toggleVisibility(true);
    },
    setFeedbackBand: function (state) {
      var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';

      var bands = _.sortBy(this.get('_bands'), '_score');

      for (var i = bands.length - 1; i >= 0; i--) {
        var isScoreInBandRange = state[scoreProp] >= bands[i]._score;
        if (!isScoreInBandRange) continue;
        this.set('_feedbackBand', bands[i]);
        break;
      }
    },
    checkRetryEnabled: function (state) {
      var assessmentModel = Adapt.assessment.get(state.id);
      if (!assessmentModel.canResetInPage()) return false;
      var feedbackBand = this.get('_feedbackBand');
      var isRetryEnabled = (feedbackBand && feedbackBand._allowRetry) !== false;
      var isAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
      var showRetry = isRetryEnabled && isAttemptsLeft && (!state.isPass || state.allowResetIfPassed);
      this.set({
        _isRetryEnabled: showRetry,
        retryFeedback: showRetry ? this.get('_retry').feedback : ''
      });
    },
    setFeedbackText: function () {
      var feedbackBand = this.get('_feedbackBand');
      var feedback = feedbackBand ? Handlebars.compile(feedbackBand.feedback)(this.toJSON()) : '';
      this.set({
        feedback: feedback,
        body: this.get('_completionBody')
      });
    },
    setVisibility: function () {
      if (!Adapt.assessment) return;
      var isVisibleBeforeCompletion = this.get('_isVisibleBeforeCompletion') || false;
      var wasVisible = this.get('_isVisible');
      var assessmentModel = Adapt.assessment.get(this.get('_assessmentId'));
      if (!assessmentModel || assessmentModel.length === 0) return;
      var state = assessmentModel.getState();
      var isComplete = state.isComplete;
      var isAttemptInProgress = state.attemptInProgress;
      var attemptsSpent = state.attemptsSpent;
      var hasHadAttempt = !isAttemptInProgress && attemptsSpent > 0;
      var isVisible = isVisibleBeforeCompletion && !isComplete || hasHadAttempt;
      if (!wasVisible && isVisible) isVisible = false;
      this.toggleVisibility(isVisible);
    },
    toggleVisibility: function (isVisible) {
      if (isVisible === undefined) {
        isVisible = !this.get('_isVisible');
      }

      this.set('_isVisible', isVisible, {
        pluginName: 'assessmentResults'
      });
    },
    checkCompletion: function () {
      if (this.get('_setCompletionOn') === 'pass' && !this.get('isPass')) {
        return;
      }

      this.setCompletionStatus();
    },
    onAssessmentReset: function (state) {
      if (this.get('_assessmentId') === undefined || this.get('_assessmentId') != state.id) return;
      var resetType = this.get('_resetType');

      if (!resetType || resetType === 'inherit') {
        resetType = state.resetType || 'hard';
      }

      this.reset(resetType, true);
    },
    reset: function () {
      this.set({
        body: this.get('originalBody'),
        state: null,
        feedback: '',
        _feedbackBand: null,
        retryFeedback: '',
        _isRetryEnabled: false
      });
      ComponentModel$1.prototype.reset.apply(this, arguments);
    }
  });
  var AssessmentResultsModel$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsModel", AssessmentResultsModel);

  var AssessmentResultsView = ComponentView$1.extend({
    events: {
      'click .js-assessment-retry-btn': 'onRetryClicked'
    },
    preRender: function () {
      this.model.setLocking('_isVisible', false);
      this.listenTo(Adapt, 'preRemove', function () {
        this.model.unsetLocking('_isVisible');
      });
      this.listenTo(this.model, {
        'change:_feedbackBand': this.addClassesToArticle,
        'change:body': this.render
      });
    },
    postRender: function () {
      this.model.checkIfAssessmentComplete();
      this.setReadyStatus();
      this.setupInviewCompletion('.component__inner', this.model.checkCompletion.bind(this.model));
    },
    onRetryClicked: function () {
      var state = this.model.get('_state');
      Adapt.assessment.get(state.id).reset();

      if (this.model.get('_retry')._routeToAssessment === true) {
        Adapt.navigateToElement('.' + state.articleId);
      }
    },
    addClassesToArticle: function (model, value) {
      if (!value || !value._classes) return;
      this.$el.parents('.article').addClass(value._classes);
    }
  }, {
    template: 'assessmentResults'
  });
  var AssessmentResultsView$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsView", AssessmentResultsView);

  __AMD("components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults", Adapt.register("assessmentResults", {
    model: AssessmentResultsModel$1,
    view: AssessmentResultsView$1
  }));

  var BlankView = __AMD("components/adapt-contrib-blank/js/blankView", function (_ComponentView) {
    _inherits(BlankView, _ComponentView);

    var _super = _createSuper(BlankView);

    function BlankView() {
      _classCallCheck(this, BlankView);

      return _super.apply(this, arguments);
    }

    _createClass(BlankView, [{
      key: "template",
      get: function () {
        return 'blank';
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInviewCompletion();
      }
    }]);

    return BlankView;
  }(ComponentView$1));

  __AMD("components/adapt-contrib-blank/js/adapt-contrib-blank", Adapt.register('blank', {
    model: ComponentModel$1.extend({}),
    view: BlankView
  }));

  var McqView = QuestionView$1.extend({
    events: {
      'focus .js-item-input': 'onItemFocus',
      'blur .js-item-input': 'onItemBlur',
      'change .js-item-input': 'onItemSelect',
      'keyup .js-item-input': 'onKeyPress'
    },
    isCorrectAnswerShown: false,
    initialize: function () {
      QuestionView$1.prototype.initialize.apply(this, arguments);
      this.update = _.debounce(this.update.bind(this), 1);
      this.listenTo(this.model, {
        'change:_isEnabled change:_isComplete change:_isSubmitted': this.update
      });
      this.listenTo(this.model.getChildren(), {
        'change:_isActive': this.update
      });
    },
    resetQuestionOnRevisit: function () {
      this.resetQuestion();
    },
    setupQuestion: function () {
      this.model.setupRandomisation();
    },
    onQuestionRendered: function () {
      this.setReadyStatus();
      this.update();
    },
    onKeyPress: function (event) {
      if (event.which !== 13) return;
      this.onItemSelect(event);
    },
    onItemFocus: function (event) {
      if (!this.model.isInteractive()) return;
      this.$('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').addClass('is-highlighted');
    },
    onItemBlur: function (event) {
      this.$('.js-item-label[for=' + $(event.currentTarget).attr('id') + ']').removeClass('is-highlighted');
    },
    onItemSelect: function (event) {
      if (!this.model.isInteractive()) return;
      var index = $(event.currentTarget).data('adapt-index');
      var itemModel = this.model.getItem(index);
      var shouldSelect = !itemModel.get('_isActive');

      if (this.model.isSingleSelect()) {
        shouldSelect = true;
        this.model.resetActiveItems();
      } else if (shouldSelect && this.model.isAtActiveLimit()) {
        this.model.getLastActiveItem().toggleActive(false);
      }

      itemModel.toggleActive(shouldSelect);
    },
    onCannotSubmit: function () {},
    showMarking: function () {
      this.update();
    },
    resetQuestion: function () {
      this.model.resetActiveItems();
      this.model.resetItems();
    },
    showCorrectAnswer: function () {
      this.isCorrectAnswerShown = true;
      this.update();
    },
    hideCorrectAnswer: function () {
      this.isCorrectAnswerShown = false;
      this.update();
    },
    update: function () {
      this.updateSelection();
      this.updateMarking();
    },
    updateSelection: function () {
      var isEnabled = this.model.get('_isEnabled');
      this.model.getChildren().each(function (itemModel) {
        var isSelected = this.isCorrectAnswerShown ? itemModel.get('_shouldBeSelected') : itemModel.get('_isActive');
        var index = itemModel.get('_index');
        this.$('.js-item-label').filter('[data-adapt-index="' + index + '"]').toggleClass('is-selected', isSelected).toggleClass('is-disabled', !isEnabled);
        this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]').prop('checked', isSelected).prop('disabled', !isEnabled);
      }.bind(this));
    },
    updateMarking: function () {
      var isInteractive = this.model.isInteractive();
      var canShowMarking = this.model.get('_canShowMarking');

      var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

      this.model.getChildren().each(function (itemModel) {
        var index = itemModel.get('_index');
        var $itemInput = this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]');
        var $item = $itemInput.parents('.js-mcq-item');

        if (isInteractive || !canShowMarking) {
          $item.removeClass('is-correct is-incorrect');
          $itemInput.attr('aria-label', $.a11y_normalize(itemModel.get('text')));
          return;
        }

        var shouldBeSelected = itemModel.get('_shouldBeSelected');
        var isCorrect = Boolean(itemModel.get('_isCorrect'));
        var isActive = Boolean(itemModel.get('_isActive'));
        $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect);
        $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ', ', isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, '. ', $.a11y_normalize(itemModel.get('text'))].join(''));
      }.bind(this));
    }
  });
  var McqView$1 = __AMD("components/adapt-contrib-mcq/js/mcqView", McqView);

  var BlendedItemsComponentQuestionModel = function (_QuestionModel) {
    _inherits(BlendedItemsComponentQuestionModel, _QuestionModel);

    var _super = _createSuper(BlendedItemsComponentQuestionModel);

    function BlendedItemsComponentQuestionModel() {
      _classCallCheck(this, BlendedItemsComponentQuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlendedItemsComponentQuestionModel, [{
      key: "init",
      value: function init() {
        ItemsComponentModel.prototype.init.call(this);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');
        ItemsComponentModel.prototype.reset.call(this, type, canReset);
        return _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "reset", this).call(this, type, canReset);
      }
    }]);

    return BlendedItemsComponentQuestionModel;
  }(QuestionModel$1);

  Object.getOwnPropertyNames(ItemsComponentModel.prototype).forEach(function (name) {
    if (name === 'constructor' || name === 'init' || name === 'reset') return;
    Object.defineProperty(BlendedItemsComponentQuestionModel.prototype, name, {
      value: ItemsComponentModel.prototype[name]
    });
  });
  var ItemsQuestionModel$1 = __AMD("core/js/models/itemsQuestionModel", function (_BlendedItemsComponen) {
    _inherits(ItemsQuestionModel, _BlendedItemsComponen);

    var _super2 = _createSuper(ItemsQuestionModel);

    function ItemsQuestionModel() {
      _classCallCheck(this, ItemsQuestionModel);

      return _super2.apply(this, arguments);
    }

    _createClass(ItemsQuestionModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(ItemsQuestionModel.prototype), "init", this).call(this);

        this.set('_isRadio', this.isSingleSelect());
        this.listenTo(this.getChildren(), 'change:_isActive', this.checkCanSubmit);
        this.checkCanSubmit();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var itemModels = this.getChildren();
        var userAnswer = this.get('_userAnswer');
        itemModels.each(function (item) {
          item.toggleActive(userAnswer[item.get('_index')]);
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        var children = this.getChildren();
        children.set(children.shuffle());
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var activeItems = this.getActiveItems();
        return activeItems.length > 0;
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.getChildren().slice(0);
        items.sort(function (a, b) {
          return a.get('_index') - b.get('_index');
        });
        var userAnswer = items.map(function (itemModel) {
          return itemModel.get('_isActive');
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var allChildren = this.getChildren();
        var activeChildren = allChildren.filter(function (itemModel) {
          return itemModel.get('_isActive');
        });

        var isItemCorrect = function (itemModel) {
          return itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var isItemPartlyCorrect = function (itemModel) {
          return itemModel.get('_isPartlyCorrect');
        };

        var isItemIncorrect = function (itemModel) {
          return !itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var sum = function (list, predicate) {
          return list.reduce(function (sum, item) {
            return sum + (predicate(item) ? 1 : 0);
          }, 0);
        };

        var props = {
          _numberOfRequiredAnswers: sum(allChildren, isItemCorrect),
          _numberOfCorrectAnswers: sum(activeChildren, isItemCorrect),
          _numberOfPartlyCorrectAnswers: sum(activeChildren, isItemPartlyCorrect),
          _numberOfIncorrectAnswers: sum(activeChildren, isItemIncorrect)
        };
        activeChildren.forEach(function (itemModel) {
          return itemModel.set('_isCorrect', itemModel.get('_shouldBeSelected'));
        });
        props._isAtLeastOneCorrectSelection = props._numberOfCorrectAnswers || props._numberOfPartlyCorrectAnswers;
        var numberOfSelectableAnswers = this.get('_selectable');
        var hasSelectableCorrectAnswers = props._numberOfCorrectAnswers === numberOfSelectableAnswers;
        var hasAllCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasCorrectAnswers = hasSelectableCorrectAnswers || hasAllCorrectAnswers;
        var hasIncorrectAnswers = props._numberOfIncorrectAnswers;
        var hasPartlyCorrectAnswers = props._numberOfPartlyCorrectAnswers;
        this.set(props);
        return hasCorrectAnswers && !hasIncorrectAnswers && !hasPartlyCorrectAnswers;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');
        var answeredCorrectly = this.get('_isCorrect');
        var score = answeredCorrectly ? questionWeight : 0;
        this.set('_score', score);
      }
    }, {
      key: "score",
      get: function () {
        var _this$getChildren;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "score", this);
        var children = ((_this$getChildren = this.getChildren()) === null || _this$getChildren === void 0 ? void 0 : _this$getChildren.toArray()) || [];
        return children.reduce(function (score, child) {
          return score += child.get('_isActive') ? child.get('_score') || 0 : 0;
        }, 0);
      }
    }, {
      key: "maxScore",
      get: function () {
        var _this$getChildren2;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "maxScore", this);
        var children = ((_this$getChildren2 = this.getChildren()) === null || _this$getChildren2 === void 0 ? void 0 : _this$getChildren2.toArray()) || [];
        var scores = children.map(function (child) {
          return child.get('_score') || 0;
        });
        scores.sort(function (a, b) {
          return a - b;
        });
        return scores.reverse().slice(0, this.get('_selectable')).filter(function (score) {
          return score > 0;
        }).reduce(function (maxScore, score) {
          return maxScore += score;
        }, 0);
      }
    }, {
      key: "minScore",
      get: function () {
        var _this$getChildren3;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "minScore", this);
        var children = ((_this$getChildren3 = this.getChildren()) === null || _this$getChildren3 === void 0 ? void 0 : _this$getChildren3.toArray()) || [];
        var scores = children.map(function (child) {
          return child.get('_score') || 0;
        });
        scores.sort(function (a, b) {
          return a - b;
        });
        return scores.slice(0, this.get('_selectable')).filter(function (score) {
          return score < 0;
        }).reduce(function (minScore, score) {
          return minScore += score;
        }, 0);
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        var activeItem = this.getActiveItem();

        if (this.isSingleSelect() && activeItem.get('feedback')) {
          this.setupIndividualFeedback(activeItem);
          return;
        }

        this.setupIncorrectFeedback();
      }
    }, {
      key: "setupIndividualFeedback",
      value: function setupIndividualFeedback(selectedItem) {
        this.set({
          feedbackTitle: this.getFeedbackTitle(this.get('_feedback')),
          feedbackMessage: selectedItem.get('feedback')
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "isAtActiveLimit",
      value: function isAtActiveLimit() {
        var selectedItems = this.getActiveItems();
        return selectedItems.length === this.get('_selectable');
      }
    }, {
      key: "isSingleSelect",
      value: function isSingleSelect() {
        return this.get('_selectable') === 1;
      }
    }, {
      key: "getLastActiveItem",
      value: function getLastActiveItem() {
        var selectedItems = this.getActiveItems();
        return selectedItems[selectedItems.length - 1];
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.resetItems();
      }
    }, {
      key: "resetItems",
      value: function resetItems() {
        this.resetActiveItems();
        this.set('_isAtLeastOneCorrectSelection', false);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: [],
          choices: []
        };
        interactions.choices = this.getChildren().map(function (itemModel) {
          return {
            id: (itemModel.get('_index') + 1).toString(),
            description: itemModel.get('text')
          };
        });
        var correctItems = this.getChildren().filter(function (itemModel) {
          return itemModel.get('_shouldBeSelected');
        });
        interactions.correctResponsesPattern = [correctItems.map(function (itemModel) {
          return String(itemModel.get('_index') + 1);
        }).join('[,]')];
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var activeItems = this.getActiveItems();
        var activeIndexes = activeItems.map(function (itemModel) {
          return itemModel.get('_index') + 1;
        });
        return activeIndexes.join(',');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'choice';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var _correctOptions$;

        var globals = Adapt.course.get('_globals')._components['_' + this.get('_component')];

        var isSingleSelect = this.isSingleSelect();
        var ariaAnswer = isSingleSelect ? globals === null || globals === void 0 ? void 0 : globals.ariaCorrectAnswer : globals === null || globals === void 0 ? void 0 : globals.ariaCorrectAnswers;
        if (!ariaAnswer) return;
        var correctOptions = this.getChildren().where({
          _shouldBeSelected: true
        });
        var correctAnswer = isSingleSelect ? (_correctOptions$ = correctOptions[0]) === null || _correctOptions$ === void 0 ? void 0 : _correctOptions$.get('text') : correctOptions.map(function (correctOption) {
          return correctOption.get('text');
        }).join('<br>');
        return Handlebars.compile(ariaAnswer)({
          correctAnswer: correctAnswer
        });
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var globals = Adapt.course.get('_globals')._components['_' + this.get('_component')];

        var isSingleSelect = this.isSingleSelect();
        var ariaAnswer = isSingleSelect ? globals === null || globals === void 0 ? void 0 : globals.ariaUserAnswer : globals === null || globals === void 0 ? void 0 : globals.ariaUserAnswers;
        if (!ariaAnswer) return;
        var selectedItems = this.getActiveItems();
        var userAnswer = isSingleSelect ? selectedItems[0].get('text') : selectedItems.map(function (selectedItem) {
          return selectedItem.get('text');
        }).join('<br>');
        return Handlebars.compile(ariaAnswer)({
          userAnswer: userAnswer
        });
      }
    }]);

    return ItemsQuestionModel;
  }(BlendedItemsComponentQuestionModel));

  var Mcq = __AMD("components/adapt-contrib-mcq/js/adapt-contrib-mcq", Adapt.register('mcq', {
    view: McqView$1,
    model: ItemsQuestionModel$1.extend({})
  }));

  var Gmcq = Mcq.view.extend({
    setupQuestion: function () {
      Mcq.view.prototype.setupQuestion.call(this);
      this.listenTo(Adapt, {
        'device:changed': this.resizeImage,
        'device:resize': this.onDeviceResize
      });
    },
    onQuestionRendered: function () {
      this.resizeImage(Adapt.device.screenSize);
      this.setUpColumns();
      this.$('.js-item-label').imageready(this.setReadyStatus.bind(this));
    },
    onDeviceResize: function () {
      this.setUpColumns();
    },
    resizeImage: function (width) {
      var imageWidth = width === 'medium' ? 'small' : width;
      this.$('.js-item-label').each(function (index) {
        var $img = $(this).find('img');
        var newSrc = $img.attr('data-' + imageWidth);
        if (!newSrc) return;
        $img.attr('src', newSrc);
      });
    },
    setUpColumns: function () {
      var columns = this.model.get('_columns');
      if (!columns) return;
      var isLarge = Adapt.device.screenSize === 'large';
      this.$el.toggleClass('has-column-layout', isLarge);
      this.$('.js-mcq-item').css('width', isLarge ? 100 / columns + '%' : '');
    },
    updateMarking: function () {
      var isInteractive = this.model.isInteractive();
      var canShowMarking = this.model.get('_canShowMarking');

      var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

      this.model.getChildren().forEach(function (itemModel) {
        var index = itemModel.get('_index');
        var $itemInput = this.$('.js-item-input').filter('[data-adapt-index="' + index + '"]');
        var $item = $itemInput.parents('.js-mcq-item');

        if (isInteractive || !canShowMarking) {
          $item.removeClass('is-correct is-incorrect');
          $itemInput.attr('aria-label', [Adapt.a11y.normalize(itemModel.get('text')), '. ', Adapt.a11y.normalize(itemModel.get('_graphic').alt)].join(''));
          return;
        }

        var shouldBeSelected = itemModel.get('_shouldBeSelected');
        var isCorrect = Boolean(itemModel.get('_isCorrect'));
        var isActive = Boolean(itemModel.get('_isActive'));
        $item.toggleClass('is-correct', isCorrect).toggleClass('is-incorrect', !isCorrect);
        $itemInput.attr('aria-label', [shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ', ', isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, '. ', $.a11y_normalize(itemModel.get('text')), '. ', $.a11y_normalize(itemModel.get('_graphic').alt)].join(''));
      }, this);
    }
  }, {
    template: 'gmcq'
  });
  __AMD("components/adapt-contrib-gmcq/js/adapt-contrib-gmcq", Adapt.register('gmcq', {
    view: Gmcq,
    model: Mcq.model.extend({})
  }));

  var GraphicView = function (_ComponentView) {
    _inherits(GraphicView, _ComponentView);

    var _super = _createSuper(GraphicView);

    function GraphicView() {
      _classCallCheck(this, GraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(GraphicView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-graphic-link': 'onClick'
        };
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        this.$('.graphic__widget').imageready(function () {
          _this.setReadyStatus();

          _this.setupInviewCompletion('.graphic__widget');
        });
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        if (event) event.preventDefault();
        var item = this.model.get('_graphic');
        var url = item._url,
            _item$_target = item._target,
            target = _item$_target === void 0 ? '_blank' : _item$_target;
        var isNewWindow = target !== '_self';
        if (isNewWindow) return window.open(url, target);
        var isRouterNavigation = url.substr(0, 1) === '#';
        if (isRouterNavigation) return Backbone.history.navigate(url, {
          trigger: true
        });
        window.location.href = url;
      }
    }]);

    return GraphicView;
  }(ComponentView$1);

  GraphicView.template = 'graphic.jsx';
  var GraphicView$1 = __AMD("components/adapt-contrib-graphic/js/GraphicView", GraphicView);

  var GraphicModel = __AMD("components/adapt-contrib-graphic/js/GraphicModel", function (_ComponentModel) {
    _inherits(GraphicModel, _ComponentModel);

    var _super = _createSuper(GraphicModel);

    function GraphicModel() {
      _classCallCheck(this, GraphicModel);

      return _super.apply(this, arguments);
    }

    return GraphicModel;
  }(ComponentModel$1));

  __AMD("components/adapt-contrib-graphic/js/adapt-contrib-graphic", Adapt.register('graphic', {
    model: GraphicModel,
    view: GraphicView$1
  }));

  var HotgraphicPopupView = function (_Backbone$View) {
    _inherits(HotgraphicPopupView, _Backbone$View);

    var _super = _createSuper(HotgraphicPopupView);

    function HotgraphicPopupView() {
      _classCallCheck(this, HotgraphicPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(HotgraphicPopupView, [{
      key: "className",
      value: function className() {
        return 'hotgraphic-popup';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-popup-close': 'closePopup',
          'click .js-hotgraphic-controls-click': 'onControlClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotgraphicPopupView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.onControlClick = _.debounce(this.onControlClick.bind(this), 100);
        this.listenToOnce(Adapt, 'notify:opened', this.onOpened);
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.render();
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        this.applyNavigationClasses(this.model.getActiveItem().get('_index'));
        this.updatePageCount();
        this.handleTabs();
      }
    }, {
      key: "applyNavigationClasses",
      value: function applyNavigationClasses(index) {
        var itemCount = this.model.get('_items').length;
        var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');
        var shouldEnableBack = index > 0 || canCycleThroughPagination;
        var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;
        var $controls = this.$('.hotgraphic-popup__controls');
        this.$('hotgraphic-popup__nav').toggleClass('first', !shouldEnableBack).toggleClass('last', !shouldEnableNext);
        Adapt.a11y.toggleAccessibleEnabled($controls.filter('.back'), shouldEnableBack);
        Adapt.a11y.toggleAccessibleEnabled($controls.filter('.next'), shouldEnableNext);
      }
    }, {
      key: "updatePageCount",
      value: function updatePageCount() {
        var template = Adapt.course.get('_globals')._components._hotgraphic.popupPagination || '{{itemNumber}} / {{totalItems}}';
        var labelText = Handlebars.compile(template)({
          itemNumber: this.model.getActiveItem().get('_index') + 1,
          totalItems: this.model.get('_items').length
        });
        this.$('.hotgraphic-popup__count').html(labelText);
      }
    }, {
      key: "handleTabs",
      value: function handleTabs() {
        Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item:not(.is-active)'), true);
        Adapt.a11y.toggleHidden(this.$('.hotgraphic-popup__item.is-active'), false);
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;
        var index = item.get('_index');
        this.updatePageCount();
        this.applyItemClasses(index);
        this.handleTabs();
        this.handleFocus(index);
      }
    }, {
      key: "applyItemClasses",
      value: function applyItemClasses(index) {
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"]")).addClass('is-active').removeAttr('aria-hidden');
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"] .hotgraphic-popup__item-title")).attr('id', 'notify-heading');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"])")).removeClass('is-active').attr('aria-hidden', 'true');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"]) .hotgraphic-popup__item-title")).removeAttr('id');
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(index) {
        Adapt.a11y.focusFirst(this.$('.hotgraphic-popup__inner .is-active'));
        this.applyNavigationClasses(index);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$('.hotgraphic-popup__item').filter("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt.trigger('notify:close');
      }
    }, {
      key: "onControlClick",
      value: function onControlClick(event) {
        var direction = $(event.currentTarget).data('direction');
        var index = this.getNextIndex(direction);
        if (index === -1) return;
        this.setItemState(index);
      }
    }, {
      key: "getNextIndex",
      value: function getNextIndex(direction) {
        var index = this.model.getActiveItem().get('_index');
        var lastIndex = this.model.get('_items').length - 1;

        switch (direction) {
          case 'back':
            if (index > 0) return --index;
            if (this.model.get('_canCycleThroughPagination')) return lastIndex;
            break;

          case 'next':
            if (index < lastIndex) return ++index;
            if (this.model.get('_canCycleThroughPagination')) return 0;
        }

        return -1;
      }
    }, {
      key: "setItemState",
      value: function setItemState(index) {
        this.model.getActiveItem().toggleActive();
        var nextItem = this.model.getItem(index);
        nextItem.toggleActive();
        nextItem.toggleVisited(true);
      }
    }]);

    return HotgraphicPopupView;
  }(Backbone.View);
  HotgraphicPopupView.template = 'hotgraphicPopup';
  var HotgraphicPopupView$1 = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicPopupView", HotgraphicPopupView);

  var HotGraphicView = function (_ComponentView) {
    _inherits(HotGraphicView, _ComponentView);

    var _super = _createSuper(HotGraphicView);

    function HotGraphicView() {
      _classCallCheck(this, HotGraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(HotGraphicView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-item-click': 'onPinClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotGraphicView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.setUpViewData();
        this.setUpModelData();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        this.popupView = null;
        this._isPopupOpen = false;
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        if (this.model.get('_canCycleThroughPagination') !== undefined) return;
        this.model.set('_canCycleThroughPagination', false);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, 'device:changed', this.reRender);
        this.listenTo(this.model.get('_children'), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (Adapt.device.screenSize === 'large' || this.model.get('_isNarrativeOnMobile') === false) return;
        this.replaceWithNarrative();
      }
    }, {
      key: "replaceWithNarrative",
      value: function replaceWithNarrative() {
        var NarrativeView = Adapt.getViewClass('narrative');
        if (!NarrativeView) return;
        var model = this.prepareNarrativeModel();
        var newNarrative = new NarrativeView({
          model: model
        });
        var $container = Adapt.findViewByModelId(model.get('_parentId')).$el.find('.component__container');
        $container.append(newNarrative.$el);
        this.remove();

        _.defer(function () {
          Adapt.trigger('device:resize');
        });
      }
    }, {
      key: "prepareNarrativeModel",
      value: function prepareNarrativeModel() {
        this.model.set({
          _component: 'narrative',
          _wasHotgraphic: true,
          originalBody: this.model.get('body'),
          originalInstruction: this.model.get('instruction')
        });
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          this.model.getItem(0).toggleActive(true);
        }

        if (this.model.get('mobileBody')) {
          this.model.set('body', this.model.get('mobileBody'));
        }

        if (this.model.get('mobileInstruction')) {
          this.model.set('instruction', this.model.get('mobileInstruction'));
        }

        return this.model;
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive);
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-hotgraphic-item-click').filter("[data-index=\"".concat(index, "\"]"));
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $pin = this.getItemElement(model);
        var visitedLabel = " ".concat(this.model.get('_globals')._accessibility._ariaLabels.visited, ".");
        $pin.find('.aria-label').each(function (index, el) {
          el.innerHTML += visitedLabel;
        });
        $pin.addClass('is-visited');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        if (Adapt.device.screenSize === 'large') {
          this.render();
          return;
        }

        this.reRender();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('.hotgraphic__widget').imageready(this.setReadyStatus.bind(this));
        if (this.model.get('_setCompletionOn') !== 'inview') return;
        this.setupInviewCompletion('.component__widget');
      }
    }, {
      key: "onPinClicked",
      value: function onPinClicked(event) {
        var item = this.model.getItem($(event.currentTarget).data('index'));
        item.toggleActive(true);
        item.toggleVisited(true);
        this.openPopup();
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new HotgraphicPopupView$1({
          model: this.model
        });
        Adapt.notify.popup({
          _attributes: {
            'data-adapt-id': this.model.get('_id')
          },
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: false,
          _classes: 'hotgraphic is-component is-hotgaphic ' + this.model.get('_classes')
        });
        this.listenToOnce(Adapt, {
          'popup:closed': this.onPopupClosed
        });
      }
    }, {
      key: "onPopupClosed",
      value: function onPopupClosed() {
        this.model.getActiveItem().toggleActive();
        this._isPopupOpen = false;
      }
    }]);

    return HotGraphicView;
  }(ComponentView$1);

  HotGraphicView.template = 'hotgraphic';
  var HotgraphicView = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicView", HotGraphicView);

  __AMD("components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic", Adapt.register('hotgraphic', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicView
  }));

  var DropDownOption = __AMD("components/adapt-contrib-matching/js/dropdownOption", function (_Backbone$View) {
    _inherits(DropDownItem, _Backbone$View);

    var _super = _createSuper(DropDownItem);

    function DropDownItem() {
      _classCallCheck(this, DropDownItem);

      return _super.apply(this, arguments);
    }

    _createClass(DropDownItem, [{
      key: "events",
      value: function events() {
        return {
          click: 'onClick',
          'click *': 'onClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(settings) {
        this.settings = settings;
        this.$inner = this.$('.js-dropdown-list-item-inner');
      }
    }, {
      key: "isPlaceholder",
      value: function isPlaceholder() {
        return this.$el.is('[hidden]');
      }
    }, {
      key: "parent",
      value: function parent() {
        return this.settings.parent;
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        var parent = this.parent();
        event.preventDefault();
        this.select().scrollTo();
        parent.$button.focus();
      }
    }, {
      key: "getValue",
      value: function getValue() {
        return this.$el.attr('value').trim();
      }
    }, {
      key: "select",
      value: function select() {
        var parent = this.parent();
        parent.deselectAll();
        parent.setActiveDescendantId(this.el.id);
        this.$el.attr({
          selected: '',
          'aria-selected': 'true'
        });
        parent.$inner.html(this.$el.attr('text'));
        var value = this.isPlaceholder() ? '' : this.getValue();
        parent.$input.val(value).trigger('change');
        parent.trigger('change', parent);
        return this;
      }
    }, {
      key: "deselect",
      value: function deselect() {
        if (!this.isSelected()) return this;
        var parent = this.parent();
        parent.removeActiveDescendantId();
        this.$el.removeAttr('selected');
        this.$el.attr('aria-selected', 'false');
        parent.$inner.html('');
        parent.$input.val('').trigger('change');
        parent.trigger('change', parent);
        return this;
      }
    }, {
      key: "reselect",
      value: function reselect() {
        var parent = this.parent();
        parent.setActiveDescendantId(this.$el[0].id);
        if (this.isSelected()) return this;
        this.select();
        return this;
      }
    }, {
      key: "isSelected",
      value: function isSelected() {
        return Boolean(this.$el.attr('selected'));
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var _this = this;

        var parent = this.parent();
        return parent.options.findIndex(function (option) {
          return option === _this;
        });
      }
    }, {
      key: "getNext",
      value: function getNext() {
        var parent = this.parent();
        return parent.options[this.getIndex() + 1];
      }
    }, {
      key: "getPrevious",
      value: function getPrevious() {
        var parent = this.parent();
        return parent.options[this.getIndex() - 1];
      }
    }, {
      key: "getFirst",
      value: function getFirst() {
        var parent = this.parent();
        return parent.options[0];
      }
    }, {
      key: "getLast",
      value: function getLast() {
        var parent = this.parent();
        return parent.options[parent.options.length - 1];
      }
    }, {
      key: "scrollTo",
      value: function scrollTo() {
        var parent = this.parent();
        parent.settings.scrollToItem.call(parent, this);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var parent = this.parent();
        this.remove();

        if (this.isPlaceholder()) {
          parent.placeholder = null;
        } else {
          for (var i = 0, l = parent.options.length; i < l; i++) {
            var item = parent.options[i];
            if (item !== this) continue;
            parent.options.splice(i, 1);
            break;
          }
        }

        delete this.settings;
      }
    }]);

    return DropDownItem;
  }(Backbone.View));

  var DropDown = function (_Backbone$View) {
    _inherits(DropDown, _Backbone$View);

    var _super = _createSuper(DropDown);

    function DropDown() {
      _classCallCheck(this, DropDown);

      return _super.apply(this, arguments);
    }

    _createClass(DropDown, [{
      key: "initialize",
      value: function initialize(settings) {
        _.bindAll(this, 'onStartInteraction', 'onButtonClick', 'onListBlur', 'onKeyDown');

        this.settings = _.defaults(settings, DropDown.defaults);
        this.placeholder = null;
        this.options = [];
        this.setUpElements();
        this.setUpItems();
        this.select(this.settings.value);
        this.addEventListeners();
        this.toggleOpen(false);
        this.settings.load.call(this, this);
        this.trigger('load', this);
      }
    }, {
      key: "setUpElements",
      value: function setUpElements() {
        this.$list = this.$('.js-dropdown-list');
        this.$button = this.$('.js-dropdown-btn');
        this.$inner = this.$button.find('.js-dropdown-inner');
        this.$input = this.$('.js-data-output');
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var _this = this;

        var $options = this.$('.js-dropdown-list-item');
        $options.each(function (index, el) {
          var option = new DropDownOption({
            parent: _this,
            el: el
          });

          if (option.isPlaceholder()) {
            _this.placeholder = option;
            return;
          }

          _this.options.push(option);
        });
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners() {
        this.$button.on({
          'mousedown touchstart': this.onStartInteraction,
          click: this.onButtonClick
        });
        this.$list.on('blur', this.onListBlur);
        $(document).on('keydown', this.onKeyDown);
      }
    }, {
      key: "onStartInteraction",
      value: function onStartInteraction() {
        this.wasOpen = this.isOpen();
      }
    }, {
      key: "deselectAll",
      value: function deselectAll() {
        this.placeholder.deselect();
        this.options.forEach(function (option) {
          return option.deselect();
        });
      }
    }, {
      key: "onButtonClick",
      value: function onButtonClick() {
        if (this.wasOpen || this.isOpen()) {
          this.wasOpen = false;
          return;
        }

        this.toggleOpen();
        var option = this.getFirstSelectedItem() || this.placeholder;
        if (!option) return;
        option.reselect();
        option.scrollTo();
        this.$list.focus();
      }
    }, {
      key: "isOpen",
      value: function isOpen() {
        return !this.$list.hasClass('u-display-none');
      }
    }, {
      key: "toggleOpen",
      value: function toggleOpen() {
        var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.isOpen();
        if (open) clearTimeout(this.blurTimeout);
        this.$button.attr('aria-expanded', open ? 'true' : 'false');
        var name = open ? 'openList' : 'closeList';
        this.settings[name].call(this, this);
        this.trigger(name, this);
      }
    }, {
      key: "onListBlur",
      value: function onListBlur() {
        var _this2 = this;

        var handleBlur = function () {
          _this2.toggleOpen(false);

          _this2.removeActiveDescendantId();
        };

        this.blurTimeout = setTimeout(handleBlur, 100);
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        if (!this.isOpen()) return;
        var option = this.getFirstSelectedItem() || this.placeholder;

        switch (event.keyCode) {
          case 38:
            event.preventDefault();
            option = option.getPrevious() || option.getLast();
            break;

          case 40:
            event.preventDefault();
            option = option.getNext() || option.getFirst();
            break;

          case 13:
          case 32:
          case 27:
            event.preventDefault();
            this.$button.focus();
            return;

          default:
            return;
        }

        option.select().scrollTo();
      }
    }, {
      key: "getFirstSelectedItem",
      value: function getFirstSelectedItem() {
        return this.options.find(function (option) {
          return option.isSelected();
        }) || this.options[0];
      }
    }, {
      key: "setActiveDescendantId",
      value: function setActiveDescendantId(id) {
        this.$list.attr('aria-activedescendant', id);
      }
    }, {
      key: "removeActiveDescendantId",
      value: function removeActiveDescendantId() {
        this.$list.removeAttr('aria-activedescendant');
      }
    }, {
      key: "select",
      value: function select(value) {
        value = String(value);
        var option = this.options.find(function (option) {
          return option.getValue() === value;
        });

        if (option) {
          option.select();
          return;
        }

        this.placeholder.select();
      }
    }, {
      key: "toggleDisabled",
      value: function toggleDisabled() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.$input.attr('disabled');

        if (value === false) {
          this.$input.removeAttr('disabled');
          this.$button.removeAttr('disabled').removeClass('is-disabled');
          this.$el.removeAttr('disabled');
          return;
        }

        this.$input.attr('disabled', '');
        this.$button.attr('disabled', '').addClass('is-disabled');
        this.$el.attr('disabled', '');
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return !this.getFirstSelectedItem();
      }
    }, {
      key: "val",
      value: function val() {
        return this.$input.val();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeEventListeners();
        this.$el.remove();
        delete this.options;
        delete this.$input;
        delete this.$inner;
        delete this.$button;
        delete this.$list;
        delete this.$el;
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        this.$button.off({
          'mousedown touchstart': this.onStartInteraction,
          click: this.onButtonClick
        });
        this.$list.off('blur', this.onListBlur);
        $(document).off('keydown', this.onKeyDown);
      }
    }]);

    return DropDown;
  }(Backbone.View);

  DropDown.defaults = {
    load: function () {},
    openList: function () {
      this.$list.css({
        top: '',
        left: this.$button[0].offsetLeft,
        width: this.$button.outerWidth()
      }).addClass('u-visibility-hidden').removeClass('u-display-none');
      var offset = this.$list[0].getBoundingClientRect();
      var height = this.$list.height();
      var windowHeight = $(window).height();
      var isOffscreen = offset.top + height > windowHeight;
      this.$list.css('top', isOffscreen ? -height : '').removeClass('u-visibility-hidden').focus();
    },
    closeList: function () {
      this.$list.removeClass('u-visibility-hidden').addClass('u-display-none').css('top', '');
    },
    scrollToItem: function (option) {
      var height = this.$list[0].clientHeight;
      var pos = option.$el[0].offsetTop - height / 2;
      this.$list[0].scrollTop = pos;
    }
  };
  var DropDown$1 = __AMD("components/adapt-contrib-matching/js/dropdown", DropDown);

  var MatchingView = __AMD("components/adapt-contrib-matching/js/matchingView", function (_QuestionView) {
    _inherits(MatchingView, _QuestionView);

    var _super = _createSuper(MatchingView);

    function MatchingView() {
      _classCallCheck(this, MatchingView);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingView, [{
      key: "preinitialize",
      value: function preinitialize() {
        this.dropdowns = [];
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.dropdowns.forEach(function (dropdown) {
          return dropdown.toggleDisabled(true);
        });
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.dropdowns.forEach(function (dropdown) {
          return dropdown.toggleDisabled(false);
        });
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.listenToOnce(Adapt.parentView, 'postRemove', this.onPostRemove);
        this.model.setupRandomisation();
      }
    }, {
      key: "onPostRemove",
      value: function onPostRemove() {
        var _this = this;

        this.dropdowns.forEach(function (dropdown) {
          dropdown.off('change', _this.onOptionSelected);
          dropdown.destroy();
        });
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
        this.setUpDropdowns();
      }
    }, {
      key: "setUpDropdowns",
      value: function setUpDropdowns() {
        var _this2 = this;

        this.onOptionSelected = this.onOptionSelected.bind(this);
        var items = this.model.get('_items');
        this.$('.matching__item').each(function (i, el) {
          var _selectedOption$_inde;

          var item = items[i];

          var selectedOption = item._options.find(function (_ref) {
            var _isSelected = _ref._isSelected;
            return _isSelected;
          });

          var dropdown = new DropDown$1({
            el: $(el).find('.dropdown')[0],
            placeholder: _this2.model.get('placeholder'),
            value: (_selectedOption$_inde = selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption._index) !== null && _selectedOption$_inde !== void 0 ? _selectedOption$_inde : null
          });

          _this2.dropdowns.push(dropdown);

          dropdown.on('change', _this2.onOptionSelected);
        });
        this.enableQuestion();

        if (this.model.get('_isEnabled') !== true) {
          this.disableQuestion();
        }
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {
        this.dropdowns.forEach(function (dropdown) {
          if (!dropdown.isEmpty()) return;
          dropdown.$el.parents('.matching__select-container').addClass('has-error');
        });
      }
    }, {
      key: "onOptionSelected",
      value: function onOptionSelected(dropdown) {
        if (this.model.get('_isInteractionComplete')) return;
        var $container = dropdown.$el.parents('.matching__select-container');
        $container.removeClass('error');
        var itemIndex = dropdown.$el.parents('.matching__item').index();
        if (dropdown.isEmpty()) return;
        var optionIndex = parseInt(dropdown.val());
        this.model.setOptionSelected(itemIndex, optionIndex, true);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        var _this3 = this;

        if (!this.model.get('_canShowMarking')) return;
        this.model.get('_items').forEach(function (_ref2, i) {
          var _isCorrect = _ref2._isCorrect;

          var $item = _this3.$('.matching__item').eq(i);

          $item.toggleClass('is-correct', _isCorrect).toggleClass('is-incorrect', !_isCorrect);
        });
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        var _this4 = this;

        this.$('.matching__item').removeClass('is-correct is-incorrect');
        this.model.set('_isAtLeastOneCorrectSelection', false);
        var resetAll = this.model.get('_shouldResetAllAnswers');
        this.model.get('_items').forEach(function (item, index) {
          if (item._isCorrect && resetAll === false) return;

          _this4.selectValue(index, null);

          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
        });
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        var _this5 = this;

        this.model.get('_items').forEach(function (_ref3, index) {
          var _options = _ref3._options;

          var correctOption = _options.find(function (_ref4) {
            var _isCorrect = _ref4._isCorrect;
            return _isCorrect;
          });

          _this5.selectValue(index, correctOption._index);
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var _this6 = this;

        var answerArray = this.model.has('_tempUserAnswer') ? this.model.get('_tempUserAnswer') : this.model.get('_userAnswer');
        this.model.get('_items').forEach(function (_ref5, index) {
          var _options = _ref5._options;
          var key = answerArray[index];
          var value = _options[key]._index;

          _this6.selectValue(index, value);
        });
      }
    }, {
      key: "selectValue",
      value: function selectValue(index, optionIndex) {
        if (!this.dropdowns) return;
        var dropdown = this.dropdowns[index];
        if (!dropdown) return;
        dropdown.select(optionIndex);
      }
    }]);

    return MatchingView;
  }(QuestionView$1));

  var MatchingModel = __AMD("components/adapt-contrib-matching/js/matchingModel", function (_QuestionModel) {
    _inherits(MatchingModel, _QuestionModel);

    var _super = _createSuper(MatchingModel);

    function MatchingModel() {
      _classCallCheck(this, MatchingModel);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(MatchingModel.prototype), "init", this).call(this);

        this.setupQuestionItemIndexes();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(MatchingModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.set('_isAtLeastOneCorrectSelection', false);
        this.get('_items').forEach(function (item) {
          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
        });
        return true;
      }
    }, {
      key: "setupQuestionItemIndexes",
      value: function setupQuestionItemIndexes() {
        this.get('_items').forEach(function (item, index) {
          if (item._index === undefined) {
            item._index = index;
            item._selected = false;
          }

          item._options.forEach(function (option, index) {
            if (option._index !== undefined) return;
            option._index = index;
            option._isSelected = false;
          });
        });
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        this.get('_items').forEach(function (item) {
          return item._options = _.shuffle(item._options);
        });
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        this.get('_items').forEach(function (item) {
          item._options.forEach(function (option) {
            if (option._index !== userAnswer[item._index]) return;
            option._isSelected = true;
            item._selected = option;
          });
        });
        this.setQuestionAsSubmitted();
        this.checkCanSubmit();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var canSubmit = this.get('_items').every(function (_ref) {
          var _options = _ref._options;
          return _options.some(function (_ref2) {
            var _isSelected = _ref2._isSelected;
            return _isSelected;
          });
        });
        return canSubmit;
      }
    }, {
      key: "setOptionSelected",
      value: function setOptionSelected(itemIndex, optionIndex, isSelected) {
        var item = this.get('_items')[itemIndex];

        if (isNaN(optionIndex)) {
          item._options.forEach(function (option) {
            return option._isSelected = false;
          });

          item._selected = null;
          return this.checkCanSubmit();
        }

        var option = item._options.find(function (_ref3) {
          var _index = _ref3._index;
          return _index === optionIndex;
        });

        option._isSelected = isSelected;
        item._selected = option;
        this.checkCanSubmit();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var userAnswer = new Array(this.get('_items').length);
        var tempUserAnswer = new Array(this.get('_items').length);
        this.get('_items').forEach(function (item) {
          var optionIndex = item._options.findIndex(function (_ref4) {
            var _isSelected = _ref4._isSelected;
            return _isSelected;
          });

          tempUserAnswer[item._index] = optionIndex;
          userAnswer[item._index] = item._options[optionIndex]._index;
        });
        this.set({
          _userAnswer: userAnswer,
          _tempUserAnswer: tempUserAnswer
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var _this = this;

        var numberOfCorrectAnswers = this.get('_items').reduce(function (a, item) {
          var _item$_selected;

          var isCorrect = (_item$_selected = item._selected) === null || _item$_selected === void 0 ? void 0 : _item$_selected._isCorrect;
          item._isCorrect = Boolean(isCorrect);

          if (!isCorrect) {
            return a;
          }

          _this.set('_isAtLeastOneCorrectSelection', true);

          return ++a;
        }, 0);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);

        if (numberOfCorrectAnswers === this.get('_items').length) {
          return true;
        }

        return false;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');

        if (this.get('_isCorrect')) {
          this.set('_score', questionWeight);
          return;
        }

        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var itemLength = this.get('_items').length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: null,
          source: null,
          target: null
        };
        var items = this.get('_items');
        interactions.correctResponsesPattern = [items.map(function (_ref5, questionIndex) {
          var _options = _ref5._options;
          questionIndex++;
          return [questionIndex, _options.filter(function (_ref6) {
            var _isCorrect = _ref6._isCorrect;
            return _isCorrect;
          }).map(function (_ref7) {
            var _index = _ref7._index;
            return "".concat(questionIndex, "_").concat(_index + 1);
          })].join('[.]');
        }).join('[,]')];
        interactions.source = items.map(function (item) {
          return {
            id: "".concat(item._index + 1),
            description: item.text
          };
        }).flat(Infinity);
        interactions.target = items.map(function (_ref8, index) {
          var _options = _ref8._options;
          index++;
          return _options.map(function (option) {
            return {
              id: "".concat(index, "_").concat(option._index + 1),
              description: option.text
            };
          });
        }).flat(Infinity);
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var responses = this.get('_userAnswer').map(function (userAnswer, index) {
          return "".concat(index + 1, ".").concat(userAnswer + 1);
        });
        return responses.join('#');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'matching';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var correctAnswerTemplate = Adapt.course.get('_globals')._components._matching.ariaCorrectAnswer;

        var ariaAnswer = this.get('_items').map(function (item) {
          var correctOption = item._options.find(function (_ref9) {
            var _isCorrect = _ref9._isCorrect;
            return _isCorrect;
          });

          return Handlebars.compile(correctAnswerTemplate)({
            itemText: item.text,
            correctAnswer: correctOption.text
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var userAnswerTemplate = Adapt.course.get('_globals')._components._matching.ariaUserAnswer;

        var answerArray = this.has('_tempUserAnswer') ? this.get('_tempUserAnswer') : this.get('_userAnswer');
        var ariaAnswer = this.get('_items').map(function (item, index) {
          var key = answerArray[index];
          return Handlebars.compile(userAnswerTemplate)({
            itemText: item.text,
            userAnswer: item._options[key].text
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }]);

    return MatchingModel;
  }(QuestionModel$1));

  __AMD("components/adapt-contrib-matching/js/adapt-contrib-matching", Adapt.register('matching', {
    view: MatchingView,
    model: MatchingModel
  }));

  var mepPrototype = $.extend({}, mejs.MediaElementPlayer.prototype);
  $.extend(mejs.MediaElementPlayer.prototype, {
    detectFullscreenMode: function () {
      var vendorPrefix = this.getVendorPrefix();
      var fsEventName = 'on' + vendorPrefix + 'fullscreenchange';

      if (document[fsEventName] === null) {
        document[fsEventName] = function fullScreenEventHandler() {
          var elementName = vendorPrefix === '' ? 'fullscreenElement' : vendorPrefix + 'FullscreenElement';

          if (document[elementName] !== null) {
            $.inview.lock('mediaelement');
            Adapt.trigger('media:fullscreen:enter');
          } else {
            $.inview.unlock('mediaelement');
            Adapt.trigger('media:fullscreen:exit');
          }
        };
      }

      return mepPrototype.detectFullscreenMode.apply(this, arguments);
    },
    getVendorPrefix: function () {
      var browser = Adapt.device.browser;

      if (browser === 'internet explorer') {
        return 'ms';
      }

      if (browser === 'microsoft edge' || browser === 'safari') {
        return 'webkit';
      }

      return '';
    }
  });

  Object.assign(window.mejs.MepDefaults, {
    keyActions: [],
    defaultSeekForwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    },
    defaultSeekBackwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    }
  });

  var purge = function (d) {
    var a = d.attributes;

    if (a) {
      for (var i = a.length - 1; i >= 0; i -= 1) {
        var n = a[i].name;

        if (typeof d[n] === 'function') {
          d[n] = null;
        }
      }
    }

    a = d.childNodes;

    if (a) {
      for (var _i = 0, count = a.length; _i < count; _i += 1) {
        purge(d.childNodes[_i]);
      }
    }
  };

  window.mejs.i18n.locale.language = 'en-US';
  window.mejs.i18n.locale.strings['en-US'] = {};
  var ariaLabelMappings = {
    playText: 'Play',
    pauseText: 'Pause',
    stopText: 'Stop',
    audioPlayerText: 'Audio Player',
    videoPlayerText: 'Video Player',
    tracksText: 'Captions/Subtitles',
    timeSliderText: 'Time Slider',
    muteText: 'Mute Toggle',
    unmuteStatusText: 'Unmute',
    muteStatusText: 'Mute',
    volumeSliderText: 'Volume Slider',
    fullscreenText: 'Fullscreen',
    goFullscreenText: 'Go Fullscreen',
    turnOffFullscreenText: 'Turn off Fullscreen',
    noneText: 'None',
    skipBackText: 'Skip back %1 seconds',
    allyVolumeControlText: 'Use Up/Down Arrow keys to increase or decrease volume.',
    progessHelpText: 'Use Left/Right Arrow keys to advance one second, Up/Down arrows to advance ten seconds.'
  };
  Adapt.on('app:dataReady', function () {
    var _Adapt$course$get, _Adapt$course$get$_co;

    var dynamicLabels = window.mejs.i18n.locale.strings['en-US'];
    var fixedDefaults = window.mejs.MepDefaults;
    var globals = (_Adapt$course$get = Adapt.course.get('_globals')) === null || _Adapt$course$get === void 0 ? void 0 : (_Adapt$course$get$_co = _Adapt$course$get._components) === null || _Adapt$course$get$_co === void 0 ? void 0 : _Adapt$course$get$_co._media;

    for (var k in ariaLabelMappings) {
      var _globals$k;

      dynamicLabels[ariaLabelMappings[k]] = (_globals$k = globals[k]) !== null && _globals$k !== void 0 ? _globals$k : ariaLabelMappings[k];
      fixedDefaults[k] = dynamicLabels[ariaLabelMappings[k]];
    }
  });

  var MediaView = function (_ComponentView) {
    _inherits(MediaView, _ComponentView);

    var _super = _createSuper(MediaView);

    function MediaView() {
      _classCallCheck(this, MediaView);

      return _super.apply(this, arguments);
    }

    _createClass(MediaView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-media-inline-transcript-toggle': 'onToggleInlineTranscript',
          'click .js-media-external-transcript-click': 'onExternalTranscriptClicked',
          'click .js-skip-to-transcript': 'onSkipToTranscript'
        };
      }
    }, {
      key: "className",
      value: function className() {
        var classes = _get(_getPrototypeOf(MediaView.prototype), "className", this).call(this);

        var playerOptions = this.model.get('_playerOptions');

        if (playerOptions !== null && playerOptions !== void 0 && playerOptions.toggleCaptionsButtonWhenOnlyOne) {
          classes += ' toggle-captions';
        }

        return classes;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt, {
          'device:resize': this.onScreenSizeChanged,
          'device:changed': this.onDeviceChanged,
          'media:stop': this.onMediaStop
        });

        _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking', 'onOverlayClick', 'onMediaElementClick', 'onWidgetInview');

        this.model.set({
          _isMediaEnded: false,
          _isMediaPlaying: false
        });
        if (!this.model.get('_media').source) return;
        var media = this.model.get('_media');

        if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {
          media.source = media.source.replace(/^http:/, 'https:');
        }

        this.model.set('_media', media);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setupPlayer();
        this.addMejsButtonClass();
      }
    }, {
      key: "addMejsButtonClass",
      value: function addMejsButtonClass() {
        this.$('.mejs-overlay-button').addClass('icon');
      }
    }, {
      key: "setupPlayer",
      value: function setupPlayer() {
        var _this = this;

        if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});
        var modelOptions = this.model.get('_playerOptions');

        if (modelOptions.pluginPath === undefined) {
          _.extend(modelOptions, {
            pluginPath: 'https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.21.2/',
            flashName: 'flashmediaelement-cdn.swf',
            flashScriptAccess: 'always'
          });
        }

        if (modelOptions.features === undefined) {
          modelOptions.features = ['playpause', 'progress', 'current', 'duration'];

          if (this.model.get('_useClosedCaptions')) {
            modelOptions.features.unshift('tracks');
          }

          if (this.model.get('_allowFullScreen')) {
            modelOptions.features.push('fullscreen');
          }

          if (this.model.get('_showVolumeControl')) {
            modelOptions.features.push('volume');
          }
        }

        modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);

        if (this.model.get('_useClosedCaptions')) {
          var startLanguage = this.model.get('_startLanguage') || 'en';

          if (!OfflineStorage$2.get('captions')) {
            OfflineStorage$2.set('captions', startLanguage);
          }

          modelOptions.startLanguage = this.checkForSupportedCCLanguage(OfflineStorage$2.get('captions'));
        }

        if (modelOptions.alwaysShowControls === undefined) {
          modelOptions.alwaysShowControls = false;
        }

        if (modelOptions.hideVideoControlsOnLoad === undefined) {
          modelOptions.hideVideoControlsOnLoad = true;
        }

        this.addMediaTypeClass();
        this.addThirdPartyFixes(modelOptions, function () {
          _this.$('audio, video').mediaelementplayer(modelOptions);

          _this.cleanUpPlayer();

          var _media = _this.model.get('_media');

          if (!_media.mp3 && !_media.mp4 && !_media.ogv && !_media.webm && !_media.source) {
            logging.warn('ERROR! No media is selected in components.json for component ' + _this.model.get('_id'));

            _this.setReadyStatus();

            return;
          }

          if (!_media.source) return;

          _this.$('.media__widget').addClass('external-source');
        });
      }
    }, {
      key: "addMediaTypeClass",
      value: function addMediaTypeClass() {
        var media = this.model.get('_media');
        if (!(media !== null && media !== void 0 && media.type)) return;
        var typeClass = media.type.replace(/\//, '-');
        this.$('.media__widget').addClass(typeClass);
      }
    }, {
      key: "addThirdPartyFixes",
      value: function addThirdPartyFixes(modelOptions, callback) {
        var media = this.model.get('_media');
        if (!media) return callback();

        if (media.mp3 || media.ogg) {
          modelOptions.alwaysShowControls = true;
        }

        switch (media.type) {
          case 'video/vimeo':
            modelOptions.alwaysShowControls = false;
            modelOptions.hideVideoControlsOnLoad = true;
            modelOptions.features = [];
            if (MediaView.froogaloopAdded) return callback();
            $.getScript('assets/froogaloop.js').done(function () {
              MediaView.froogaloopAdded = true;
              callback();
            }).fail(function () {
              MediaView.froogaloopAdded = false;
              logging.error('Could not load froogaloop.js');
            });
            break;

          default:
            callback();
        }
      }
    }, {
      key: "cleanUpPlayer",
      value: function cleanUpPlayer() {
        this.$('.media__widget').children('.mejs-offscreen').remove();
        this.$('[role=application]').removeAttr('role tabindex');
        this.$('[aria-controls]').removeAttr('aria-controls');
        this.$('.mejs-overlay-play').attr('aria-hidden', 'true');
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.completionEvent = this.model.get('_setCompletionOn') || 'play';

        if (this.completionEvent === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }

        if (this.model.get('_preventForwardScrubbing') && !this.model.get('_isComplete')) {
          $(this.mediaElement).on({
            seeking: this.onMediaElementSeeking,
            timeupdate: this.onMediaElementTimeUpdate
          });
        }

        $(this.mediaElement).on({
          play: this.onMediaElementPlay,
          pause: this.onMediaElementPause,
          ended: this.onMediaElementEnded
        });

        _.delay(this.listenForCaptionsChange.bind(this), 250);
      }
    }, {
      key: "listenForCaptionsChange",
      value: function listenForCaptionsChange() {
        var _this2 = this;

        if (!this.model.get('_useClosedCaptions')) return;
        var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
        this.$(selector).on('click.mediaCaptionsChange', _.debounce(function () {
          var srclang = _this2.mediaElement.player.selectedTrack ? _this2.mediaElement.player.selectedTrack.srclang : 'none';
          OfflineStorage$2.set('captions', srclang);
          Adapt.trigger('media:captionsChange', _this2, srclang);
        }, 250));
        this.listenTo(Adapt, 'media:captionsChange', this.onCaptionsChanged);
      }
    }, {
      key: "onCaptionsChanged",
      value: function onCaptionsChanged(view, lang) {
        if ((view === null || view === void 0 ? void 0 : view.cid) === this.cid) return;
        lang = this.checkForSupportedCCLanguage(lang);
        this.mediaElement.player.setTrack(lang);
        var $inputs = this.$('.mejs-captions-selector input');
        $inputs.filter(':checked').prop('checked', false);
        $inputs.filter("[value=\"".concat(lang, "\"]")).prop('checked', true);
      }
    }, {
      key: "checkForSupportedCCLanguage",
      value: function checkForSupportedCCLanguage(lang) {
        if (!lang || lang === 'none') return 'none';
        if (_.findWhere(this.model.get('_media').cc, {
          srclang: lang
        })) return lang;
        return this.model.get('_startLanguage') || 'none';
      }
    }, {
      key: "onMediaElementPlay",
      value: function onMediaElementPlay(event) {
        this.queueGlobalEvent('play');
        Adapt.trigger('media:stop', this);

        if (this.model.get('_pauseWhenOffScreen')) {
          this.$('.mejs-container').on('inview', this.onWidgetInview);
        }

        this.model.set({
          _isMediaPlaying: true,
          _isMediaEnded: false
        });
        if (this.completionEvent !== 'play') return;
        this.setCompletionStatus();
      }
    }, {
      key: "onMediaElementPause",
      value: function onMediaElementPause(event) {
        this.queueGlobalEvent('pause');
        this.$('.mejs-container').off('inview', this.onWidgetInview);
        this.model.set('_isMediaPlaying', false);
      }
    }, {
      key: "onMediaElementEnded",
      value: function onMediaElementEnded(event) {
        this.queueGlobalEvent('ended');
        this.model.set('_isMediaEnded', true);

        if (this.completionEvent === 'ended') {
          this.setCompletionStatus();
        }
      }
    }, {
      key: "onWidgetInview",
      value: function onWidgetInview(event, isInView) {
        if (!isInView && !this.mediaElement.paused) this.mediaElement.player.pause();
      }
    }, {
      key: "onMediaElementSeeking",
      value: function onMediaElementSeeking(event) {
        var maxViewed = this.model.get('_maxViewed');

        if (!maxViewed) {
          maxViewed = 0;
        }

        if (event.target.currentTime <= maxViewed) return;
        event.target.currentTime = maxViewed;
      }
    }, {
      key: "onMediaElementTimeUpdate",
      value: function onMediaElementTimeUpdate(event) {
        var maxViewed = this.model.get('_maxViewed');

        if (!maxViewed) {
          maxViewed = 0;
        }

        if (event.target.currentTime <= maxViewed) return;
        this.model.set('_maxViewed', event.target.currentTime);
      }
    }, {
      key: "setupPlayPauseToggle",
      value: function setupPlayPauseToggle() {
        var player = this.mediaElement.player;

        if (!player) {
          logging.warn('MediaView.setupPlayPauseToggle: OOPS! there is no player reference.');
          return;
        }

        player.options.clickToPlayPause = false;
        this.$('.mejs-overlay-button').on('click', this.onOverlayClick);
        this.$('.mejs-mediaelement').on('click', this.onMediaElementClick);
      }
    }, {
      key: "onMediaStop",
      value: function onMediaStop(view) {
        if ((view === null || view === void 0 ? void 0 : view.cid) === this.cid) return;
        if (!this.mediaElement || !this.mediaElement.player) return;
        this.mediaElement.player.pause();
      }
    }, {
      key: "onOverlayClick",
      value: function onOverlayClick() {
        var player = this.mediaElement.player;
        if (!player) return;
        player.play();
      }
    }, {
      key: "onMediaElementClick",
      value: function onMediaElementClick(event) {
        var player = this.mediaElement.player;
        if (!player) return;
        var isPaused = player.media.paused;
        if (!isPaused) player.pause();
      }
    }, {
      key: "remove",
      value: function remove() {
        this.$('.mejs-overlay-button').off('click', this.onOverlayClick);
        this.$('.mejs-mediaelement').off('click', this.onMediaElementClick);
        this.$('.mejs-container').off('inview', this.onWidgetInview);

        if (this.model.get('_useClosedCaptions')) {
          var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
          this.$(selector).off('click.mediaCaptionsChange');
        }

        var modelOptions = this.model.get('_playerOptions');
        delete modelOptions.success;
        var media = this.model.get('_media');

        if (media) {
          switch (media.type) {
            case 'video/vimeo':
              this.$('iframe')[0].isRemoved = true;
          }
        }

        if (this.mediaElement && this.mediaElement.player) {
          var playerId = this.mediaElement.player.id;
          purge(this.$el[0]);
          this.mediaElement.player.remove();

          if (window.mejs.players[playerId]) {
            delete window.mejs.players[playerId];
          }
        }

        if (this.mediaElement) {
          $(this.mediaElement).off({
            play: this.onMediaElementPlay,
            pause: this.onMediaElementPause,
            ended: this.onMediaElementEnded,
            seeking: this.onMediaElementSeeking,
            timeupdate: this.onMediaElementTimeUpdate
          });
          this.mediaElement.src = '';
          $(this.mediaElement.pluginElement).remove();
          delete this.mediaElement;
        }

        _get(_getPrototypeOf(MediaView.prototype), "remove", this).call(this);
      }
    }, {
      key: "onDeviceChanged",
      value: function onDeviceChanged() {
        if (!this.model.get('_media').source) return;
        this.$('.mejs-container').width(this.$('.component__widget').width());
      }
    }, {
      key: "onPlayerReady",
      value: function onPlayerReady(mediaElement, domObject) {
        this.mediaElement = mediaElement;
        var player = this.mediaElement.player;
        if (!player) player = window.mejs.players[this.$('.mejs-container').attr('id')];
        var hasTouch = window.mejs.MediaFeatures.hasTouch;

        if (hasTouch) {
          this.setupPlayPauseToggle();
        }

        this.addThirdPartyAfterFixes();
        this.cleanUpPlayerAfter();

        if (player && this.model.has('_startVolume')) {
          player.setVolume(parseInt(this.model.get('_startVolume')) / 100);
        }

        this.setReadyStatus();
        this.setupEventListeners();
      }
    }, {
      key: "addThirdPartyAfterFixes",
      value: function addThirdPartyAfterFixes() {
        var media = this.model.get('_media');

        switch (media.type) {
          case 'video/vimeo':
            this.$('.mejs-container').attr('tabindex', 0);
        }
      }
    }, {
      key: "cleanUpPlayerAfter",
      value: function cleanUpPlayerAfter() {
        this.$("[aria-valuemax='NaN']").attr('aria-valuemax', 0);
      }
    }, {
      key: "onScreenSizeChanged",
      value: function onScreenSizeChanged() {
        this.$('audio, video').width(this.$('.component__widget').width());
      }
    }, {
      key: "onSkipToTranscript",
      value: function onSkipToTranscript() {
        var _this3 = this;

        _.delay(function () {
          a11y.focus(_this3.$('.media__transcript-btn'));
        }, 250);
      }
    }, {
      key: "onToggleInlineTranscript",
      value: function onToggleInlineTranscript(event) {
        if (event) event.preventDefault();
        var $transcriptBodyContainer = this.$('.media__transcript-body-inline');
        var $button = this.$('.media__transcript-btn-inline');
        var $buttonText = this.$('.media__transcript-btn-inline .media__transcript-btn-text');

        if ($transcriptBodyContainer.hasClass('inline-transcript-open')) {
          $transcriptBodyContainer.stop(true, true).slideUp(function () {
            $(window).resize();
          }).removeClass('inline-transcript-open');
          $button.attr('aria-expanded', false);
          $buttonText.html(this.model.get('_transcript').inlineTranscriptButton);
          return;
        }

        $transcriptBodyContainer.stop(true, true).slideDown(function () {
          $(window).resize();
        }).addClass('inline-transcript-open');
        $button.attr('aria-expanded', true);
        $buttonText.html(this.model.get('_transcript').inlineTranscriptCloseButton);

        if (this.model.get('_transcript')._setCompletionOnView !== false) {
          this.setCompletionStatus();
        }
      }
    }, {
      key: "onExternalTranscriptClicked",
      value: function onExternalTranscriptClicked(event) {
        if (this.model.get('_transcript')._setCompletionOnView === false) return;
        this.setCompletionStatus();
      }
    }, {
      key: "queueGlobalEvent",
      value: function queueGlobalEvent(eventType) {
        var time = Date.now();
        var lastEvent = this.lastEvent || {
          time: 0
        };
        var timeSinceLastEvent = time - lastEvent.time;
        var debounceTime = 500;
        this.lastEvent = {
          time: time,
          type: eventType
        };
        clearTimeout(this.eventTimeout);

        if (eventType === 'ended') {
          return this.triggerGlobalEvent(eventType);
        }

        if (timeSinceLastEvent <= debounceTime) return;
        this.eventTimeout = setTimeout(this.triggerGlobalEvent.bind(this, eventType), debounceTime);
      }
    }, {
      key: "triggerGlobalEvent",
      value: function triggerGlobalEvent(eventType) {
        var player = this.mediaElement.player;
        var eventObj = {
          type: eventType,
          src: this.mediaElement.src,
          platform: this.mediaElement.pluginType
        };
        if (player) eventObj.isVideo = player.isVideo;
        Adapt.trigger('media', eventObj);
      }
    }]);

    return MediaView;
  }(ComponentView$1);

  MediaView.froogaloopAdded = false;
  var MediaView$1 = __AMD("components/adapt-contrib-media/js/mediaView", MediaView);

  __AMD("components/adapt-contrib-media/js/adapt-contrib-media", Adapt.register('media', {
    model: ComponentModel$1.extend({}),
    view: MediaView$1
  }));

  var NarrativeModel = __AMD("components/adapt-contrib-narrative/js/NarrativeModel", function (_ItemsComponentModel) {
    _inherits(NarrativeModel, _ItemsComponentModel);

    var _super = _createSuper(NarrativeModel);

    function NarrativeModel() {
      _classCallCheck(this, NarrativeModel);

      return _super.apply(this, arguments);
    }

    return NarrativeModel;
  }(ItemsComponentModel));

  var MODE = __AMD("components/adapt-contrib-narrative/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var NarrativeView = function (_ComponentView) {
    _inherits(NarrativeView, _ComponentView);

    var _super = _createSuper(NarrativeView);

    function NarrativeView() {
      _classCallCheck(this, NarrativeView);

      return _super.apply(this, arguments);
    }

    _createClass(NarrativeView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-narrative-strapline-open-popup': 'openPopup',
          'click .js-narrative-controls-click': 'onNavigationClicked',
          'click .js-narrative-progress-click': 'onProgressClicked',
          'swipeleft .js-narrative-swipe': 'onSwipeLeft',
          'swiperight .js-narrative-swipe': 'onSwipeRight'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NarrativeView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this._isInitial = true;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt, {
          'device:changed device:resize': this.reRender,
          'notify:closed': this.closeNotify
        });
        this.renderMode();
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.calculateWidths();
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;

        if (this.isTextBelowImage()) {
          item.toggleVisited(true);
        }

        this.setStage(item);
        this.setFocus(item.get('_index'));
      }
    }, {
      key: "setFocus",
      value: function setFocus(itemIndex) {
        var _this = this;

        if (this._isInitial) return;
        var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
        var hasStraplineTransition = !this.isLargeMode() && $straplineHeaderElm.css('transitionDuration') !== '0s';

        if (hasStraplineTransition) {
          $straplineHeaderElm.one('transitionend', function () {
            _this.focusOnNarrativeElement(itemIndex);
          });
          return;
        }

        this.focusOnNarrativeElement(itemIndex);
      }
    }, {
      key: "focusOnNarrativeElement",
      value: function focusOnNarrativeElement(itemIndex) {
        var dataIndexAttr = "[data-index='".concat(itemIndex, "']");
        var $elementToFocus = this.isLargeMode() ? this.$(".narrative__content-item".concat(dataIndexAttr)) : this.$(".narrative__strapline-btn".concat(dataIndexAttr));
        a11y.focusFirst($elementToFocus);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "calculateMode",
      value: function calculateMode() {
        var mode = device.screenSize === 'large' ? MODE.LARGE : MODE.SMALL;
        this.model.set('_mode', mode);
      }
    }, {
      key: "renderMode",
      value: function renderMode() {
        this.calculateMode();
        var isLargeMode = this.isLargeMode();
        var isTextBelowImage = this.isTextBelowImage();
        this.$el.toggleClass('mode-large', isLargeMode).toggleClass('mode-small', !isLargeMode).toggleClass('items-are-full-width', isTextBelowImage);
      }
    }, {
      key: "isLargeMode",
      value: function isLargeMode() {
        return this.model.get('_mode') === MODE.LARGE;
      }
    }, {
      key: "isTextBelowImage",
      value: function isTextBelowImage() {
        var isTextBelowImage = device.screenSize === 'large' ? this.model.get('_isTextBelowImage') : this.model.get('_isMobileTextBelowImage');
        return Boolean(isTextBelowImage);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.renderMode();
        this.setupNarrative();
        this.$('.narrative__slider').imageready(this.setReadyStatus.bind(this));

        if (Adapt.config.get('_disableAnimation')) {
          this.$el.addClass('disable-animation');
        }
      }
    }, {
      key: "setupNarrative",
      value: function setupNarrative() {
        this.renderMode();
        var items = this.model.getChildren();
        if (!items || !items.length) return;
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          activeItem = this.model.getItem(0);
          activeItem.toggleActive(true);
        } else {
          items.trigger('change:_isActive', activeItem, true);
        }

        this.calculateWidths();

        if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {
          this.replaceInstructions();
        }

        this.setupEventListeners();
        this._isInitial = false;
      }
    }, {
      key: "calculateWidths",
      value: function calculateWidths() {
        var itemCount = this.model.getChildren().length;
        this.model.set({
          _totalWidth: 100 * itemCount,
          _itemWidth: 100 / itemCount
        });
      }
    }, {
      key: "resizeControl",
      value: function resizeControl() {
        var previousMode = this.model.get('_mode');
        this.renderMode();
        if (previousMode !== this.model.get('_mode')) this.replaceInstructions();
        this.evaluateNavigation();
        var activeItem = this.model.getActiveItem();
        if (activeItem) this.setStage(activeItem);
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {
          this.replaceWithHotgraphic();
          return;
        }

        this.resizeControl();
      }
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        this.evaluateCompletion();
      }
    }, {
      key: "replaceInstructions",
      value: function replaceInstructions() {
        if (this.isLargeMode()) {
          this.$('.narrative__instruction-inner').html(this.model.get('instruction'));
          return;
        }

        if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {
          this.$('.narrative__instruction-inner').html(this.model.get('mobileInstruction'));
        }
      }
    }, {
      key: "replaceWithHotgraphic",
      value: function replaceWithHotgraphic() {
        var HotgraphicView = Adapt.getViewClass('hotgraphic');
        if (!HotgraphicView) return;
        var model = this.prepareHotgraphicModel();
        var newHotgraphic = new HotgraphicView({
          model: model
        });
        this.$el.parents('.component__container').append(newHotgraphic.$el);
        this.remove();

        _.defer(function () {
          Adapt.trigger('device:resize');
        });
      }
    }, {
      key: "prepareHotgraphicModel",
      value: function prepareHotgraphicModel() {
        var model = this.model;
        model.resetActiveItems();
        model.set({
          _isPopupOpen: false,
          _component: 'hotgraphic',
          body: model.get('originalBody'),
          instruction: model.get('originalInstruction')
        });
        return model;
      }
    }, {
      key: "moveSliderToIndex",
      value: function moveSliderToIndex(itemIndex) {
        var offset = this.model.get('_itemWidth') * itemIndex;

        if (Adapt.config.get('_defaultDirection') === 'ltr') {
          offset *= -1;
        }

        var cssValue = "translateX(".concat(offset, "%)");
        var $sliderElm = this.$('.narrative__slider');
        var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
        $sliderElm.css('transform', cssValue);
        $straplineHeaderElm.css('transform', cssValue);
      }
    }, {
      key: "setStage",
      value: function setStage(item) {
        var index = item.get('_index');
        var indexSelector = "[data-index=\"".concat(index, "\"]");

        if (this.isLargeMode()) {
          item.toggleVisited(true);
        }

        this.$('.narrative__progress').removeClass('is-selected').filter(indexSelector).addClass('is-selected');
        var $slideGraphics = this.$('.narrative__slider-image-container');
        a11y.toggleAccessibleEnabled($slideGraphics, false);
        a11y.toggleAccessibleEnabled($slideGraphics.filter(indexSelector), true);
        var $narrativeItems = this.$('.narrative__content-item');
        $narrativeItems.addClass('u-visibility-hidden u-display-none');
        a11y.toggleAccessible($narrativeItems, false);
        a11y.toggleAccessible($narrativeItems.filter(indexSelector).removeClass('u-visibility-hidden u-display-none'), true);
        var $narrativeStraplineButtons = this.$('.narrative__strapline-btn');
        a11y.toggleAccessibleEnabled($narrativeStraplineButtons, false);
        a11y.toggleAccessibleEnabled($narrativeStraplineButtons.filter(indexSelector), true);
        this.evaluateNavigation();
        this.evaluateCompletion();
        this.shouldShowInstructionError();
        this.moveSliderToIndex(index);
      }
    }, {
      key: "evaluateNavigation",
      value: function evaluateNavigation() {
        var active = this.model.getActiveItem();
        if (!active) return;
        var index = active.get('_index');
        var itemCount = this.model.getChildren().length;
        var isAtStart = index === 0;
        var isAtEnd = index === itemCount - 1;
        var $left = this.$('.narrative__controls-left');
        var $right = this.$('.narrative__controls-right');
        var globals = Adapt.course.get('_globals');
        var ariaLabelsGlobals = globals._accessibility._ariaLabels;
        var narrativeGlobals = globals._components._narrative;
        var ariaLabelPrevious = narrativeGlobals.previous || ariaLabelsGlobals.previous;
        var ariaLabelNext = narrativeGlobals.next || ariaLabelsGlobals.next;
        var prevTitle = isAtStart ? '' : this.model.getItem(index - 1).get('title');
        var nextTitle = isAtEnd ? '' : this.model.getItem(index + 1).get('title');
        $left.toggleClass('u-visibility-hidden', isAtStart);
        $right.toggleClass('u-visibility-hidden', isAtEnd);
        $left.attr('aria-label', Handlebars.helpers.compile_a11y_normalize(ariaLabelPrevious, {
          title: prevTitle,
          _globals: globals,
          itemNumber: isAtStart ? null : index,
          totalItems: itemCount
        }));
        $right.attr('aria-label', Handlebars.helpers.compile_a11y_normalize(ariaLabelNext, {
          title: nextTitle,
          _globals: globals,
          itemNumber: isAtEnd ? null : index + 2,
          totalItems: itemCount
        }));
      }
    }, {
      key: "evaluateCompletion",
      value: function evaluateCompletion() {
        if (this.model.areAllItemsCompleted()) {
          this.trigger('allItems');
          this.$('.narrative__instruction-inner').removeClass('instruction-error');
        }
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        var currentItem = this.model.getActiveItem();
        Adapt.notify.popup({
          title: currentItem.get('title'),
          body: currentItem.get('body')
        });
        Adapt.on('popup:opened', function () {
          currentItem.toggleVisited(true);
        });
      }
    }, {
      key: "onNavigationClicked",
      value: function onNavigationClicked(event) {
        var $btn = $(event.currentTarget);
        var index = this.model.getActiveItem().get('_index');
        $btn.data('direction') === 'right' ? index++ : index--;
        this.model.setActiveItem(index);
      }
    }, {
      key: "onSwipeLeft",
      value: function onSwipeLeft() {
        var index = this.model.getActiveItem().get('_index');
        this.model.setActiveItem(++index);
      }
    }, {
      key: "onSwipeRight",
      value: function onSwipeRight() {
        var index = this.model.getActiveItem().get('_index');
        this.model.setActiveItem(--index);
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        var index = $(event.target).data('index');
        this.model.setActiveItem(index);
      }
    }, {
      key: "shouldShowInstructionError",
      value: function shouldShowInstructionError() {
        var prevItemIndex = this.model.getActiveItem().get('_index') - 1;
        if (prevItemIndex < 0 || this.model.getItem(prevItemIndex).get('_isVisited')) return;
        this.$('.narrative__instruction-inner').addClass('instruction-error');
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }
      }
    }]);

    return NarrativeView;
  }(ComponentView$1);

  NarrativeView.template = 'narrative';
  var NarrativeView$1 = __AMD("components/adapt-contrib-narrative/js/NarrativeView", NarrativeView);

  __AMD("components/adapt-contrib-narrative/js/adapt-contrib-narrative", Adapt.register('narrative', {
    model: NarrativeModel,
    view: NarrativeView$1
  }));

  var SliderView = __AMD("components/adapt-contrib-slider/js/sliderView", function (_QuestionView) {
    _inherits(SliderView, _QuestionView);

    var _super = _createSuper(SliderView);

    function SliderView() {
      _classCallCheck(this, SliderView);

      return _super.apply(this, arguments);
    }

    _createClass(SliderView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-slider-number-click': 'onNumberSelected',
          'focus .js-slider-item-input': 'onHandleFocus',
          'blur .js-slider-item-input': 'onHandleBlur'
        };
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        if (this.model.get('_isSubmitted')) return;
        this.selectItem(this.getIndexFromValue(this.model.get('_selectedItem').value));
      }
    }, {
      key: "setupRangeslider",
      value: function setupRangeslider() {
        this.$sliderScaleMarker = this.$('.js-slider-number-selection');
        this.$slider = this.$('.js-slider-item-input');

        if (this.model.has('_scaleStep')) {
          this.$slider.attr({
            step: this.model.get('_scaleStep')
          });
        }

        this.$slider.rangeslider({
          polyfill: false,
          onSlide: this.handleSlide.bind(this)
        });
        this.oldValue = 0;

        if (this._deferEnable) {
          this.setAllItemsEnabled();
        }
      }
    }, {
      key: "handleSlide",
      value: function handleSlide(position, value) {
        if (this.oldValue === value) {
          return;
        }

        var itemIndex = this.getIndexFromValue(value);
        var pixels = this.mapIndexToPixels(itemIndex);
        this.selectItem(itemIndex);
        this.animateToPosition(pixels);
        this.oldValue = value;
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled() {
        var isEnabled = this.model.get('_isEnabled');

        if (!this.$slider) {
          this._deferEnable = true;
          return;
        }

        this.$('.slider__widget').toggleClass('is-disabled', !isEnabled);
        this.$slider.prop('disabled', !isEnabled).rangeslider('update', true);
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setupRangeslider();
        this.setScalePositions();
        this.onScreenSizeChanged();
        this.showScaleMarker(true);
        this.listenTo(Adapt, 'device:resize', this.onScreenSizeChanged);
        this.setReadyStatus();
      }
    }, {
      key: "animateToPosition",
      value: function animateToPosition(newPosition) {
        if (!this.$sliderScaleMarker) return;
        this.$sliderScaleMarker.velocity('stop').velocity({
          left: newPosition
        }, {
          duration: 200,
          easing: 'linear',
          mobileHA: false
        });
      }
    }, {
      key: "getIndexFromValue",
      value: function getIndexFromValue(itemValue) {
        var scaleStart = this.model.get('_scaleStart');
        var scaleEnd = this.model.get('_scaleEnd');
        return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));
      }
    }, {
      key: "mapIndexToPixels",
      value: function mapIndexToPixels(value, $widthObject) {
        var numberOfItems = this.model.get('_items').length;
        var width = $widthObject ? $widthObject.width() : this.$('.js-slider-scale').width();
        return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));
      }
    }, {
      key: "mapPixelsToIndex",
      value: function mapPixelsToIndex(value) {
        var numberOfItems = this.model.get('_items').length;
        var width = this.$('.slider-sliderange').width();
        return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));
      }
    }, {
      key: "normalise",
      value: function normalise(value, low, high) {
        var range = high - low;
        return (value - low) / range;
      }
    }, {
      key: "mapValue",
      value: function mapValue(value, inputLow, inputHigh, outputLow, outputHigh) {
        var normal = this.normalise(value, inputLow, inputHigh);
        return normal * (outputHigh - outputLow) + outputLow;
      }
    }, {
      key: "onHandleFocus",
      value: function onHandleFocus(event) {
        event.preventDefault();
        this.$slider.on('keydown', this.onKeyDown.bind(this));
      }
    }, {
      key: "onHandleBlur",
      value: function onHandleBlur(event) {
        event.preventDefault();
        this.$slider.off('keydown');
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        if (event.which === 9) return;
        event.preventDefault();
        var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);

        switch (event.which) {
          case 40:
          case 37:
            newItemIndex = Math.max(newItemIndex - 1, 0);
            break;

          case 38:
          case 39:
            newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);
            break;
        }

        this.selectItem(newItemIndex);
        if (typeof newItemIndex === 'number') this.showScaleMarker(true);
        this.animateToPosition(this.mapIndexToPixels(newItemIndex));
        this.setSliderValue(this.getValueFromIndex(newItemIndex));
      }
    }, {
      key: "onNumberSelected",
      value: function onNumberSelected(event) {
        event.preventDefault();

        if (this.model.get('_isInteractionComplete')) {
          return;
        }

        if (this.$slider.prop('disabled')) {
          return;
        }

        var itemValue = parseFloat($(event.currentTarget).attr('data-id'));
        var index = this.getIndexFromValue(itemValue);
        this.selectItem(index);
        this.animateToPosition(this.mapIndexToPixels(index));
        this.setSliderValue(itemValue);
      }
    }, {
      key: "getValueFromIndex",
      value: function getValueFromIndex(index) {
        return this.model.get('_items')[index].value;
      }
    }, {
      key: "resetControlStyles",
      value: function resetControlStyles() {
        this.$('.slider-handle').empty();
        this.showScaleMarker(false);
        this.$('.slider-bar').animate({
          width: '0'
        });
        this.setSliderValue(this.model.get('_items')[0].value);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "setSliderValue",
      value: function setSliderValue(value) {
        if (!this.$slider) return;
        this.$slider.val(value).change();
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.get('_canShowMarking')) return;
        this.$('.slider__widget').removeClass('is-correct is-incorrect').addClass(this.model.get('_selectedItem').correct ? 'is-correct' : 'is-incorrect');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.selectItem(0);
        this.animateToPosition(0);
        this.resetControlStyles();
        this.showScaleMarker(true);
      }
    }, {
      key: "setScalePositions",
      value: function setScalePositions() {
        var _this = this;

        var numberOfItems = this.model.get('_items').length;
        this.model.get('_items').forEach(function (item, index) {
          var normalisedPosition = _this.normalise(index, 0, numberOfItems - 1);

          _this.$('.js-slider-number').eq(index).data('normalisedPosition', normalisedPosition);
        });
      }
    }, {
      key: "showScale",
      value: function showScale() {
        var $markers = this.$('.js-slider-scale-notch-container').empty();

        if (this.model.get('_showScale') === false) {
          $markers.eq(0).addClass('u-display-none');
          this.$('.js-slider-number').addClass(this.model.get('_showScaleIndicator') ? 'u-visibility-hidden' : 'u-display-none');
          return;
        }

        var $scaler = this.$('.js-slider-scale');

        for (var i = 1, count = this.model.get('_items').length - 1; i < count; i++) {
          $markers.append("<div class=\"slider__scale-notch\" style=\"left: ".concat(this.mapIndexToPixels(i, $scaler), "px\">"));
        }

        this.showScaleNumbers();
      }
    }, {
      key: "showScaleNumbers",
      value: function showScaleNumbers() {
        var $scaler = this.$('.js-slider-scale');
        var $numbers = this.$('.js-slider-number');

        if (this.model.get('_showScaleNumbers') === false) {
          $numbers.addClass('u-display-none');
          return;
        }

        var scaleWidth = $scaler.width();
        this.model.get('_items').forEach(function (item, index) {
          var $number = $numbers.eq(index);
          var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);
          $number.css({
            left: newLeft
          });
        });
      }
    }, {
      key: "showLabels",
      value: function showLabels() {
        if (this.model.get('labelStart') || this.model.get('labelEnd')) return;
        this.$('.js-slider-label-container').eq(0).addClass('u-display-none');
      }
    }, {
      key: "remapSliderBar",
      value: function remapSliderBar() {
        var $scaler = this.$('.js-slider-scale');
        var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);
        var left = this.mapIndexToPixels(currentIndex, $scaler);
        this.$('.slider-handle').css({
          left: "".concat(left, "px")
        });
        this.$('.js-slider-number-selection').css({
          left: "".concat(left, "px")
        });
        this.$('.slider-bar').width(left);
      }
    }, {
      key: "onScreenSizeChanged",
      value: function onScreenSizeChanged() {
        this.showScale();
        this.showLabels();
        this.remapSliderBar();

        if (this.$('.slider__widget').hasClass('show-user-answer')) {
          this.hideCorrectAnswer();
        } else if (this.$('.slider__widget').hasClass('show-correct-answer')) {
          this.showCorrectAnswer();
        }
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.showScaleMarker(false);
        var answers = this.model.getCorrectAnswers();

        if (answers.length === 0) {
          console.log('adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON');
          return;
        }

        var middleAnswer = answers[Math.floor(answers.length / 2)];
        this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));
        this.showModelAnswers(answers);
        this.setSliderValue(middleAnswer);
      }
    }, {
      key: "showModelAnswers",
      value: function showModelAnswers(correctAnswerArray) {
        var _this2 = this;

        var $parentDiv = this.$('.js-slider-model-range');
        correctAnswerArray.forEach(function (correctAnswer, index) {
          $parentDiv.append($('<div class="slider__number-model-answer">'));

          var $element = _this2.$('.js-slider-model-range .slider__number-model-answer').eq(index);

          var startingLeft = _this2.mapIndexToPixels(_this2.getIndexFromValue(_this2.model.get('_selectedItem').value));

          if (_this2.model.get('_showNumber')) $element.html(correctAnswer);
          $element.css({
            left: startingLeft
          }).fadeIn(0, function () {
            $element.animate({
              left: _this2.mapIndexToPixels(_this2.getIndexFromValue(correctAnswer))
            });
          });
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));
        this.$('.js-slider-model-range').empty();
        this.showScaleMarker(true);
        this.selectItem(userAnswerIndex);
        this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));
        this.setSliderValue(this.model.get('_userAnswer'));
      }
    }, {
      key: "selectItem",
      value: function selectItem(itemIndex) {
        this.model.deselectAllItems();
        var item = this.model.get('_items')[itemIndex];
        if (!item) return;
        item.selected = true;
        this.model.set('_selectedItem', item);
        this.$('.js-slider-item-input').attr({
          value: item.value,
          'aria-valuenow': item.value
        });
        this.showNumber(true);
      }
    }, {
      key: "showScaleMarker",
      value: function showScaleMarker(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showScaleIndicator')) {
          this.showNumber(show);
          $scaleMarker.toggleClass('display-block', show);
        }
      }
    }, {
      key: "showNumber",
      value: function showNumber(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showNumber')) {
          if (show) {
            $scaleMarker.html(this.model.get('_selectedItem').value);
          } else {
            $scaleMarker.html = '';
          }
        }
      }
    }]);

    return SliderView;
  }(QuestionView$1));

  var SliderModel = __AMD("components/adapt-contrib-slider/js/sliderModel", function (_QuestionModel) {
    _inherits(SliderModel, _QuestionModel);

    var _super = _createSuper(SliderModel);

    function SliderModel() {
      _classCallCheck(this, SliderModel);

      return _super.apply(this, arguments);
    }

    _createClass(SliderModel, [{
      key: "init",
      value: function init() {
        QuestionModel$1.prototype.init.call(this);
        this.setupModelItems();
        this.selectDefaultItem();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(SliderModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.deselectAllItems();
        this.selectDefaultItem();
        return true;
      }
    }, {
      key: "selectDefaultItem",
      value: function selectDefaultItem() {
        this.set('_selectedItem', this.get('_items')[0]);
      }
    }, {
      key: "getDecimalPlaces",
      value: function getDecimalPlaces(num) {
        return (num.toString().split('.')[1] || []).length;
      }
    }, {
      key: "setupModelItems",
      value: function setupModelItems() {
        var items = [];
        var answer = this.get('_correctAnswer');
        var range = this.get('_correctRange');
        var start = this.get('_scaleStart');
        var end = this.get('_scaleEnd');
        var step = this.get('_scaleStep') || 1;
        var dp = this.getDecimalPlaces(step);

        for (var i = start; i <= end; i += step) {
          if (dp !== 0) {
            i = parseFloat(i.toFixed(dp));
          }

          items.push({
            value: i,
            selected: false,
            correct: answer ? i === Number(answer) : i >= range._bottom && i <= range._top
          });
        }

        this.set({
          _items: items,
          _marginDir: Adapt.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'
        });
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return true;
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) {
          this.set({
            _userAnswer: undefined
          });
          this.selectDefaultItem();
          return;
        }

        var items = this.get('_items');
        var userAnswer = this.get('_userAnswer');
        var selectedItem = items.find(function (_ref) {
          var value = _ref.value;
          return value === userAnswer;
        });

        if (selectedItem) {
          selectedItem.selected = true;
          this.set('_selectedItem', selectedItem);
        }

        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        this.set('_userAnswer', this.get('_selectedItem').value);
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set({
          _isAtLeastOneCorrectSelection: false,
          _userAnswer: undefined
        });
        this.selectDefaultItem();
      }
    }, {
      key: "deselectAllItems",
      value: function deselectAllItems() {
        this.get('_items').forEach(function (item) {
          return item.selected = false;
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var numberOfCorrectAnswers = this.get('_items').filter(function (_ref2) {
          var selected = _ref2.selected,
              correct = _ref2.correct;
          return selected && correct;
        }).length;
        this.set('_isAtLeastOneCorrectSelection', numberOfCorrectAnswers > 0);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var questionWeight = this.get('_questionWeight');
        var score = questionWeight * numberOfCorrectAnswers;
        this.set('_score', score);
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        return this.get('_userAnswer').toString();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'numeric';
      }
    }, {
      key: "getCorrectAnswers",
      value: function getCorrectAnswers() {
        var answerSingle = this.get('_correctAnswer');
        var answers = [];

        if (answerSingle) {
          return [answerSingle];
        }

        var answerMultiple = this.get('_correctRange');

        if (!answerMultiple) {
          return answers;
        }

        var bottom = answerMultiple._bottom;
        var top = answerMultiple._top;

        if (bottom === undefined || top === undefined) {
          return answers;
        }

        var answer = bottom;
        var step = this.get('_scaleStep') || 1;

        while (answer <= top) {
          answers.push(answer);
          answer += step;
        }

        return answers;
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var globals = Adapt.course.get('_globals')._components._slider;

        var answers = this.getCorrectAnswers();

        if (answers.length > 1) {
          return Handlebars.compile(globals.ariaCorrectAnswerRange)({
            bottom: answers.shift(),
            top: answers.pop()
          });
        }

        return Handlebars.compile(globals.ariaCorrectAnswer)({
          correctAnswer: answers[0]
        });
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var answerTemplate = Adapt.course.get('_globals')._components._slider.ariaUserAnswer;

        return Handlebars.compile(answerTemplate)({
          userAnswer: this.get('_userAnswer')
        });
      }
    }]);

    return SliderModel;
  }(QuestionModel$1));

  __AMD("components/adapt-contrib-slider/js/adapt-contrib-slider", Adapt.register('slider', {
    view: SliderView,
    model: SliderModel
  }));

  var TextView = function (_ComponentView) {
    _inherits(TextView, _ComponentView);

    var _super = _createSuper(TextView);

    function TextView() {
      _classCallCheck(this, TextView);

      return _super.apply(this, arguments);
    }

    _createClass(TextView, [{
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInview();
      }
    }, {
      key: "setupInview",
      value: function setupInview() {
        var selector = this.getInviewElementSelector();
        if (!selector) return this.setCompletionStatus();
        this.setupInviewCompletion(selector);
      }
    }, {
      key: "getInviewElementSelector",
      value: function getInviewElementSelector() {
        if (this.model.get('body')) return '.component__body';
        if (this.model.get('instruction')) return '.component__instruction';
        if (this.model.get('displayTitle')) return '.component__title';
        return null;
      }
    }]);

    return TextView;
  }(ComponentView$1);

  TextView.template = 'text.jsx';
  var TextView$1 = __AMD("components/adapt-contrib-text/js/TextView", TextView);

  var TextModel = __AMD("components/adapt-contrib-text/js/TextModel", function (_ComponentModel) {
    _inherits(TextModel, _ComponentModel);

    var _super = _createSuper(TextModel);

    function TextModel() {
      _classCallCheck(this, TextModel);

      return _super.apply(this, arguments);
    }

    return TextModel;
  }(ComponentModel$1));

  __AMD("components/adapt-contrib-text/js/adapt-contrib-text", Adapt.register('text', {
    model: TextModel,
    view: TextView$1
  }));

  var TextInputView = __AMD("components/adapt-contrib-textInput/js/textInputView", function (_QuestionView) {
    _inherits(TextInputView, _QuestionView);

    var _super = _createSuper(TextInputView);

    function TextInputView() {
      _classCallCheck(this, TextInputView);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputView, [{
      key: "events",
      value: function events() {
        return {
          'focus .js-textinput-textbox': 'clearValidationError',
          'change .js-textinput-textbox': 'onInputChanged',
          'keyup .js-textinput-textbox': 'onInputChanged'
        };
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled(false);
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled(true);
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled(isEnabled) {
        var _this = this;

        this.model.get('_items').forEach(function (item, index) {
          var $itemInput = _this.$('.js-textinput-textbox').eq(index);

          $itemInput.prop('disabled', !isEnabled);
        });
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "clearValidationError",
      value: function clearValidationError() {
        this.$('.js-textinput-textbox').removeClass('has-error');
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {
        this.showValidationError();
      }
    }, {
      key: "showValidationError",
      value: function showValidationError() {
        this.$('.js-textinput-textbox').addClass('has-error');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        var _this2 = this;

        if (!this.model.get('_canShowMarking')) return;
        this.model.get('_items').forEach(function (item, i) {
          var $item = _this2.$('.js-textinput-item').eq(i);

          $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
        });
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.$('.js-textinput-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
        this.model.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: undefined
        });
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        var _this3 = this;

        var correctAnswers = this.model.get('_answers');
        this.model.get('_items').forEach(function (item, index) {
          var correctAnswer = correctAnswers ? correctAnswers[index][0] : item._answers[0];

          _this3.$('.js-textinput-textbox').eq(index).val(correctAnswer);
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var _this4 = this;

        this.model.get('_items').forEach(function (item, index) {
          _this4.$('.js-textinput-textbox').eq(index).val(item.userAnswer);
        });
      }
    }, {
      key: "onInputChanged",
      value: function onInputChanged(e) {
        var $input = $(e.target);
        this.model.setItemUserAnswer($input.parents('.js-textinput-item').index(), $input.val());
      }
    }]);

    return TextInputView;
  }(QuestionView$1));

  var TextInputModel = function (_QuestionModel) {
    _inherits(TextInputModel, _QuestionModel);

    var _super = _createSuper(TextInputModel);

    function TextInputModel() {
      _classCallCheck(this, TextInputModel);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(TextInputModel.prototype), "init", this).call(this);

        this.set('_genericAnswerIndexOffset', TextInputModel.genericAnswerIndexOffset);
        this.setupQuestionItemIndexes();
        this.checkCanSubmit();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(TextInputModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: null
        });
        return true;
      }
    }, {
      key: "setupQuestionItemIndexes",
      value: function setupQuestionItemIndexes() {
        this.get('_items').forEach(function (item, index) {
          if (item._index === undefined) item._index = index;
          if (item._answerIndex === undefined) item._answerIndex = -1;
        });
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        var genericAnswers = this.get('_answers');
        this.get('_items').forEach(function (item) {
          var answerIndex = userAnswer[item._index];

          if (answerIndex >= TextInputModel.genericAnswerIndexOffset) {
            item.userAnswer = genericAnswers[answerIndex - TextInputModel.genericAnswerIndexOffset];
            item._answerIndex = answerIndex;
          } else if (answerIndex > -1) {
            item.userAnswer = item._answers[answerIndex];
            item._answerIndex = answerIndex;
          } else {
            if (item.userAnswer === undefined) item.userAnswer = '******';
            item._answerIndex = -1;
          }

          if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        this.set('_items', _.shuffle(this.get('_items')));
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return this.get('_items').every(function (_ref) {
          var userAnswer = _ref.userAnswer;
          return userAnswer;
        });
      }
    }, {
      key: "setItemUserAnswer",
      value: function setItemUserAnswer(itemIndex, userAnswer) {
        var item = this.get('_items')[itemIndex];
        item.userAnswer = userAnswer;
        this.checkCanSubmit();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.get('_items');
        this.isCorrect();
        var userAnswer = new Array(items.length);
        items.forEach(function (_ref2) {
          var _index = _ref2._index,
              _answerIndex = _ref2._answerIndex;
          return userAnswer[_index] = _answerIndex;
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        if (this.get('_answers')) {
          this.markGenericAnswers();
        } else {
          this.markSpecificAnswers();
        }

        return this.get('_items').every(function (_ref3) {
          var _isCorrect = _ref3._isCorrect;
          return _isCorrect;
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "markGenericAnswers",
      value: function markGenericAnswers() {
        var _this = this;

        var numberOfCorrectAnswers = 0;
        var correctAnswers = this.get('_answers').slice();
        var usedAnswerIndexes = [];
        this.get('_items').forEach(function (item) {
          correctAnswers.forEach(function (answerGroup, answerIndex) {
            if (usedAnswerIndexes.includes(answerIndex)) return;
            if (_this.checkAnswerIsCorrect(answerGroup, item.userAnswer) === false) return;
            usedAnswerIndexes.push(answerIndex);
            item._isCorrect = true;
            item._answerIndex = answerIndex + TextInputModel.genericAnswerIndexOffset;

            _this.set({
              _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
              _isAtLeastOneCorrectSelection: true
            });
          });
          if (!item._isCorrect) item._isCorrect = false;
        });
      }
    }, {
      key: "markSpecificAnswers",
      value: function markSpecificAnswers() {
        var _this2 = this;

        var numberOfCorrectAnswers = 0;
        this.get('_items').forEach(function (item) {
          var answers = item._answers;
          if (!answers) return;
          var userAnswer = item.userAnswer || '';

          var isCorrect = _this2.checkAnswerIsCorrect(answers, userAnswer);

          item._isCorrect = isCorrect;
          item._answerIndex = answers.indexOf(_this2.cleanupUserAnswer(userAnswer));
          if (!isCorrect) return;

          _this2.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        });
      }
    }, {
      key: "checkAnswerIsCorrect",
      value: function checkAnswerIsCorrect(possibleAnswers, userAnswer) {
        var _this3 = this;

        var uAnswer = this.cleanupUserAnswer(userAnswer);
        var answerIsCorrect = possibleAnswers.some(function (cAnswer) {
          return _this3.cleanupUserAnswer(cAnswer) === uAnswer;
        });
        return answerIsCorrect;
      }
    }, {
      key: "cleanupUserAnswer",
      value: function cleanupUserAnswer(userAnswer) {
        if (this.get('_allowsAnyCase')) {
          userAnswer = userAnswer.toLowerCase();
        }

        if (this.get('_allowsPunctuation')) {
          userAnswer = userAnswer.replace(/[.,-/#!$£%^&*;:{}=\-_`~()]/g, '');
          userAnswer = userAnswer.replace(/(  +)+/g, ' ');
        }

        return userAnswer.trim();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var questionWeight = this.get('_questionWeight');
        var itemLength = this.get('_items').length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.get('_items').forEach(function (item) {
          item._isCorrect = false;
          item.userAnswer = '';
        });
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        return this.get('_items').map(function (_ref4) {
          var userAnswer = _ref4.userAnswer;
          return userAnswer;
        }).join('[,]');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'fill-in';
      }
    }]);

    return TextInputModel;
  }(QuestionModel$1);

  TextInputModel.genericAnswerIndexOffset = 65536;
  var TextInputModel$1 = __AMD("components/adapt-contrib-textInput/js/textInputModel", TextInputModel);

  __AMD("components/adapt-contrib-textInput/js/adapt-contrib-textInput", Adapt.register('textinput', {
    view: TextInputView,
    model: TextInputModel$1
  }));

  var DraggieView = function (_Backbone$View) {
    _inherits(DraggieView, _Backbone$View);

    var _super = _createSuper(DraggieView);

    function DraggieView() {
      _classCallCheck(this, DraggieView);

      return _super.apply(this, arguments);
    }

    _createClass(DraggieView, [{
      key: "initialize",
      value: function initialize(settings) {
        _.bindAll(this, 'onDragStart', 'onDragMove', 'onDragEnd');

        this.settings = _.defaults(settings, DraggieView.defaults);
        this.draggie = null;
        this.setUpDraggie();
        this.addEventListeners();
        this.settings.load.call(this, this);
        this.trigger('load', this);
      }
    }, {
      key: "setUpDraggie",
      value: function setUpDraggie() {
        this.draggie = new Draggabilly__default['default'](this.settings.el[0], this.settings.container);
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners() {
        this.draggie.on('dragStart', this.onDragStart);
        this.draggie.on('dragMove', this.onDragMove);
        this.draggie.on('dragEnd', this.onDragEnd);
      }
    }, {
      key: "onDragStart",
      value: function onDragStart() {}
    }, {
      key: "onDragMove",
      value: function onDragMove(event, pointer) {
        if (this.isOverlap(pointer)) {
          this.settings.target.addClass('is-active');
        } else {
          this.settings.target.removeClass('is-active');
        }
      }
    }, {
      key: "onDragEnd",
      value: function onDragEnd(event, pointer) {
        var _isOverlap = this.isOverlap(pointer);

        if (_isOverlap) {
          this.setPositionTarget();
        } else {
          this.resetPosition();
        }

        this.trigger('dropIt', this, _isOverlap);
        this.settings.target.removeClass('is-active');
      }
    }, {
      key: "setPositionTarget",
      value: function setPositionTarget() {
        var targetPosition = this.settings.target.position();
        this.setPosition(targetPosition.top - 64, targetPosition.left);
      }
    }, {
      key: "resetPosition",
      value: function resetPosition() {
        this.setPosition(0, 0);
      }
    }, {
      key: "setPosition",
      value: function setPosition(top, left) {
        var el = this.settings.el;
        el.animate({
          top: "".concat(top, "px"),
          left: "".concat(left, "px")
        });
      }
    }, {
      key: "isOverlap",
      value: function isOverlap(pointer) {
        var targetLocation = this.settings.target[0].getBoundingClientRect();
        var targetX = targetLocation.left + targetLocation.width;
        var targetY = targetLocation.top + targetLocation.height;
        var x = pointer.x;
        var y = pointer.y;

        if (x >= targetLocation.left && x <= targetX && y >= targetLocation.top && y <= targetY) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: "toggleDisabled",
      value: function toggleDisabled(value) {
        if (!this.draggie) return;

        if (!value) {
          this.draggie.enable();
        } else {
          this.draggie.disable();
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.draggie.destroy();
      }
    }]);

    return DraggieView;
  }(Backbone.View);

  DraggieView.defaults = {
    load: function () {}
  };
  var DraggieView$1 = __AMD("components/adapt-dropItems/js/draggieView", DraggieView);

  var DropItemsView = function (_QuestionView) {
    _inherits(DropItemsView, _QuestionView);

    var _super = _createSuper(DropItemsView);

    function DropItemsView() {
      _classCallCheck(this, DropItemsView);

      return _super.apply(this, arguments);
    }

    _createClass(DropItemsView, [{
      key: "preinitialize",
      value: function preinitialize() {
        this.draggies = [];
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        _.bindAll(this, 'onDropIt');

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(DropItemsView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.listenToOnce(Adapt.parentView, 'postRemove', this.onPostRemove);
        this.listenTo(Adapt, {
          'device:changed device:resize': this.onResize
        });
      }
    }, {
      key: "onPostRemove",
      value: function onPostRemove() {
        var _this = this;

        this.draggies.forEach(function (draggie) {
          draggie.off('dropIt', _this.onDropIt);
          draggie.destroy();
        });
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.draggies.forEach(function (draggie) {
          return draggie.toggleDisabled(true);
        });
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.draggies.forEach(function (draggie) {
          return draggie.toggleDisabled(false);
        });
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        var _this2 = this;

        this.$('.component__widget').imageready(function () {
          _this2.setupItems();

          _this2.setSizeDrop();

          _this2.setReadyStatus();
        });
      }
    }, {
      key: "setSizeDrop",
      value: function setSizeDrop() {
        var $target = this.$('.dropitems__dropzone');
        var $container = this.$('.dropitems__container');
        $target.css({
          'min-width': "".concat($container.outerWidth(), "px"),
          'min-height': "".concat($container.outerHeight(), "px")
        });
      }
    }, {
      key: "onResize",
      value: function onResize() {
        this.setPosition();
        this.setSizeDrop();
      }
    }, {
      key: "setPosition",
      value: function setPosition() {
        this.draggies.forEach(function (draggie) {
          if (draggie.model.get('_isActive')) {
            draggie.setPositionTarget();
          } else {
            draggie.resetPosition();
          }
        });
      }
    }, {
      key: "setupItems",
      value: function setupItems() {
        var _this3 = this;

        var $container = this.$('.component__inner');
        var items = this.model.getChildren();
        var target = this.$('.dropitems__dropzone');
        this.$('.dropitems__item').each(function (i, el) {
          var item = items.models[i];
          var draggie = new DraggieView$1({
            el: $(el),
            target: target,
            container: $container,
            model: item
          });

          _this3.draggies.push(draggie);

          draggie.on('dropIt', _this3.onDropIt);
        });
        this.enableQuestion();

        if (this.model.get('_isEnabled') !== true) {
          this.disableQuestion();
          this.setPosition();
        }
      }
    }, {
      key: "onDropIt",
      value: function onDropIt(draggie, value) {
        if (!this.model.isInteractive()) return;
        var itemIndex = draggie.model.get('_index');
        var itemModel = this.model.getItem(itemIndex);
        itemModel.toggleActive(value);
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.model.resetItems();
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.draggies.forEach(function (draggie) {
          if (draggie.model.get('_shouldBeSelected')) {
            draggie.setPositionTarget();
          } else {
            draggie.resetPosition();
          }
        });
        this.model.set('_isCorrectAnswerShown', true);
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var _this4 = this;

        if (!this.draggies[0]) return;
        this.model.get('_userAnswer').forEach(function (answer, index) {
          if (answer) {
            _this4.draggies[index].setPositionTarget();
          } else {
            _this4.draggies[index].resetPosition();
          }
        });
        this.model.set('_isCorrectAnswerShown', false);
      }
    }]);

    return DropItemsView;
  }(QuestionView$1);

  DropItemsView.template = 'drop-items.jsx';
  var DropItemsView$1 = __AMD("components/adapt-dropItems/js/dropItemsView", DropItemsView);

  var DropItemsModel = __AMD("components/adapt-dropItems/js/dropItemsModel", function (_ItemsQuestionModel) {
    _inherits(DropItemsModel, _ItemsQuestionModel);

    var _super = _createSuper(DropItemsModel);

    function DropItemsModel() {
      _classCallCheck(this, DropItemsModel);

      return _super.apply(this, arguments);
    }

    _createClass(DropItemsModel, [{
      key: "defaults",
      value: function defaults() {
        return ItemsQuestionModel$1.resultExtend('defaults', {
          _selectable: this.getChildren().models.length
        });
      }
    }]);

    return DropItemsModel;
  }(ItemsQuestionModel$1));

  __AMD("components/adapt-dropItems/js/adapt-dropItems", Adapt.register('dropItems', {
    view: DropItemsView$1,
    model: DropItemsModel
  }));

  var LottieInteractivityView = function (_ComponentView) {
    _inherits(LottieInteractivityView, _ComponentView);

    var _super = _createSuper(LottieInteractivityView);

    function LottieInteractivityView() {
      _classCallCheck(this, LottieInteractivityView);

      return _super.apply(this, arguments);
    }

    _createClass(LottieInteractivityView, [{
      key: "preRender",
      value: function preRender() {
        var lottieModel = this.model.get('_lottie');
        var lottieplayerEl = document.createElement('lottie-player');
        lottieModel.controls && lottieplayerEl.setAttribute('controls', lottieModel.controls);

        if (lottieModel.loop !== -1) {
          lottieplayerEl.setAttribute('loop', true);
          lottieplayerEl.setAttribute('count', lottieModel.loop);
        }

        lottieModel.autoplay && lottieplayerEl.setAttribute('autoplay', lottieModel.autoplay);
        lottieModel.speed && lottieModel.speed > 1 && lottieplayerEl.setAttribute('speed', lottieModel.speed);
        lottieModel.style && lottieplayerEl.setAttribute('style', lottieModel.style);
        lottieModel.renderer && lottieplayerEl.setAttribute('renderer', lottieModel.renderer);
        lottieModel.background && lottieplayerEl.setAttribute('background', lottieModel.background);
        lottieModel.preserveAspectRatio && lottieplayerEl.setAttribute('preserveAspectRatio', lottieModel.preserveAspectRatio);
        lottieplayerEl.setAttribute('src', lottieModel.src);
        this.model.set('lottieplayer', lottieplayerEl.outerHTML);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        var lottieplayer = this.$('lottie-player')[0];
        lottieplayer.addEventListener('ready', function () {
          Adapt.trigger('lottie:ready', _this);

          _this.setReadyStatus();
        });
        lottieplayer.addEventListener('error', function () {
          _this.setReadyStatus();

          _this.model.set('failed', _this.model.get('_lottie').failed);
        });
        lottieplayer.addEventListener('play', function () {
          Adapt.trigger('lottie:play', _this);
        });
        lottieplayer.addEventListener('pause', function () {
          Adapt.trigger('lottie:pause', _this);
        });

        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        } else {
          lottieplayer.addEventListener('complete', function () {
            _this.setCompletionStatus();
          });
        }

        var interactivity = this.model.get('_lottie').interactivity;

        if (interactivity) {
          interactivity.player = lottieplayer;
          LottieInteractivity__namespace.create(interactivity);
        }
      }
    }]);

    return LottieInteractivityView;
  }(ComponentView$1);

  LottieInteractivityView.template = 'lottieInteractivity.jsx';
  var LottieInteractivityView$1 = __AMD("components/adapt-lottieInteractivity/js/LottieInteractivityView", LottieInteractivityView);

  var LottieInteractivityModel = __AMD("components/adapt-lottieInteractivity/js/LottieInteractivityModel", function (_ComponentModel) {
    _inherits(LottieInteractivityModel, _ComponentModel);

    var _super = _createSuper(LottieInteractivityModel);

    function LottieInteractivityModel() {
      _classCallCheck(this, LottieInteractivityModel);

      return _super.apply(this, arguments);
    }

    return LottieInteractivityModel;
  }(ComponentModel$1));

  __AMD("components/adapt-lottieInteractivity/js/adapt-lottieInteractivity", Adapt.register('lottieInteractivity', {
    model: LottieInteractivityModel,
    view: LottieInteractivityView$1
  }));

  var f = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f ? f : {};
  var n = !f.document && !!f.postMessage,
      o = n && /blob:/i.test((f.location || {}).protocol),
      a = {},
      h = 0,
      b = {
    parse: function (e, t) {
      var i = (t = t || {}).dynamicTyping || !1;
      M(i) && (t.dynamicTypingFunction = i, i = {});

      if (t.dynamicTyping = i, t.transform = !!M(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
        var r = function () {
          if (!b.WORKERS_SUPPORTED) return !1;
          var e = (i = f.URL || f.webkitURL || null, r = s.toString(), b.BLOB_URL || (b.BLOB_URL = i.createObjectURL(new Blob(["(", r, ")();"], {
            type: "file/javascript"
          })))),
              t = new f.Worker(e);
          var i, r;
          return t.onmessage = _$1, t.id = h++, a[t.id] = t;
        }();

        return r.userStep = t.step, r.userChunk = t.chunk, r.userComplete = t.complete, r.userError = t.error, t.step = M(t.step), t.chunk = M(t.chunk), t.complete = M(t.complete), t.error = M(t.error), delete t.worker, void r.postMessage({
          input: e,
          config: t,
          workerId: r.id
        });
      }

      var n = null;
      "string" == typeof e ? n = t.download ? new l$1(t) : new p(t) : !0 === e.readable && M(e.read) && M(e.on) ? n = new g(t) : (f.File && e instanceof File || e instanceof Object) && (n = new c(t));
      return n.stream(e);
    },
    unparse: function (e, t) {
      var n = !1,
          _ = !0,
          m = ",",
          y = "\r\n",
          s = '"',
          a = s + s,
          i = !1,
          r = null,
          o = !1;

      !function () {
        if ("object" != _typeof(t)) return;
        "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function (e) {
          return -1 !== t.delimiter.indexOf(e);
        }).length || (m = t.delimiter);
        ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n = t.quotes);
        "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i = t.skipEmptyLines);
        "string" == typeof t.newline && (y = t.newline);
        "string" == typeof t.quoteChar && (s = t.quoteChar);
        "boolean" == typeof t.header && (_ = t.header);

        if (Array.isArray(t.columns)) {
          if (0 === t.columns.length) throw new Error("Option columns is empty");
          r = t.columns;
        }

        void 0 !== t.escapeChar && (a = t.escapeChar + s);
        ("boolean" == typeof t.escapeFormulae || t.escapeFormulae instanceof RegExp) && (o = t.escapeFormulae instanceof RegExp ? t.escapeFormulae : /^[=+\-@\t\r].*$/);
      }();
      var h = new RegExp(j(s), "g");
      "string" == typeof e && (e = JSON.parse(e));

      if (Array.isArray(e)) {
        if (!e.length || Array.isArray(e[0])) return u(null, e, i);
        if ("object" == _typeof(e[0])) return u(r || Object.keys(e[0]), e, i);
      } else if ("object" == _typeof(e)) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == _typeof(e.data[0]) ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == _typeof(e.data[0]) || (e.data = [e.data])), u(e.fields || [], e.data || [], i);

      throw new Error("Unable to serialize unrecognized input");

      function u(e, t, i) {
        var r = "";
        "string" == typeof e && (e = JSON.parse(e)), "string" == typeof t && (t = JSON.parse(t));
        var n = Array.isArray(e) && 0 < e.length,
            s = !Array.isArray(t[0]);

        if (n && _) {
          for (var a = 0; a < e.length; a++) {
            0 < a && (r += m), r += v(e[a], a);
          }

          0 < t.length && (r += y);
        }

        for (var o = 0; o < t.length; o++) {
          var h = n ? e.length : t[o].length,
              u = !1,
              f = n ? 0 === Object.keys(t[o]).length : 0 === t[o].length;

          if (i && !n && (u = "greedy" === i ? "" === t[o].join("").trim() : 1 === t[o].length && 0 === t[o][0].length), "greedy" === i && n) {
            for (var d = [], l = 0; l < h; l++) {
              var c = s ? e[l] : l;
              d.push(t[o][c]);
            }

            u = "" === d.join("").trim();
          }

          if (!u) {
            for (var p = 0; p < h; p++) {
              0 < p && !f && (r += m);
              var g = n && s ? e[p] : p;
              r += v(t[o][g], p);
            }

            o < t.length - 1 && (!i || 0 < h && !f) && (r += y);
          }
        }

        return r;
      }

      function v(e, t) {
        if (null == e) return "";
        if (e.constructor === Date) return JSON.stringify(e).slice(1, 25);
        var i = !1;
        o && "string" == typeof e && o.test(e) && (e = "'" + e, i = !0);
        var r = e.toString().replace(h, a);
        return (i = i || !0 === n || "function" == typeof n && n(e, t) || Array.isArray(n) && n[t] || function (e, t) {
          for (var i = 0; i < t.length; i++) {
            if (-1 < e.indexOf(t[i])) return !0;
          }

          return !1;
        }(r, b.BAD_DELIMITERS) || -1 < r.indexOf(m) || " " === r.charAt(0) || " " === r.charAt(r.length - 1)) ? s + r + s : r;
      }
    }
  };

  if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = ["\r", "\n", '"', b.BYTE_ORDER_MARK], b.WORKERS_SUPPORTED = !n && !!f.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = E, b.ParserHandle = i$2, b.NetworkStreamer = l$1, b.FileStreamer = c, b.StringStreamer = p, b.ReadableStreamStreamer = g, f.jQuery) {
    var d = f.jQuery;

    d.fn.parse = function (o) {
      var i = o.config || {},
          h = [];
      return this.each(function (e) {
        if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && f.FileReader) || !this.files || 0 === this.files.length) return !0;

        for (var t = 0; t < this.files.length; t++) {
          h.push({
            file: this.files[t],
            inputElem: this,
            instanceConfig: d.extend({}, i)
          });
        }
      }), e(), this;

      function e() {
        if (0 !== h.length) {
          var e,
              t,
              i,
              r,
              n = h[0];

          if (M(o.before)) {
            var s = o.before(n.file, n.inputElem);

            if ("object" == _typeof(s)) {
              if ("abort" === s.action) return e = "AbortError", t = n.file, i = n.inputElem, r = s.reason, void (M(o.error) && o.error({
                name: e
              }, t, i, r));
              if ("skip" === s.action) return void u();
              "object" == _typeof(s.config) && (n.instanceConfig = d.extend(n.instanceConfig, s.config));
            } else if ("skip" === s) return void u();
          }

          var a = n.instanceConfig.complete;
          n.instanceConfig.complete = function (e) {
            M(a) && a(e, n.file, n.inputElem), u();
          }, b.parse(n.file, n.instanceConfig);
        } else M(o.complete) && o.complete();
      }

      function u() {
        h.splice(0, 1), e();
      }
    };
  }

  function u(e) {
    this._handle = null, this._finished = !1, this._completed = !1, this._halted = !1, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = {
      data: [],
      errors: [],
      meta: {}
    }, function (e) {
      var t = w(e);
      t.chunkSize = parseInt(t.chunkSize), e.step || e.chunk || (t.chunkSize = null);
      this._handle = new i$2(t), (this._handle.streamer = this)._config = t;
    }.call(this, e), this.parseChunk = function (e, t) {
      if (this.isFirstChunk && M(this._config.beforeFirstChunk)) {
        var i = this._config.beforeFirstChunk(e);

        void 0 !== i && (e = i);
      }

      this.isFirstChunk = !1, this._halted = !1;
      var r = this._partialLine + e;
      this._partialLine = "";

      var n = this._handle.parse(r, this._baseIndex, !this._finished);

      if (!this._handle.paused() && !this._handle.aborted()) {
        var s = n.meta.cursor;
        this._finished || (this._partialLine = r.substring(s - this._baseIndex), this._baseIndex = s), n && n.data && (this._rowCount += n.data.length);
        var a = this._finished || this._config.preview && this._rowCount >= this._config.preview;
        if (o) f.postMessage({
          results: n,
          workerId: b.WORKER_ID,
          finished: a
        });else if (M(this._config.chunk) && !t) {
          if (this._config.chunk(n, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = !0);
          n = void 0, this._completeResults = void 0;
        }
        return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n.data), this._completeResults.errors = this._completeResults.errors.concat(n.errors), this._completeResults.meta = n.meta), this._completed || !a || !M(this._config.complete) || n && n.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = !0), a || n && n.meta.paused || this._nextChunk(), n;
      }

      this._halted = !0;
    }, this._sendError = function (e) {
      M(this._config.error) ? this._config.error(e) : o && this._config.error && f.postMessage({
        workerId: b.WORKER_ID,
        error: e,
        finished: !1
      });
    };
  }

  function l$1(e) {
    var r;
    (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), u.call(this, e), this._nextChunk = n ? function () {
      this._readChunk(), this._chunkLoaded();
    } : function () {
      this._readChunk();
    }, this.stream = function (e) {
      this._input = e, this._nextChunk();
    }, this._readChunk = function () {
      if (this._finished) this._chunkLoaded();else {
        if (r = new XMLHttpRequest(), this._config.withCredentials && (r.withCredentials = this._config.withCredentials), n || (r.onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)), r.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
          var e = this._config.downloadRequestHeaders;

          for (var t in e) {
            r.setRequestHeader(t, e[t]);
          }
        }

        if (this._config.chunkSize) {
          var i = this._start + this._config.chunkSize - 1;
          r.setRequestHeader("Range", "bytes=" + this._start + "-" + i);
        }

        try {
          r.send(this._config.downloadRequestBody);
        } catch (e) {
          this._chunkError(e.message);
        }

        n && 0 === r.status && this._chunkError();
      }
    }, this._chunkLoaded = function () {
      4 === r.readyState && (r.status < 200 || 400 <= r.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r.responsefile.length, this._finished = !this._config.chunkSize || this._start >= function (e) {
        var t = e.getResponseHeader("Content-Range");
        if (null === t) return -1;
        return parseInt(t.substring(t.lastIndexOf("/") + 1));
      }(r), this.parseChunk(r.responsefile)));
    }, this._chunkError = function (e) {
      var t = r.statusfile || e;

      this._sendError(new Error(t));
    };
  }

  function c(e) {
    var r, n;
    (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), u.call(this, e);
    var s = "undefined" != typeof FileReader;
    this.stream = function (e) {
      this._input = e, n = e.slice || e.webkitSlice || e.mozSlice, s ? ((r = new FileReader()).onload = v(this._chunkLoaded, this), r.onerror = v(this._chunkError, this)) : r = new FileReaderSync(), this._nextChunk();
    }, this._nextChunk = function () {
      this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
    }, this._readChunk = function () {
      var e = this._input;

      if (this._config.chunkSize) {
        var t = Math.min(this._start + this._config.chunkSize, this._input.size);
        e = n.call(e, this._start, t);
      }

      var i = r.readAsfile(e, this._config.encoding);
      s || this._chunkLoaded({
        target: {
          result: i
        }
      });
    }, this._chunkLoaded = function (e) {
      this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e.target.result);
    }, this._chunkError = function () {
      this._sendError(r.error);
    };
  }

  function p(e) {
    var i;
    u.call(this, e = e || {}), this.stream = function (e) {
      return i = e, this._nextChunk();
    }, this._nextChunk = function () {
      if (!this._finished) {
        var e,
            t = this._config.chunkSize;
        return t ? (e = i.substring(0, t), i = i.substring(t)) : (e = i, i = ""), this._finished = !i, this.parseChunk(e);
      }
    };
  }

  function g(e) {
    u.call(this, e = e || {});
    var t = [],
        i = !0,
        r = !1;
    this.pause = function () {
      u.prototype.pause.apply(this, arguments), this._input.pause();
    }, this.resume = function () {
      u.prototype.resume.apply(this, arguments), this._input.resume();
    }, this.stream = function (e) {
      this._input = e, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
    }, this._checkIsFinished = function () {
      r && 1 === t.length && (this._finished = !0);
    }, this._nextChunk = function () {
      this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i = !0;
    }, this._streamData = v(function (e) {
      try {
        t.push("string" == typeof e ? e : e.toString(this._config.encoding)), i && (i = !1, this._checkIsFinished(), this.parseChunk(t.shift()));
      } catch (e) {
        this._streamError(e);
      }
    }, this), this._streamError = v(function (e) {
      this._streamCleanUp(), this._sendError(e);
    }, this), this._streamEnd = v(function () {
      this._streamCleanUp(), r = !0, this._streamData("");
    }, this), this._streamCleanUp = v(function () {
      this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
    }, this);
  }

  function i$2(m) {
    var a,
        o,
        h,
        r = Math.pow(2, 53),
        n = -r,
        s = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,
        u = /^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,
        t = this,
        i = 0,
        f = 0,
        d = !1,
        e = !1,
        l = [],
        c = {
      data: [],
      errors: [],
      meta: {}
    };

    if (M(m.step)) {
      var p = m.step;

      m.step = function (e) {
        if (c = e, _()) g();else {
          if (g(), 0 === c.data.length) return;
          i += e.data.length, m.preview && i > m.preview ? o.abort() : (c.data = c.data[0], p(c, t));
        }
      };
    }

    function y(e) {
      return "greedy" === m.skipEmptyLines ? "" === e.join("").trim() : 1 === e.length && 0 === e[0].length;
    }

    function g() {
      return c && h && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), h = !1), m.skipEmptyLines && (c.data = c.data.filter(function (e) {
        return !y(e);
      })), _() && function () {
        if (!c) return;

        function e(e, t) {
          M(m.transformHeader) && (e = m.transformHeader(e, t)), l.push(e);
        }

        if (Array.isArray(c.data[0])) {
          for (var t = 0; _() && t < c.data.length; t++) {
            c.data[t].forEach(e);
          }

          c.data.splice(0, 1);
        } else c.data.forEach(e);
      }(), function () {
        if (!c || !m.header && !m.dynamicTyping && !m.transform) return c;

        function e(e, t) {
          var i,
              r = m.header ? {} : [];

          for (i = 0; i < e.length; i++) {
            var n = i,
                s = e[i];
            m.header && (n = i >= l.length ? "__parsed_extra" : l[i]), m.transform && (s = m.transform(s, n)), s = v(n, s), "__parsed_extra" === n ? (r[n] = r[n] || [], r[n].push(s)) : r[n] = s;
          }

          return m.header && (i > l.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l.length + " fields but parsed " + i, f + t) : i < l.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l.length + " fields but parsed " + i, f + t)), r;
        }

        var t = 1;
        !c.data.length || Array.isArray(c.data[0]) ? (c.data = c.data.map(e), t = c.data.length) : c.data = e(c.data, 0);
        m.header && c.meta && (c.meta.fields = l);
        return f += t, c;
      }();
    }

    function _() {
      return m.header && 0 === l.length;
    }

    function v(e, t) {
      return i = e, m.dynamicTypingFunction && void 0 === m.dynamicTyping[i] && (m.dynamicTyping[i] = m.dynamicTypingFunction(i)), !0 === (m.dynamicTyping[i] || m.dynamicTyping) ? "true" === t || "TRUE" === t || "false" !== t && "FALSE" !== t && (function (e) {
        if (s.test(e)) {
          var t = parseFloat(e);
          if (n < t && t < r) return !0;
        }

        return !1;
      }(t) ? parseFloat(t) : u.test(t) ? new Date(t) : "" === t ? null : t) : t;
      var i;
    }

    function k(e, t, i, r) {
      var n = {
        type: e,
        code: t,
        message: i
      };
      void 0 !== r && (n.row = r), c.errors.push(n);
    }

    this.parse = function (e, t, i) {
      var r = m.quoteChar || '"';
      if (m.newline || (m.newline = function (e, t) {
        e = e.substring(0, 1048576);
        var i = new RegExp(j(t) + "([^]*?)" + j(t), "gm"),
            r = (e = e.replace(i, "")).split("\r"),
            n = e.split("\n"),
            s = 1 < n.length && n[0].length < r[0].length;
        if (1 === r.length || s) return "\n";

        for (var a = 0, o = 0; o < r.length; o++) {
          "\n" === r[o][0] && a++;
        }

        return a >= r.length / 2 ? "\r\n" : "\r";
      }(e, r)), h = !1, m.delimiter) M(m.delimiter) && (m.delimiter = m.delimiter(e), c.meta.delimiter = m.delimiter);else {
        var n = function (e, t, i, r, n) {
          var s, a, o, h;
          n = n || [",", "\t", "|", ";", b.RECORD_SEP, b.UNIT_SEP];

          for (var u = 0; u < n.length; u++) {
            var f = n[u],
                d = 0,
                l = 0,
                c = 0;
            o = void 0;

            for (var p = new E({
              comments: r,
              delimiter: f,
              newline: t,
              preview: 10
            }).parse(e), g = 0; g < p.data.length; g++) {
              if (i && y(p.data[g])) c++;else {
                var _ = p.data[g].length;
                l += _, void 0 !== o ? 0 < _ && (d += Math.abs(_ - o), o = _) : o = _;
              }
            }

            0 < p.data.length && (l /= p.data.length - c), (void 0 === a || d <= a) && (void 0 === h || h < l) && 1.99 < l && (a = d, s = f, h = l);
          }

          return {
            successful: !!(m.delimiter = s),
            bestDelimiter: s
          };
        }(e, m.newline, m.skipEmptyLines, m.comments, m.delimitersToGuess);

        n.successful ? m.delimiter = n.bestDelimiter : (h = !0, m.delimiter = b.DefaultDelimiter), c.meta.delimiter = m.delimiter;
      }
      var s = w(m);
      return m.preview && m.header && s.preview++, a = e, o = new E(s), c = o.parse(a, t, i), g(), d ? {
        meta: {
          paused: !0
        }
      } : c || {
        meta: {
          paused: !1
        }
      };
    }, this.paused = function () {
      return d;
    }, this.pause = function () {
      d = !0, o.abort(), a = M(m.chunk) ? "" : a.substring(o.getCharIndex());
    }, this.resume = function () {
      t.streamer._halted ? (d = !1, t.streamer.parseChunk(a, !0)) : setTimeout(t.resume, 3);
    }, this.aborted = function () {
      return e;
    }, this.abort = function () {
      e = !0, o.abort(), c.meta.aborted = !0, M(m.complete) && m.complete(c), a = "";
    };
  }

  function j(e) {
    return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }

  function E(e) {
    var S,
        O = (e = e || {}).delimiter,
        x = e.newline,
        I = e.comments,
        T = e.step,
        D = e.preview,
        A = e.fastMode,
        L = S = void 0 === e.quoteChar || null === e.quoteChar ? '"' : e.quoteChar;
    if (void 0 !== e.escapeChar && (L = e.escapeChar), ("string" != typeof O || -1 < b.BAD_DELIMITERS.indexOf(O)) && (O = ","), I === O) throw new Error("Comment character same as delimiter");
    !0 === I ? I = "#" : ("string" != typeof I || -1 < b.BAD_DELIMITERS.indexOf(I)) && (I = !1), "\n" !== x && "\r" !== x && "\r\n" !== x && (x = "\n");
    var F = 0,
        z = !1;
    this.parse = function (r, t, i) {
      if ("string" != typeof r) throw new Error("Input must be a string");
      var n = r.length,
          e = O.length,
          s = x.length,
          a = I.length,
          o = M(T),
          h = [],
          u = [],
          f = [],
          d = F = 0;
      if (!r) return C();

      if (A || !1 !== A && -1 === r.indexOf(S)) {
        for (var l = r.split(x), c = 0; c < l.length; c++) {
          if (f = l[c], F += f.length, c !== l.length - 1) F += x.length;else if (i) return C();

          if (!I || f.substring(0, a) !== I) {
            if (o) {
              if (h = [], k(f.split(O)), R(), z) return C();
            } else k(f.split(O));

            if (D && D <= c) return h = h.slice(0, D), C(!0);
          }
        }

        return C();
      }

      for (var p = r.indexOf(O, F), g = r.indexOf(x, F), _ = new RegExp(j(L) + j(S), "g"), m = r.indexOf(S, F);;) {
        if (r[F] !== S) {
          if (I && 0 === f.length && r.substring(F, F + a) === I) {
            if (-1 === g) return C();
            F = g + s, g = r.indexOf(x, F), p = r.indexOf(O, F);
          } else if (-1 !== p && (p < g || -1 === g)) f.push(r.substring(F, p)), F = p + e, p = r.indexOf(O, F);else {
            if (-1 === g) break;
            if (f.push(r.substring(F, g)), w(g + s), o && (R(), z)) return C();
            if (D && h.length >= D) return C(!0);
          }
        } else for (m = F, F++;;) {
          if (-1 === (m = r.indexOf(S, m + 1))) return i || u.push({
            type: "Quotes",
            code: "MissingQuotes",
            message: "Quoted field unterminated",
            row: h.length,
            index: F
          }), E();
          if (m === n - 1) return E(r.substring(F, m).replace(_, S));

          if (S !== L || r[m + 1] !== L) {
            if (S === L || 0 === m || r[m - 1] !== L) {
              -1 !== p && p < m + 1 && (p = r.indexOf(O, m + 1)), -1 !== g && g < m + 1 && (g = r.indexOf(x, m + 1));
              var y = b(-1 === g ? p : Math.min(p, g));

              if (r.substr(m + 1 + y, e) === O) {
                f.push(r.substring(F, m).replace(_, S)), r[F = m + 1 + y + e] !== S && (m = r.indexOf(S, F)), p = r.indexOf(O, F), g = r.indexOf(x, F);
                break;
              }

              var v = b(g);

              if (r.substring(m + 1 + v, m + 1 + v + s) === x) {
                if (f.push(r.substring(F, m).replace(_, S)), w(m + 1 + v + s), p = r.indexOf(O, F), m = r.indexOf(S, F), o && (R(), z)) return C();
                if (D && h.length >= D) return C(!0);
                break;
              }

              u.push({
                type: "Quotes",
                code: "InvalidQuotes",
                message: "Trailing quote on quoted field is malformed",
                row: h.length,
                index: F
              }), m++;
            }
          } else m++;
        }
      }

      return E();

      function k(e) {
        h.push(e), d = F;
      }

      function b(e) {
        var t = 0;

        if (-1 !== e) {
          var i = r.substring(m + 1, e);
          i && "" === i.trim() && (t = i.length);
        }

        return t;
      }

      function E(e) {
        return i || (void 0 === e && (e = r.substring(F)), f.push(e), F = n, k(f), o && R()), C();
      }

      function w(e) {
        F = e, k(f), f = [], g = r.indexOf(x, F);
      }

      function C(e) {
        return {
          data: h,
          errors: u,
          meta: {
            delimiter: O,
            linebreak: x,
            aborted: z,
            truncated: !!e,
            cursor: d + (t || 0)
          }
        };
      }

      function R() {
        T(C()), h = [], u = [];
      }
    }, this.abort = function () {
      z = !0;
    }, this.getCharIndex = function () {
      return F;
    };
  }

  function _$1(e) {
    var t = e.data,
        i = a[t.workerId],
        r = !1;
    if (t.error) i.userError(t.error, t.file);else if (t.results && t.results.data) {
      var n = {
        abort: function () {
          r = !0, m(t.workerId, {
            data: [],
            errors: [],
            meta: {
              aborted: !0
            }
          });
        },
        pause: y,
        resume: y
      };

      if (M(i.userStep)) {
        for (var s = 0; s < t.results.data.length && (i.userStep({
          data: t.results.data[s],
          errors: t.results.errors,
          meta: t.results.meta
        }, n), !r); s++) {
        }

        delete t.results;
      } else M(i.userChunk) && (i.userChunk(t.results, n, t.file), delete t.results);
    }
    t.finished && !r && m(t.workerId, t.results);
  }

  function m(e, t) {
    var i = a[e];
    M(i.userComplete) && i.userComplete(t), i.terminate(), delete a[e];
  }

  function y() {
    throw new Error("Not implemented.");
  }

  function w(e) {
    if ("object" != _typeof(e) || null === e) return e;
    var t = Array.isArray(e) ? [] : {};

    for (var i in e) {
      t[i] = w(e[i]);
    }

    return t;
  }

  function v(e, t) {
    return function () {
      e.apply(t, arguments);
    };
  }

  function M(e) {
    return "function" == typeof e;
  }

  var Papa = __AMD("components/adapt-odi-fileInput/js/csvToJson", (o && (f.onmessage = function (e) {
    var t = e.data;
    void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
    if ("string" == typeof t.input) f.postMessage({
      workerId: b.WORKER_ID,
      results: b.parse(t.input, t.config),
      finished: !0
    });else if (f.File && t.input instanceof File || t.input instanceof Object) {
      var i = b.parse(t.input, t.config);
      i && f.postMessage({
        workerId: b.WORKER_ID,
        results: i,
        finished: !0
      });
    }
  }), (l$1.prototype = Object.create(u.prototype)).constructor = l$1, (c.prototype = Object.create(u.prototype)).constructor = c, (p.prototype = Object.create(p.prototype)).constructor = p, (g.prototype = Object.create(u.prototype)).constructor = g, b));

  var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67, _templateObject68, _templateObject69, _templateObject70, _templateObject71, _templateObject72, _templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101, _templateObject102, _templateObject103, _templateObject104, _templateObject105, _templateObject106, _templateObject107, _templateObject108, _templateObject109, _templateObject110, _templateObject111, _templateObject112, _templateObject113, _templateObject114, _templateObject115, _templateObject116, _templateObject117, _templateObject118, _templateObject119, _templateObject120, _templateObject121, _templateObject122, _templateObject123, _templateObject124, _templateObject125, _templateObject126, _templateObject127, _templateObject128, _templateObject129, _templateObject130, _templateObject131, _templateObject132, _templateObject133, _templateObject134, _templateObject135, _templateObject136, _templateObject137, _templateObject138, _templateObject139, _templateObject140, _templateObject141, _templateObject142, _templateObject143, _templateObject144, _templateObject145, _templateObject146, _templateObject147, _templateObject148, _templateObject149, _templateObject150, _templateObject151, _templateObject152, _templateObject153, _templateObject154, _templateObject155, _templateObject156, _templateObject157, _templateObject158, _templateObject159, _templateObject160, _templateObject161, _templateObject162, _templateObject163, _templateObject164, _templateObject165, _templateObject166, _templateObject167, _templateObject168, _templateObject169, _templateObject170, _templateObject171, _templateObject172, _templateObject173, _templateObject174, _templateObject175, _templateObject176, _templateObject177, _templateObject178, _templateObject179, _templateObject180, _templateObject181, _templateObject182, _templateObject183, _templateObject184, _templateObject185, _templateObject186, _templateObject187, _templateObject188, _templateObject189, _templateObject190, _templateObject191, _templateObject192, _templateObject193, _templateObject194, _templateObject195, _templateObject196, _templateObject197, _templateObject198, _templateObject199, _templateObject200, _templateObject201, _templateObject202, _templateObject203, _templateObject204, _templateObject205, _templateObject206, _templateObject207, _templateObject208, _templateObject209, _templateObject210, _templateObject211, _templateObject212, _templateObject213, _templateObject214, _templateObject215, _templateObject216, _templateObject217, _templateObject218, _templateObject219, _templateObject220, _templateObject221, _templateObject222, _templateObject223, _templateObject224, _templateObject225, _templateObject226, _templateObject227, _templateObject228, _templateObject229, _templateObject230, _templateObject231, _templateObject232, _templateObject233, _templateObject234, _templateObject235, _templateObject236, _templateObject237, _templateObject238, _templateObject239, _templateObject240, _templateObject241, _templateObject242, _templateObject243, _templateObject244, _templateObject245, _templateObject246, _templateObject247, _templateObject248, _templateObject249, _templateObject250, _templateObject251, _templateObject252, _templateObject253, _templateObject254, _templateObject255, _templateObject256, _templateObject257, _templateObject258, _templateObject259, _templateObject260, _templateObject261, _templateObject262, _templateObject263, _templateObject264, _templateObject265, _templateObject266, _templateObject267, _templateObject268, _templateObject269, _templateObject270, _templateObject271, _templateObject272, _templateObject273, _templateObject274, _templateObject275, _templateObject276, _templateObject277, _templateObject278, _templateObject279, _templateObject280, _templateObject281, _templateObject282;

  var Ajv = __AMD("components/adapt-odi-fileInput/js/ajv7.min", function e(t, r, o) {
    function s(n, i) {
      if (!r[n]) {
        if (!t[n]) {
          var c = "function" == typeof require && require;
          if (!i && c) return c(n, !0);
          if (a) return a(n, !0);
          var l = new Error("Cannot find module '" + n + "'");
          throw l.code = "MODULE_NOT_FOUND", l;
        }

        var d = r[n] = {
          exports: {}
        };
        t[n][0].call(d.exports, function (e) {
          return s(t[n][1][e] || e);
        }, d, d.exports, e, t, r, o);
      }

      return r[n].exports;
    }

    for (var a = "function" == typeof require && require, n = 0; n < o.length; n++) {
      s(o[n]);
    }

    return s;
  }({
    1: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.regexpCode = r.getEsmExportName = r.getProperty = r.safeStringify = r.stringify = r.strConcat = r.addCodeArg = r.str = r._ = r.nil = r._Code = r.Name = r.IDENTIFIER = r._CodeOrName = void 0;

      var o = function o() {
        _classCallCheck(this, o);
      };

      r._CodeOrName = o, r.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;

      var s = function (_o) {
        _inherits(s, _o);

        var _super = _createSuper(s);

        function s(e) {
          var _this;

          _classCallCheck(this, s);

          if (_this = _super.call(this), !r.IDENTIFIER.test(e)) throw new Error("CodeGen: name must be a valid identifier");
          _this.str = e;
          return _possibleConstructorReturn(_this);
        }

        _createClass(s, [{
          key: "toString",
          value: function toString() {
            return this.str;
          }
        }, {
          key: "emptyStr",
          value: function emptyStr() {
            return !1;
          }
        }, {
          key: "names",
          get: function () {
            return _defineProperty({}, this.str, 1);
          }
        }]);

        return s;
      }(o);

      r.Name = s;

      var a = function (_o2) {
        _inherits(a, _o2);

        var _super2 = _createSuper(a);

        function a(e) {
          var _this2;

          _classCallCheck(this, a);

          _this2 = _super2.call(this), _this2._items = "string" == typeof e ? [e] : e;
          return _this2;
        }

        _createClass(a, [{
          key: "toString",
          value: function toString() {
            return this.str;
          }
        }, {
          key: "emptyStr",
          value: function emptyStr() {
            if (this._items.length > 1) return !1;
            var e = this._items[0];
            return "" === e || '""' === e;
          }
        }, {
          key: "str",
          get: function () {
            var e;
            return null !== (e = this._str) && void 0 !== e ? e : this._str = this._items.reduce(function (e, t) {
              return "".concat(e).concat(t);
            }, "");
          }
        }, {
          key: "names",
          get: function () {
            var e;
            return null !== (e = this._names) && void 0 !== e ? e : this._names = this._items.reduce(function (e, t) {
              return t instanceof s && (e[t.str] = (e[t.str] || 0) + 1), e;
            }, {});
          }
        }]);

        return a;
      }(o);

      function n(e) {
        var r = [e[0]];
        var o = 0;

        for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          t[_key - 1] = arguments[_key];
        }

        for (; o < t.length;) {
          l(r, t[o]), r.push(e[++o]);
        }

        return new a(r);
      }

      r._Code = a, r.nil = new a(""), r._ = n;
      var i = new a("+");

      function c(e) {
        var r = [u(e[0])];
        var o = 0;

        for (var _len2 = arguments.length, t = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          t[_key2 - 1] = arguments[_key2];
        }

        for (; o < t.length;) {
          r.push(i), l(r, t[o]), r.push(i, u(e[++o]));
        }

        return function (e) {
          var t = 1;

          for (; t < e.length - 1;) {
            if (e[t] === i) {
              var _r = d(e[t - 1], e[t + 1]);

              if (void 0 !== _r) {
                e.splice(t - 1, 3, _r);
                continue;
              }

              e[t++] = "+";
            }

            t++;
          }
        }(r), new a(r);
      }

      function l(e, t) {
        var r;
        t instanceof a ? e.push.apply(e, _toConsumableArray(t._items)) : e.push(t instanceof s ? t : "number" == typeof (r = t) || "boolean" == typeof r || null === r ? r : u(Array.isArray(r) ? r.join(",") : r));
      }

      function d(e, t) {
        if ('""' === t) return e;
        if ('""' === e) return t;

        if ("string" == typeof e) {
          if (t instanceof s || '"' !== e[e.length - 1]) return;
          return "string" != typeof t ? "".concat(e.slice(0, -1)).concat(t, "\"") : '"' === t[0] ? e.slice(0, -1) + t.slice(1) : void 0;
        }

        return "string" != typeof t || '"' !== t[0] || e instanceof s ? void 0 : "\"".concat(e).concat(t.slice(1));
      }

      function u(e) {
        return JSON.stringify(e).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }

      r.str = c, r.addCodeArg = l, r.strConcat = function (e, t) {
        return t.emptyStr() ? e : e.emptyStr() ? t : c(_templateObject || (_templateObject = _taggedTemplateLiteral(["", "", ""])), e, t);
      }, r.stringify = function (e) {
        return new a(u(e));
      }, r.safeStringify = u, r.getProperty = function (e) {
        return "string" == typeof e && r.IDENTIFIER.test(e) ? new a(".".concat(e)) : n(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["[", "]"])), e);
      }, r.getEsmExportName = function (e) {
        if ("string" == typeof e && r.IDENTIFIER.test(e)) return new a("".concat(e));
        throw new Error("CodeGen: invalid export name: ".concat(e, ", use explicit $id name mapping"));
      }, r.regexpCode = function (e) {
        return new a(e.toString());
      };
    }, {}],
    2: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.or = r.and = r.not = r.CodeGen = r.operators = r.varKinds = r.ValueScopeName = r.ValueScope = r.Scope = r.Name = r.regexpCode = r.stringify = r.getProperty = r.nil = r.strConcat = r.str = r._ = void 0;
      var o = e("./code"),
          s = e("./scope");
      var a = e("./code");
      Object.defineProperty(r, "_", {
        enumerable: !0,
        get: function () {
          return a._;
        }
      }), Object.defineProperty(r, "str", {
        enumerable: !0,
        get: function () {
          return a.str;
        }
      }), Object.defineProperty(r, "strConcat", {
        enumerable: !0,
        get: function () {
          return a.strConcat;
        }
      }), Object.defineProperty(r, "nil", {
        enumerable: !0,
        get: function () {
          return a.nil;
        }
      }), Object.defineProperty(r, "getProperty", {
        enumerable: !0,
        get: function () {
          return a.getProperty;
        }
      }), Object.defineProperty(r, "stringify", {
        enumerable: !0,
        get: function () {
          return a.stringify;
        }
      }), Object.defineProperty(r, "regexpCode", {
        enumerable: !0,
        get: function () {
          return a.regexpCode;
        }
      }), Object.defineProperty(r, "Name", {
        enumerable: !0,
        get: function () {
          return a.Name;
        }
      });
      var n = e("./scope");
      Object.defineProperty(r, "Scope", {
        enumerable: !0,
        get: function () {
          return n.Scope;
        }
      }), Object.defineProperty(r, "ValueScope", {
        enumerable: !0,
        get: function () {
          return n.ValueScope;
        }
      }), Object.defineProperty(r, "ValueScopeName", {
        enumerable: !0,
        get: function () {
          return n.ValueScopeName;
        }
      }), Object.defineProperty(r, "varKinds", {
        enumerable: !0,
        get: function () {
          return n.varKinds;
        }
      }), r.operators = {
        GT: new o._Code(">"),
        GTE: new o._Code(">="),
        LT: new o._Code("<"),
        LTE: new o._Code("<="),
        EQ: new o._Code("==="),
        NEQ: new o._Code("!=="),
        NOT: new o._Code("!"),
        OR: new o._Code("||"),
        AND: new o._Code("&&"),
        ADD: new o._Code("+")
      };

      var i = function () {
        function i() {
          _classCallCheck(this, i);
        }

        _createClass(i, [{
          key: "optimizeNodes",
          value: function optimizeNodes() {
            return this;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            return this;
          }
        }]);

        return i;
      }();

      var c = function (_i) {
        _inherits(c, _i);

        var _super3 = _createSuper(c);

        function c(e, t, r) {
          var _this3;

          _classCallCheck(this, c);

          _this3 = _super3.call(this), _this3.varKind = e, _this3.name = t, _this3.rhs = r;
          return _this3;
        }

        _createClass(c, [{
          key: "render",
          value: function render(_ref2) {
            var e = _ref2.es5,
                t = _ref2._n;
            return "".concat(e ? s.varKinds["var"] : this.varKind, " ").concat(this.name).concat(void 0 === this.rhs ? "" : " = ".concat(this.rhs), ";") + t;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            if (e[this.name.str]) return this.rhs && (this.rhs = x(this.rhs, e, t)), this;
          }
        }, {
          key: "names",
          get: function () {
            return this.rhs instanceof o._CodeOrName ? this.rhs.names : {};
          }
        }]);

        return c;
      }(i);

      var l = function (_i2) {
        _inherits(l, _i2);

        var _super4 = _createSuper(l);

        function l(e, t, r) {
          var _this4;

          _classCallCheck(this, l);

          _this4 = _super4.call(this), _this4.lhs = e, _this4.rhs = t, _this4.sideEffects = r;
          return _this4;
        }

        _createClass(l, [{
          key: "render",
          value: function render(_ref3) {
            var e = _ref3._n;
            return "".concat(this.lhs, " = ").concat(this.rhs, ";") + e;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            if (!(this.lhs instanceof o.Name) || e[this.lhs.str] || this.sideEffects) return this.rhs = x(this.rhs, e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            return O(this.lhs instanceof o.Name ? {} : _objectSpread2({}, this.lhs.names), this.rhs);
          }
        }]);

        return l;
      }(i);

      var d = function (_l) {
        _inherits(d, _l);

        var _super5 = _createSuper(d);

        function d(e, t, r, o) {
          var _this5;

          _classCallCheck(this, d);

          _this5 = _super5.call(this, e, r, o), _this5.op = t;
          return _this5;
        }

        _createClass(d, [{
          key: "render",
          value: function render(_ref4) {
            var e = _ref4._n;
            return "".concat(this.lhs, " ").concat(this.op, "= ").concat(this.rhs, ";") + e;
          }
        }]);

        return d;
      }(l);

      var u = function (_i3) {
        _inherits(u, _i3);

        var _super6 = _createSuper(u);

        function u(e) {
          var _this6;

          _classCallCheck(this, u);

          _this6 = _super6.call(this), _this6.label = e, _this6.names = {};
          return _this6;
        }

        _createClass(u, [{
          key: "render",
          value: function render(_ref5) {
            var e = _ref5._n;
            return "".concat(this.label, ":") + e;
          }
        }]);

        return u;
      }(i);

      var f = function (_i4) {
        _inherits(f, _i4);

        var _super7 = _createSuper(f);

        function f(e) {
          var _this7;

          _classCallCheck(this, f);

          _this7 = _super7.call(this), _this7.label = e, _this7.names = {};
          return _this7;
        }

        _createClass(f, [{
          key: "render",
          value: function render(_ref6) {
            var e = _ref6._n;
            return "break".concat(this.label ? " ".concat(this.label) : "", ";") + e;
          }
        }]);

        return f;
      }(i);

      var p = function (_i5) {
        _inherits(p, _i5);

        var _super8 = _createSuper(p);

        function p(e) {
          var _this8;

          _classCallCheck(this, p);

          _this8 = _super8.call(this), _this8.error = e;
          return _this8;
        }

        _createClass(p, [{
          key: "render",
          value: function render(_ref7) {
            var e = _ref7._n;
            return "throw ".concat(this.error, ";") + e;
          }
        }, {
          key: "names",
          get: function () {
            return this.error.names;
          }
        }]);

        return p;
      }(i);

      var m = function (_i6) {
        _inherits(m, _i6);

        var _super9 = _createSuper(m);

        function m(e) {
          var _this9;

          _classCallCheck(this, m);

          _this9 = _super9.call(this), _this9.code = e;
          return _this9;
        }

        _createClass(m, [{
          key: "render",
          value: function render(_ref8) {
            var e = _ref8._n;
            return "".concat(this.code, ";") + e;
          }
        }, {
          key: "optimizeNodes",
          value: function optimizeNodes() {
            return "".concat(this.code) ? this : void 0;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            return this.code = x(this.code, e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            return this.code instanceof o._CodeOrName ? this.code.names : {};
          }
        }]);

        return m;
      }(i);

      var h = function (_i7) {
        _inherits(h, _i7);

        var _super10 = _createSuper(h);

        function h() {
          var _this10;

          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, h);

          _this10 = _super10.call(this), _this10.nodes = e;
          return _this10;
        }

        _createClass(h, [{
          key: "render",
          value: function render(e) {
            return this.nodes.reduce(function (t, r) {
              return t + r.render(e);
            }, "");
          }
        }, {
          key: "optimizeNodes",
          value: function optimizeNodes() {
            var e = this.nodes;
            var t = e.length;

            for (; t--;) {
              var _r2 = e[t].optimizeNodes();

              Array.isArray(_r2) ? e.splice.apply(e, [t, 1].concat(_toConsumableArray(_r2))) : _r2 ? e[t] = _r2 : e.splice(t, 1);
            }

            return e.length > 0 ? this : void 0;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            var r = this.nodes;
            var o = r.length;

            for (; o--;) {
              var _s = r[o];
              _s.optimizeNames(e, t) || (T(e, _s.names), r.splice(o, 1));
            }

            return r.length > 0 ? this : void 0;
          }
        }, {
          key: "names",
          get: function () {
            return this.nodes.reduce(function (e, t) {
              return C(e, t.names);
            }, {});
          }
        }]);

        return h;
      }(i);

      var y = function (_h) {
        _inherits(y, _h);

        var _super11 = _createSuper(y);

        function y() {
          _classCallCheck(this, y);

          return _super11.apply(this, arguments);
        }

        _createClass(y, [{
          key: "render",
          value: function render(e) {
            return "{" + e._n + _get(_getPrototypeOf(y.prototype), "render", this).call(this, e) + "}" + e._n;
          }
        }]);

        return y;
      }(h);

      var v = function (_h2) {
        _inherits(v, _h2);

        var _super12 = _createSuper(v);

        function v() {
          _classCallCheck(this, v);

          return _super12.apply(this, arguments);
        }

        return v;
      }(h);

      var g = function (_y) {
        _inherits(g, _y);

        var _super13 = _createSuper(g);

        function g() {
          _classCallCheck(this, g);

          return _super13.apply(this, arguments);
        }

        return g;
      }(y);

      g.kind = "else";

      var $ = function (_y2) {
        _inherits($, _y2);

        var _super14 = _createSuper($);

        function $(e, t) {
          var _this11;

          _classCallCheck(this, $);

          _this11 = _super14.call(this, t), _this11.condition = e;
          return _this11;
        }

        _createClass($, [{
          key: "render",
          value: function render(e) {
            var t = "if(".concat(this.condition, ")") + _get(_getPrototypeOf($.prototype), "render", this).call(this, e);

            return this["else"] && (t += "else " + this["else"].render(e)), t;
          }
        }, {
          key: "optimizeNodes",
          value: function optimizeNodes() {
            _get(_getPrototypeOf($.prototype), "optimizeNodes", this).call(this);

            var e = this.condition;
            if (!0 === e) return this.nodes;
            var t = this["else"];

            if (t) {
              var _e = t.optimizeNodes();

              t = this["else"] = Array.isArray(_e) ? new g(_e) : _e;
            }

            return t ? !1 === e ? t instanceof $ ? t : t.nodes : this.nodes.length ? this : new $(I(e), t instanceof $ ? [t] : t.nodes) : !1 !== e && this.nodes.length ? this : void 0;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            var r;
            if (this["else"] = null === (r = this["else"]) || void 0 === r ? void 0 : r.optimizeNames(e, t), _get(_getPrototypeOf($.prototype), "optimizeNames", this).call(this, e, t) || this["else"]) return this.condition = x(this.condition, e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            var e = _get(_getPrototypeOf($.prototype), "names", this);

            return O(e, this.condition), this["else"] && C(e, this["else"].names), e;
          }
        }]);

        return $;
      }(y);

      $.kind = "if";

      var _ = function (_y3) {
        _inherits(_, _y3);

        var _super15 = _createSuper(_);

        function _() {
          _classCallCheck(this, _);

          return _super15.apply(this, arguments);
        }

        return _;
      }(y);

      _.kind = "for";

      var w = function (_ref9) {
        _inherits(w, _ref9);

        var _super16 = _createSuper(w);

        function w(e) {
          var _this12;

          _classCallCheck(this, w);

          _this12 = _super16.call(this), _this12.iteration = e;
          return _this12;
        }

        _createClass(w, [{
          key: "render",
          value: function render(e) {
            return "for(".concat(this.iteration, ")") + _get(_getPrototypeOf(w.prototype), "render", this).call(this, e);
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            if (_get(_getPrototypeOf(w.prototype), "optimizeNames", this).call(this, e, t)) return this.iteration = x(this.iteration, e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            return C(_get(_getPrototypeOf(w.prototype), "names", this), this.iteration.names);
          }
        }]);

        return w;
      }(_);

      var b = function (_ref10) {
        _inherits(b, _ref10);

        var _super17 = _createSuper(b);

        function b(e, t, r, o) {
          var _this13;

          _classCallCheck(this, b);

          _this13 = _super17.call(this), _this13.varKind = e, _this13.name = t, _this13.from = r, _this13.to = o;
          return _this13;
        }

        _createClass(b, [{
          key: "render",
          value: function render(e) {
            var t = e.es5 ? s.varKinds["var"] : this.varKind,
                r = this.name,
                o = this.from,
                a = this.to;
            return "for(".concat(t, " ").concat(r, "=").concat(o, "; ").concat(r, "<").concat(a, "; ").concat(r, "++)") + _get(_getPrototypeOf(b.prototype), "render", this).call(this, e);
          }
        }, {
          key: "names",
          get: function () {
            var e = O(_get(_getPrototypeOf(b.prototype), "names", this), this.from);
            return O(e, this.to);
          }
        }]);

        return b;
      }(_);

      var E = function (_ref11) {
        _inherits(E, _ref11);

        var _super18 = _createSuper(E);

        function E(e, t, r, o) {
          var _this14;

          _classCallCheck(this, E);

          _this14 = _super18.call(this), _this14.loop = e, _this14.varKind = t, _this14.name = r, _this14.iterable = o;
          return _this14;
        }

        _createClass(E, [{
          key: "render",
          value: function render(e) {
            return "for(".concat(this.varKind, " ").concat(this.name, " ").concat(this.loop, " ").concat(this.iterable, ")") + _get(_getPrototypeOf(E.prototype), "render", this).call(this, e);
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            if (_get(_getPrototypeOf(E.prototype), "optimizeNames", this).call(this, e, t)) return this.iterable = x(this.iterable, e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            return C(_get(_getPrototypeOf(E.prototype), "names", this), this.iterable.names);
          }
        }]);

        return E;
      }(_);

      var P = function (_y4) {
        _inherits(P, _y4);

        var _super19 = _createSuper(P);

        function P(e, t, r) {
          var _this15;

          _classCallCheck(this, P);

          _this15 = _super19.call(this), _this15.name = e, _this15.args = t, _this15.async = r;
          return _this15;
        }

        _createClass(P, [{
          key: "render",
          value: function render(e) {
            return "".concat(this.async ? "async " : "", "function ").concat(this.name, "(").concat(this.args, ")") + _get(_getPrototypeOf(P.prototype), "render", this).call(this, e);
          }
        }]);

        return P;
      }(y);

      P.kind = "func";

      var S = function (_h3) {
        _inherits(S, _h3);

        var _super20 = _createSuper(S);

        function S() {
          _classCallCheck(this, S);

          return _super20.apply(this, arguments);
        }

        _createClass(S, [{
          key: "render",
          value: function render(e) {
            return "return " + _get(_getPrototypeOf(S.prototype), "render", this).call(this, e);
          }
        }]);

        return S;
      }(h);

      S.kind = "return";

      var N = function (_y5) {
        _inherits(N, _y5);

        var _super21 = _createSuper(N);

        function N() {
          _classCallCheck(this, N);

          return _super21.apply(this, arguments);
        }

        _createClass(N, [{
          key: "render",
          value: function render(e) {
            var t = "try" + _get(_getPrototypeOf(N.prototype), "render", this).call(this, e);

            return this["catch"] && (t += this["catch"].render(e)), this["finally"] && (t += this["finally"].render(e)), t;
          }
        }, {
          key: "optimizeNodes",
          value: function optimizeNodes() {
            var e, t;
            return _get(_getPrototypeOf(N.prototype), "optimizeNodes", this).call(this), null === (e = this["catch"]) || void 0 === e || e.optimizeNodes(), null === (t = this["finally"]) || void 0 === t || t.optimizeNodes(), this;
          }
        }, {
          key: "optimizeNames",
          value: function optimizeNames(e, t) {
            var r, o;
            return _get(_getPrototypeOf(N.prototype), "optimizeNames", this).call(this, e, t), null === (r = this["catch"]) || void 0 === r || r.optimizeNames(e, t), null === (o = this["finally"]) || void 0 === o || o.optimizeNames(e, t), this;
          }
        }, {
          key: "names",
          get: function () {
            var e = _get(_getPrototypeOf(N.prototype), "names", this);

            return this["catch"] && C(e, this["catch"].names), this["finally"] && C(e, this["finally"].names), e;
          }
        }]);

        return N;
      }(y);

      var k = function (_y6) {
        _inherits(k, _y6);

        var _super22 = _createSuper(k);

        function k(e) {
          var _this16;

          _classCallCheck(this, k);

          _this16 = _super22.call(this), _this16.error = e;
          return _this16;
        }

        _createClass(k, [{
          key: "render",
          value: function render(e) {
            return "catch(".concat(this.error, ")") + _get(_getPrototypeOf(k.prototype), "render", this).call(this, e);
          }
        }]);

        return k;
      }(y);

      k.kind = "catch";

      var j = function (_y7) {
        _inherits(j, _y7);

        var _super23 = _createSuper(j);

        function j() {
          _classCallCheck(this, j);

          return _super23.apply(this, arguments);
        }

        _createClass(j, [{
          key: "render",
          value: function render(e) {
            return "finally" + _get(_getPrototypeOf(j.prototype), "render", this).call(this, e);
          }
        }]);

        return j;
      }(y);

      j.kind = "finally";

      function C(e, t) {
        for (var _r3 in t) {
          e[_r3] = (e[_r3] || 0) + (t[_r3] || 0);
        }

        return e;
      }

      function O(e, t) {
        return t instanceof o._CodeOrName ? C(e, t.names) : e;
      }

      function x(e, t, r) {
        return e instanceof o.Name ? a(e) : (s = e) instanceof o._Code && s._items.some(function (e) {
          return e instanceof o.Name && 1 === t[e.str] && void 0 !== r[e.str];
        }) ? new o._Code(e._items.reduce(function (e, t) {
          return t instanceof o.Name && (t = a(t)), t instanceof o._Code ? e.push.apply(e, _toConsumableArray(t._items)) : e.push(t), e;
        }, [])) : e;
        var s;

        function a(e) {
          var o = r[e.str];
          return void 0 === o || 1 !== t[e.str] ? e : (delete t[e.str], o);
        }
      }

      function T(e, t) {
        for (var _r4 in t) {
          e[_r4] = (e[_r4] || 0) - (t[_r4] || 0);
        }
      }

      function I(e) {
        return "boolean" == typeof e || "number" == typeof e || null === e ? !e : o._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["!", ""])), M(e));
      }

      r.CodeGen = function () {
        function _class(e) {
          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, _class);

          this._values = {}, this._blockStarts = [], this._constants = {}, this.opts = _objectSpread2(_objectSpread2({}, t), {}, {
            _n: t.lines ? "\n" : ""
          }), this._extScope = e, this._scope = new s.Scope({
            parent: e
          }), this._nodes = [new v()];
        }

        _createClass(_class, [{
          key: "toString",
          value: function toString() {
            return this._root.render(this.opts);
          }
        }, {
          key: "name",
          value: function name(e) {
            return this._scope.name(e);
          }
        }, {
          key: "scopeName",
          value: function scopeName(e) {
            return this._extScope.name(e);
          }
        }, {
          key: "scopeValue",
          value: function scopeValue(e, t) {
            var r = this._extScope.value(e, t);

            return (this._values[r.prefix] || (this._values[r.prefix] = new Set())).add(r), r;
          }
        }, {
          key: "getScopeValue",
          value: function getScopeValue(e, t) {
            return this._extScope.getValue(e, t);
          }
        }, {
          key: "scopeRefs",
          value: function scopeRefs(e) {
            return this._extScope.scopeRefs(e, this._values);
          }
        }, {
          key: "scopeCode",
          value: function scopeCode() {
            return this._extScope.scopeCode(this._values);
          }
        }, {
          key: "_def",
          value: function _def(e, t, r, o) {
            var s = this._scope.toName(t);

            return void 0 !== r && o && (this._constants[s.str] = r), this._leafNode(new c(e, s, r)), s;
          }
        }, {
          key: "const",
          value: function _const(e, t, r) {
            return this._def(s.varKinds["const"], e, t, r);
          }
        }, {
          key: "let",
          value: function _let(e, t, r) {
            return this._def(s.varKinds["let"], e, t, r);
          }
        }, {
          key: "var",
          value: function _var(e, t, r) {
            return this._def(s.varKinds["var"], e, t, r);
          }
        }, {
          key: "assign",
          value: function assign(e, t, r) {
            return this._leafNode(new l(e, t, r));
          }
        }, {
          key: "add",
          value: function add(e, t) {
            return this._leafNode(new d(e, r.operators.ADD, t));
          }
        }, {
          key: "code",
          value: function code(e) {
            return "function" == typeof e ? e() : e !== o.nil && this._leafNode(new m(e)), this;
          }
        }, {
          key: "object",
          value: function object() {
            var t = ["{"];

            for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              e[_key3] = arguments[_key3];
            }

            for (var _i8 = 0, _e2 = e; _i8 < _e2.length; _i8++) {
              var _e2$_i = _slicedToArray(_e2[_i8], 2),
                  _r5 = _e2$_i[0],
                  _s2 = _e2$_i[1];

              t.length > 1 && t.push(","), t.push(_r5), (_r5 !== _s2 || this.opts.es5) && (t.push(":"), (0, o.addCodeArg)(t, _s2));
            }

            return t.push("}"), new o._Code(t);
          }
        }, {
          key: "if",
          value: function _if(e, t, r) {
            if (this._blockNode(new $(e)), t && r) this.code(t)["else"]().code(r).endIf();else if (t) this.code(t).endIf();else if (r) throw new Error('CodeGen: "else" body without "then" body');
            return this;
          }
        }, {
          key: "elseIf",
          value: function elseIf(e) {
            return this._elseNode(new $(e));
          }
        }, {
          key: "else",
          value: function _else() {
            return this._elseNode(new g());
          }
        }, {
          key: "endIf",
          value: function endIf() {
            return this._endBlockNode($, g);
          }
        }, {
          key: "_for",
          value: function _for(e, t) {
            return this._blockNode(e), t && this.code(t).endFor(), this;
          }
        }, {
          key: "for",
          value: function _for(e, t) {
            return this._for(new w(e), t);
          }
        }, {
          key: "forRange",
          value: function forRange(e, t, r, o) {
            var a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? s.varKinds["var"] : s.varKinds["let"];

            var n = this._scope.toName(e);

            return this._for(new b(a, n, t, r), function () {
              return o(n);
            });
          }
        }, {
          key: "forOf",
          value: function forOf(e, t, r) {
            var _this17 = this;

            var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : s.varKinds["const"];

            var n = this._scope.toName(e);

            if (this.opts.es5) {
              var _e3 = t instanceof o.Name ? t : this["var"]("_arr", t);

              return this.forRange("_i", 0, o._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["", ".length"])), _e3), function (t) {
                _this17["var"](n, o._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["", "[", "]"])), _e3, t)), r(n);
              });
            }

            return this._for(new E("of", a, n, t), function () {
              return r(n);
            });
          }
        }, {
          key: "forIn",
          value: function forIn(e, t, r) {
            var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? s.varKinds["var"] : s.varKinds["const"];
            if (this.opts.ownProperties) return this.forOf(e, o._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Object.keys(", ")"])), t), r);

            var n = this._scope.toName(e);

            return this._for(new E("in", a, n, t), function () {
              return r(n);
            });
          }
        }, {
          key: "endFor",
          value: function endFor() {
            return this._endBlockNode(_);
          }
        }, {
          key: "label",
          value: function label(e) {
            return this._leafNode(new u(e));
          }
        }, {
          key: "break",
          value: function _break(e) {
            return this._leafNode(new f(e));
          }
        }, {
          key: "return",
          value: function _return(e) {
            var t = new S();
            if (this._blockNode(t), this.code(e), 1 !== t.nodes.length) throw new Error('CodeGen: "return" should have one node');
            return this._endBlockNode(S);
          }
        }, {
          key: "try",
          value: function _try(e, t, r) {
            if (!t && !r) throw new Error('CodeGen: "try" without "catch" and "finally"');
            var o = new N();

            if (this._blockNode(o), this.code(e), t) {
              var _e4 = this.name("e");

              this._currNode = o["catch"] = new k(_e4), t(_e4);
            }

            return r && (this._currNode = o["finally"] = new j(), this.code(r)), this._endBlockNode(k, j);
          }
        }, {
          key: "throw",
          value: function _throw(e) {
            return this._leafNode(new p(e));
          }
        }, {
          key: "block",
          value: function block(e, t) {
            return this._blockStarts.push(this._nodes.length), e && this.code(e).endBlock(t), this;
          }
        }, {
          key: "endBlock",
          value: function endBlock(e) {
            var t = this._blockStarts.pop();

            if (void 0 === t) throw new Error("CodeGen: not in self-balancing block");
            var r = this._nodes.length - t;
            if (r < 0 || void 0 !== e && r !== e) throw new Error("CodeGen: wrong number of nodes: ".concat(r, " vs ").concat(e, " expected"));
            return this._nodes.length = t, this;
          }
        }, {
          key: "func",
          value: function func(e) {
            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : o.nil;
            var r = arguments.length > 2 ? arguments[2] : undefined;
            var s = arguments.length > 3 ? arguments[3] : undefined;
            return this._blockNode(new P(e, t, r)), s && this.code(s).endFunc(), this;
          }
        }, {
          key: "endFunc",
          value: function endFunc() {
            return this._endBlockNode(P);
          }
        }, {
          key: "optimize",
          value: function optimize() {
            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            for (; e-- > 0;) {
              this._root.optimizeNodes(), this._root.optimizeNames(this._root.names, this._constants);
            }
          }
        }, {
          key: "_leafNode",
          value: function _leafNode(e) {
            return this._currNode.nodes.push(e), this;
          }
        }, {
          key: "_blockNode",
          value: function _blockNode(e) {
            this._currNode.nodes.push(e), this._nodes.push(e);
          }
        }, {
          key: "_endBlockNode",
          value: function _endBlockNode(e, t) {
            var r = this._currNode;
            if (r instanceof e || t && r instanceof t) return this._nodes.pop(), this;
            throw new Error("CodeGen: not in block \"".concat(t ? "".concat(e.kind, "/").concat(t.kind) : e.kind, "\""));
          }
        }, {
          key: "_elseNode",
          value: function _elseNode(e) {
            var t = this._currNode;
            if (!(t instanceof $)) throw new Error('CodeGen: "else" without "if"');
            return this._currNode = t["else"] = e, this;
          }
        }, {
          key: "_root",
          get: function () {
            return this._nodes[0];
          }
        }, {
          key: "_currNode",
          get: function () {
            var e = this._nodes;
            return e[e.length - 1];
          },
          set: function (e) {
            var t = this._nodes;
            t[t.length - 1] = e;
          }
        }]);

        return _class;
      }(), r.not = I;
      var R = A(r.operators.AND);

      r.and = function () {
        for (var _len4 = arguments.length, e = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          e[_key4] = arguments[_key4];
        }

        return e.reduce(R);
      };

      var D = A(r.operators.OR);

      function A(e) {
        return function (t, r) {
          return t === o.nil ? r : r === o.nil ? t : o._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["", " ", " ", ""])), M(t), e, M(r));
        };
      }

      function M(e) {
        return e instanceof o.Name ? e : o._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["(", ")"])), e);
      }

      r.or = function () {
        for (var _len5 = arguments.length, e = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          e[_key5] = arguments[_key5];
        }

        return e.reduce(D);
      };
    }, {
      "./code": 1,
      "./scope": 3
    }],
    3: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.ValueScope = r.ValueScopeName = r.Scope = r.varKinds = r.UsedValueState = void 0;
      var o = e("./code");

      var s = function (_Error) {
        _inherits(s, _Error);

        var _super24 = _createSuper(s);

        function s(e) {
          var _this18;

          _classCallCheck(this, s);

          _this18 = _super24.call(this, "CodeGen: \"code\" for ".concat(e, " not defined")), _this18.value = e.value;
          return _this18;
        }

        return s;
      }(_wrapNativeSuper(Error));

      var a;
      !function (e) {
        e[e.Started = 0] = "Started", e[e.Completed = 1] = "Completed";
      }(a = r.UsedValueState || (r.UsedValueState = {})), r.varKinds = {
        "const": new o.Name("const"),
        "let": new o.Name("let"),
        "var": new o.Name("var")
      };

      var n = function () {
        function n() {
          var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              e = _ref12.prefixes,
              t = _ref12.parent;

          _classCallCheck(this, n);

          this._names = {}, this._prefixes = e, this._parent = t;
        }

        _createClass(n, [{
          key: "toName",
          value: function toName(e) {
            return e instanceof o.Name ? e : this.name(e);
          }
        }, {
          key: "name",
          value: function name(e) {
            return new o.Name(this._newName(e));
          }
        }, {
          key: "_newName",
          value: function _newName(e) {
            return "".concat(e).concat((this._names[e] || this._nameGroup(e)).index++);
          }
        }, {
          key: "_nameGroup",
          value: function _nameGroup(e) {
            var t, r;
            if ((null === (r = null === (t = this._parent) || void 0 === t ? void 0 : t._prefixes) || void 0 === r ? void 0 : r.has(e)) || this._prefixes && !this._prefixes.has(e)) throw new Error("CodeGen: prefix \"".concat(e, "\" is not allowed in this scope"));
            return this._names[e] = {
              prefix: e,
              index: 0
            };
          }
        }]);

        return n;
      }();

      r.Scope = n;

      var i = function (_o$Name) {
        _inherits(i, _o$Name);

        var _super25 = _createSuper(i);

        function i(e, t) {
          var _this19;

          _classCallCheck(this, i);

          _this19 = _super25.call(this, t), _this19.prefix = e;
          return _this19;
        }

        _createClass(i, [{
          key: "setValue",
          value: function setValue(e, _ref13) {
            var t = _ref13.property,
                r = _ref13.itemIndex;
            this.value = e, this.scopePath = o._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([".", "[", "]"])), new o.Name(t), r);
          }
        }]);

        return i;
      }(o.Name);

      r.ValueScopeName = i;

      var c = o._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n"], ["\\n"])));

      r.ValueScope = function (_n) {
        _inherits(_class2, _n);

        var _super26 = _createSuper(_class2);

        function _class2(e) {
          var _this20;

          _classCallCheck(this, _class2);

          _this20 = _super26.call(this, e), _this20._values = {}, _this20._scope = e.scope, _this20.opts = _objectSpread2(_objectSpread2({}, e), {}, {
            _n: e.lines ? c : o.nil
          });
          return _this20;
        }

        _createClass(_class2, [{
          key: "get",
          value: function get() {
            return this._scope;
          }
        }, {
          key: "name",
          value: function name(e) {
            return new i(e, this._newName(e));
          }
        }, {
          key: "value",
          value: function value(e, t) {
            var r;
            if (void 0 === t.ref) throw new Error("CodeGen: ref must be passed in value");
            var o = this.toName(e),
                s = o.prefix,
                a = null !== (r = t.key) && void 0 !== r ? r : t.ref;
            var n = this._values[s];

            if (n) {
              var _e5 = n.get(a);

              if (_e5) return _e5;
            } else n = this._values[s] = new Map();

            n.set(a, o);
            var i = this._scope[s] || (this._scope[s] = []),
                c = i.length;
            return i[c] = t.ref, o.setValue(t, {
              property: s,
              itemIndex: c
            }), o;
          }
        }, {
          key: "getValue",
          value: function getValue(e, t) {
            var r = this._values[e];
            if (r) return r.get(t);
          }
        }, {
          key: "scopeRefs",
          value: function scopeRefs(e) {
            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._values;
            return this._reduceValues(t, function (t) {
              if (void 0 === t.scopePath) throw new Error("CodeGen: name \"".concat(t, "\" has no value"));
              return o._(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["", "", ""])), e, t.scopePath);
            });
          }
        }, {
          key: "scopeCode",
          value: function scopeCode() {
            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._values;
            var t = arguments.length > 1 ? arguments[1] : undefined;
            var r = arguments.length > 2 ? arguments[2] : undefined;
            return this._reduceValues(e, function (e) {
              if (void 0 === e.value) throw new Error("CodeGen: name \"".concat(e, "\" has no value"));
              return e.value.code;
            }, t, r);
          }
        }, {
          key: "_reduceValues",
          value: function _reduceValues(e, t) {
            var _this21 = this;

            var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var i = arguments.length > 3 ? arguments[3] : undefined;
            var c = o.nil;

            var _loop = function (l) {
              var d = e[l];
              if (!d) return "continue";
              var u = n[l] = n[l] || new Map();
              d.forEach(function (e) {
                if (u.has(e)) return;
                u.set(e, a.Started);
                var n = t(e);

                if (n) {
                  c = o._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["", "", " ", " = ", ";", ""])), c, _this21.opts.es5 ? r.varKinds["var"] : r.varKinds["const"], e, n, _this21.opts._n);
                } else {
                  if (!(n = null == i ? void 0 : i(e))) throw new s(e);
                  c = o._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["", "", "", ""])), c, n, _this21.opts._n);
                }

                u.set(e, a.Completed);
              });
            };

            for (var l in e) {
              var _ret = _loop(l);

              if (_ret === "continue") continue;
            }

            return c;
          }
        }]);

        return _class2;
      }(n);
    }, {
      "./code": 1
    }],
    4: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.extendErrors = r.resetErrorsCount = r.reportExtraError = r.reportError = r.keyword$DataError = r.keywordError = void 0;
      var o = e("./codegen"),
          s = e("./util"),
          a = e("./names");

      function n(e, t) {
        var r = e["const"]("err", t);
        e["if"](o._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["", " === null"])), a["default"].vErrors), function () {
          return e.assign(a["default"].vErrors, o._(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["[", "]"])), r));
        }, o._(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["", ".push(", ")"])), a["default"].vErrors, r)), e.code(o._(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["", "++"])), a["default"].errors));
      }

      function i(e, t) {
        var r = e.gen,
            s = e.validateName,
            a = e.schemaEnv;
        a.$async ? r["throw"](o._(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["new ", "(", ")"])), e.ValidationError, t)) : (r.assign(o._(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["", ".errors"])), s), t), r["return"](!1));
      }

      r.keywordError = {
        message: function (_ref14) {
          var e = _ref14.keyword;
          return o.str(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["must pass \"", "\" keyword validation"])), e);
        }
      }, r.keyword$DataError = {
        message: function (_ref15) {
          var e = _ref15.keyword,
              t = _ref15.schemaType;
          return t ? o.str(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\"", "\" keyword must be ", " ($data)"])), e, t) : o.str(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\"", "\" keyword is invalid ($data)"])), e);
        }
      }, r.reportError = function (e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.keywordError;
        var s = arguments.length > 2 ? arguments[2] : undefined;
        var a = arguments.length > 3 ? arguments[3] : undefined;
        var c = e.it,
            d = c.gen,
            u = c.compositeRule,
            f = c.allErrors,
            p = l(e, t, s);
        (null != a ? a : u || f) ? n(d, p) : i(c, o._(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["[", "]"])), p));
      }, r.reportExtraError = function (e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.keywordError;
        var o = arguments.length > 2 ? arguments[2] : undefined;
        var s = e.it,
            c = s.gen,
            d = s.compositeRule,
            u = s.allErrors;
        n(c, l(e, t, o)), d || u || i(s, a["default"].vErrors);
      }, r.resetErrorsCount = function (e, t) {
        e.assign(a["default"].errors, t), e["if"](o._(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["", " !== null"])), a["default"].vErrors), function () {
          return e["if"](t, function () {
            return e.assign(o._(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["", ".length"])), a["default"].vErrors), t);
          }, function () {
            return e.assign(a["default"].vErrors, null);
          });
        });
      }, r.extendErrors = function (_ref16) {
        var e = _ref16.gen,
            t = _ref16.keyword,
            r = _ref16.schemaValue,
            s = _ref16.data,
            n = _ref16.errsCount,
            i = _ref16.it;
        if (void 0 === n) throw new Error("ajv implementation error");
        var c = e.name("err");
        e.forRange("i", n, a["default"].errors, function (n) {
          e["const"](c, o._(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["", "[", "]"])), a["default"].vErrors, n)), e["if"](o._(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["", ".instancePath === undefined"])), c), function () {
            return e.assign(o._(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["", ".instancePath"])), c), (0, o.strConcat)(a["default"].instancePath, i.errorPath));
          }), e.assign(o._(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["", ".schemaPath"])), c), o.str(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["", "/", ""])), i.errSchemaPath, t)), i.opts.verbose && (e.assign(o._(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["", ".schema"])), c), r), e.assign(o._(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["", ".data"])), c), s));
        });
      };
      var c = {
        keyword: new o.Name("keyword"),
        schemaPath: new o.Name("schemaPath"),
        params: new o.Name("params"),
        propertyName: new o.Name("propertyName"),
        message: new o.Name("message"),
        schema: new o.Name("schema"),
        parentSchema: new o.Name("parentSchema")
      };

      function l(e, t, r) {
        var s = e.it.createErrors;
        return !1 === s ? o._(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["{}"]))) : function (e, t) {
          var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var s = e.gen,
              n = e.it,
              i = [d(n, r), u(e, r)];
          return function (e, _ref17, s) {
            var t = _ref17.params,
                r = _ref17.message;
            var n = e.keyword,
                i = e.data,
                l = e.schemaValue,
                d = e.it,
                u = d.opts,
                f = d.propertyName,
                p = d.topSchemaRef,
                m = d.schemaPath;
            s.push([c.keyword, n], [c.params, "function" == typeof t ? t(e) : t || o._(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["{}"])))]), u.messages && s.push([c.message, "function" == typeof r ? r(e) : r]);
            u.verbose && s.push([c.schema, l], [c.parentSchema, o._(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["", "", ""])), p, m)], [a["default"].data, i]);
            f && s.push([c.propertyName, f]);
          }(e, t, i), s.object.apply(s, i);
        }(e, t, r);
      }

      function d(_ref18, _ref19) {
        var e = _ref18.errorPath;
        var t = _ref19.instancePath;
        var r = t ? o.str(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["", "", ""])), e, (0, s.getErrorPath)(t, s.Type.Str)) : e;
        return [a["default"].instancePath, (0, o.strConcat)(a["default"].instancePath, r)];
      }

      function u(_ref20, _ref21) {
        var e = _ref20.keyword,
            t = _ref20.it.errSchemaPath;
        var r = _ref21.schemaPath,
            a = _ref21.parentSchema;
        var n = a ? t : o.str(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["", "/", ""])), t, e);
        return r && (n = o.str(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["", "", ""])), n, (0, s.getErrorPath)(r, s.Type.Str))), [c.schemaPath, n];
      }
    }, {
      "./codegen": 2,
      "./names": 6,
      "./util": 10
    }],
    5: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.resolveSchema = r.getCompilingSchema = r.resolveRef = r.compileSchema = r.SchemaEnv = void 0;
      var o = e("./codegen"),
          s = e("../runtime/validation_error"),
          a = e("./names"),
          n = e("./resolve"),
          i = e("./util"),
          c = e("./validate");

      var l = function l(e) {
        _classCallCheck(this, l);

        var t;
        var r;
        this.refs = {}, this.dynamicAnchors = {}, "object" == _typeof(e.schema) && (r = e.schema), this.schema = e.schema, this.schemaId = e.schemaId, this.root = e.root || this, this.baseId = null !== (t = e.baseId) && void 0 !== t ? t : (0, n.normalizeId)(null == r ? void 0 : r[e.schemaId || "$id"]), this.schemaPath = e.schemaPath, this.localRefs = e.localRefs, this.meta = e.meta, this.$async = null == r ? void 0 : r.$async, this.refs = {};
      };

      function d(e) {
        var t = f.call(this, e);
        if (t) return t;
        var r = (0, n.getFullPath)(this.opts.uriResolver, e.root.baseId),
            _this$opts$code = this.opts.code,
            i = _this$opts$code.es5,
            l = _this$opts$code.lines,
            d = this.opts.ownProperties,
            u = new o.CodeGen(this.scope, {
          es5: i,
          lines: l,
          ownProperties: d
        });
        var p;
        e.$async && (p = u.scopeValue("Error", {
          ref: s["default"],
          code: o._(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["require(\"ajv/dist/runtime/validation_error\").default"])))
        }));
        var m = u.scopeName("validate");
        e.validateName = m;
        var h = {
          gen: u,
          allErrors: this.opts.allErrors,
          data: a["default"].data,
          parentData: a["default"].parentData,
          parentDataProperty: a["default"].parentDataProperty,
          dataNames: [a["default"].data],
          dataPathArr: [o.nil],
          dataLevel: 0,
          dataTypes: [],
          definedProperties: new Set(),
          topSchemaRef: u.scopeValue("schema", !0 === this.opts.code.source ? {
            ref: e.schema,
            code: (0, o.stringify)(e.schema)
          } : {
            ref: e.schema
          }),
          validateName: m,
          ValidationError: p,
          schema: e.schema,
          schemaEnv: e,
          rootId: r,
          baseId: e.baseId || r,
          schemaPath: o.nil,
          errSchemaPath: e.schemaPath || (this.opts.jtd ? "" : "#"),
          errorPath: o._(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\"\""]))),
          opts: this.opts,
          self: this
        };
        var y;

        try {
          this._compilations.add(e), (0, c.validateFunctionCode)(h), u.optimize(this.opts.code.optimize);

          var _t = u.toString();

          y = "".concat(u.scopeRefs(a["default"].scope), "return ").concat(_t), this.opts.code.process && (y = this.opts.code.process(y, e));

          var _r6 = new Function("".concat(a["default"].self), "".concat(a["default"].scope), y)(this, this.scope.get());

          if (this.scope.value(m, {
            ref: _r6
          }), _r6.errors = null, _r6.schema = e.schema, _r6.schemaEnv = e, e.$async && (_r6.$async = !0), !0 === this.opts.code.source && (_r6.source = {
            validateName: m,
            validateCode: _t,
            scopeValues: u._values
          }), this.opts.unevaluated) {
            var _e6 = h.props,
                _t2 = h.items;
            _r6.evaluated = {
              props: _e6 instanceof o.Name ? void 0 : _e6,
              items: _t2 instanceof o.Name ? void 0 : _t2,
              dynamicProps: _e6 instanceof o.Name,
              dynamicItems: _t2 instanceof o.Name
            }, _r6.source && (_r6.source.evaluated = (0, o.stringify)(_r6.evaluated));
          }

          return e.validate = _r6, e;
        } catch (t) {
          throw delete e.validate, delete e.validateName, y && this.logger.error("Error compiling schema, function code:", y), t;
        } finally {
          this._compilations["delete"](e);
        }
      }

      function u(e) {
        return (0, n.inlineRef)(e.schema, this.opts.inlineRefs) ? e.schema : e.validate ? e : d.call(this, e);
      }

      function f(e) {
        var _iterator = _createForOfIteratorHelper(this._compilations),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _o3 = _step.value;
            if ((t = _o3).schema === (r = e).schema && t.root === r.root && t.baseId === r.baseId) return _o3;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var t, r;
      }

      function p(e, t) {
        var r;

        for (; "string" == typeof (r = this.refs[t]);) {
          t = r;
        }

        return r || this.schemas[t] || m.call(this, e, t);
      }

      function m(e, t) {
        var r = this.opts.uriResolver.parse(t),
            o = (0, n._getFullPath)(this.opts.uriResolver, r);
        var s = (0, n.getFullPath)(this.opts.uriResolver, e.baseId, void 0);
        if (Object.keys(e.schema).length > 0 && o === s) return y.call(this, r, e);
        var a = (0, n.normalizeId)(o),
            i = this.refs[a] || this.schemas[a];

        if ("string" == typeof i) {
          var _t3 = m.call(this, e, i);

          if ("object" != _typeof(null == _t3 ? void 0 : _t3.schema)) return;
          return y.call(this, r, _t3);
        }

        if ("object" == _typeof(null == i ? void 0 : i.schema)) {
          if (i.validate || d.call(this, i), a === (0, n.normalizeId)(t)) {
            var _t4 = i.schema,
                _r7 = this.opts.schemaId,
                _o4 = _t4[_r7];
            return _o4 && (s = (0, n.resolveUrl)(this.opts.uriResolver, s, _o4)), new l({
              schema: _t4,
              schemaId: _r7,
              root: e,
              baseId: s
            });
          }

          return y.call(this, r, i);
        }
      }

      r.SchemaEnv = l, r.compileSchema = d, r.resolveRef = function (e, t, r) {
        var o;
        r = (0, n.resolveUrl)(this.opts.uriResolver, t, r);
        var s = e.refs[r];
        if (s) return s;
        var a = p.call(this, e, r);

        if (void 0 === a) {
          var _s3 = null === (o = e.localRefs) || void 0 === o ? void 0 : o[r],
              _n2 = this.opts.schemaId;

          _s3 && (a = new l({
            schema: _s3,
            schemaId: _n2,
            root: e,
            baseId: t
          }));
        }

        return void 0 !== a ? e.refs[r] = u.call(this, a) : void 0;
      }, r.getCompilingSchema = f, r.resolveSchema = m;
      var h = new Set(["properties", "patternProperties", "enum", "dependencies", "definitions"]);

      function y(e, _ref22) {
        var t = _ref22.baseId,
            r = _ref22.schema,
            o = _ref22.root;
        var s;
        if ("/" !== (null === (s = e.fragment) || void 0 === s ? void 0 : s[0])) return;

        var _iterator2 = _createForOfIteratorHelper(e.fragment.slice(1).split("/")),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _o5 = _step2.value;
            if ("boolean" == typeof r) return;
            var _e8 = r[(0, i.unescapeFragment)(_o5)];
            if (void 0 === _e8) return;

            var _s4 = "object" == _typeof(r = _e8) && r[this.opts.schemaId];

            !h.has(_o5) && _s4 && (t = (0, n.resolveUrl)(this.opts.uriResolver, t, _s4));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var a;

        if ("boolean" != typeof r && r.$ref && !(0, i.schemaHasRulesButRef)(r, this.RULES)) {
          var _e7 = (0, n.resolveUrl)(this.opts.uriResolver, t, r.$ref);

          a = m.call(this, o, _e7);
        }

        var c = this.opts.schemaId;
        return a = a || new l({
          schema: r,
          schemaId: c,
          root: o,
          baseId: t
        }), a.schema !== a.root.schema ? a : void 0;
      }
    }, {
      "../runtime/validation_error": 24,
      "./codegen": 2,
      "./names": 6,
      "./resolve": 8,
      "./util": 10,
      "./validate": 15
    }],
    6: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./codegen"),
          s = {
        data: new o.Name("data"),
        valCxt: new o.Name("valCxt"),
        instancePath: new o.Name("instancePath"),
        parentData: new o.Name("parentData"),
        parentDataProperty: new o.Name("parentDataProperty"),
        rootData: new o.Name("rootData"),
        dynamicAnchors: new o.Name("dynamicAnchors"),
        vErrors: new o.Name("vErrors"),
        errors: new o.Name("errors"),
        "this": new o.Name("this"),
        self: new o.Name("self"),
        scope: new o.Name("scope"),
        json: new o.Name("json"),
        jsonPos: new o.Name("jsonPos"),
        jsonLen: new o.Name("jsonLen"),
        jsonPart: new o.Name("jsonPart")
      };
      r["default"] = s;
    }, {
      "./codegen": 2
    }],
    7: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./resolve");

      var s = function (_Error2) {
        _inherits(s, _Error2);

        var _super27 = _createSuper(s);

        function s(e, t, r, _s5) {
          var _this22;

          _classCallCheck(this, s);

          _this22 = _super27.call(this, _s5 || "can't resolve reference ".concat(r, " from id ").concat(t)), _this22.missingRef = (0, o.resolveUrl)(e, t, r), _this22.missingSchema = (0, o.normalizeId)((0, o.getFullPath)(e, _this22.missingRef));
          return _this22;
        }

        return s;
      }(_wrapNativeSuper(Error));

      r["default"] = s;
    }, {
      "./resolve": 8
    }],
    8: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.getSchemaRefs = r.resolveUrl = r.normalizeId = r._getFullPath = r.getFullPath = r.inlineRef = void 0;
      var o = e("./util"),
          s = e("fast-deep-equal"),
          a = e("json-schema-traverse"),
          n = new Set(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum", "const"]);

      r.inlineRef = function (e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        return "boolean" == typeof e || (!0 === t ? !c(e) : !!t && l(e) <= t);
      };

      var i = new Set(["$ref", "$recursiveRef", "$recursiveAnchor", "$dynamicRef", "$dynamicAnchor"]);

      function c(e) {
        for (var _t5 in e) {
          if (i.has(_t5)) return !0;
          var _r8 = e[_t5];
          if (Array.isArray(_r8) && _r8.some(c)) return !0;
          if ("object" == _typeof(_r8) && c(_r8)) return !0;
        }

        return !1;
      }

      function l(e) {
        var t = 0;

        for (var _r9 in e) {
          if ("$ref" === _r9) return Infinity;
          if (t++, !n.has(_r9) && ("object" == _typeof(e[_r9]) && (0, o.eachItem)(e[_r9], function (e) {
            return t += l(e);
          }), Infinity === t)) return Infinity;
        }

        return t;
      }

      function d(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var r = arguments.length > 2 ? arguments[2] : undefined;
        !1 !== r && (t = p(t));
        var o = e.parse(t);
        return u(e, o);
      }

      function u(e, t) {
        return e.serialize(t).split("#")[0] + "#";
      }

      r.getFullPath = d, r._getFullPath = u;
      var f = /#\/?$/;

      function p(e) {
        return e ? e.replace(f, "") : "";
      }

      r.normalizeId = p, r.resolveUrl = function (e, t, r) {
        return r = p(r), e.resolve(t, r);
      };
      var m = /^[a-z_][-a-z0-9._]*$/i;

      r.getSchemaRefs = function (e, t) {
        var _this23 = this;

        if ("boolean" == typeof e) return {};
        var _this$opts = this.opts,
            r = _this$opts.schemaId,
            o = _this$opts.uriResolver,
            n = p(e[r] || t),
            i = {
          "": n
        },
            c = d(o, n, !1),
            l = {},
            u = new Set();
        return a(e, {
          allKeys: !0
        }, function (e, t, o, s) {
          if (void 0 === s) return;
          var a = c + t;
          var n = i[s];

          function d(t) {
            if (t = p(n ? (0, this.opts.uriResolver.resolve)(n, t) : t), u.has(t)) throw h(t);
            u.add(t);
            var r = this.refs[t];
            return "string" == typeof r && (r = this.refs[r]), "object" == _typeof(r) ? f(e, r.schema, t) : t !== p(a) && ("#" === t[0] ? (f(e, l[t], t), l[t] = e) : this.refs[t] = a), t;
          }

          function y(e) {
            if ("string" == typeof e) {
              if (!m.test(e)) throw new Error("invalid anchor \"".concat(e, "\""));
              d.call(this, "#".concat(e));
            }
          }

          "string" == typeof e[r] && (n = d.call(_this23, e[r])), y.call(_this23, e.$anchor), y.call(_this23, e.$dynamicAnchor), i[t] = n;
        }), l;

        function f(e, t, r) {
          if (void 0 !== t && !s(e, t)) throw h(r);
        }

        function h(e) {
          return new Error("reference \"".concat(e, "\" resolves to more than one schema"));
        }
      };
    }, {
      "./util": 10,
      "fast-deep-equal": 63,
      "json-schema-traverse": 64
    }],
    9: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.getRules = r.isJSONType = void 0;
      var o = new Set(["string", "number", "integer", "boolean", "null", "object", "array"]);
      r.isJSONType = function (e) {
        return "string" == typeof e && o.has(e);
      }, r.getRules = function () {
        var e = {
          number: {
            type: "number",
            rules: []
          },
          string: {
            type: "string",
            rules: []
          },
          array: {
            type: "array",
            rules: []
          },
          object: {
            type: "object",
            rules: []
          }
        };
        return {
          types: _objectSpread2(_objectSpread2({}, e), {}, {
            integer: !0,
            "boolean": !0,
            "null": !0
          }),
          rules: [{
            rules: []
          }, e.number, e.string, e.array, e.object],
          post: {
            rules: []
          },
          all: {},
          keywords: {}
        };
      };
    }, {}],
    10: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.checkStrictMode = r.getErrorPath = r.Type = r.useFunc = r.setEvaluated = r.evaluatedPropsToName = r.mergeEvaluated = r.eachItem = r.unescapeJsonPointer = r.escapeJsonPointer = r.escapeFragment = r.unescapeFragment = r.schemaRefOrVal = r.schemaHasRulesButRef = r.schemaHasRules = r.checkUnknownRules = r.alwaysValidSchema = r.toHash = void 0;
      var o = e("./codegen"),
          s = e("./codegen/code");

      function a(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.schema;
        var r = e.opts,
            o = e.self;
        if (!r.strictSchema) return;
        if ("boolean" == typeof t) return;
        var s = o.RULES.keywords;

        for (var _r10 in t) {
          s[_r10] || m(e, "unknown keyword: \"".concat(_r10, "\""));
        }
      }

      function n(e, t) {
        if ("boolean" == typeof e) return !e;

        for (var _r11 in e) {
          if (t[_r11]) return !0;
        }

        return !1;
      }

      function i(e) {
        return "number" == typeof e ? "".concat(e) : e.replace(/~/g, "~0").replace(/\//g, "~1");
      }

      function c(e) {
        return e.replace(/~1/g, "/").replace(/~0/g, "~");
      }

      function l(_ref23) {
        var e = _ref23.mergeNames,
            t = _ref23.mergeToName,
            r = _ref23.mergeValues,
            s = _ref23.resultToName;
        return function (a, n, i, c) {
          var l = void 0 === i ? n : i instanceof o.Name ? (n instanceof o.Name ? e(a, n, i) : t(a, n, i), i) : n instanceof o.Name ? (t(a, i, n), n) : r(n, i);
          return c !== o.Name || l instanceof o.Name ? l : s(a, l);
        };
      }

      function d(e, t) {
        if (!0 === t) return e["var"]("props", !0);
        var r = e["var"]("props", o._(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["{}"]))));
        return void 0 !== t && u(e, r, t), r;
      }

      function u(e, t, r) {
        Object.keys(r).forEach(function (r) {
          return e.assign(o._(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["", "", ""])), t, (0, o.getProperty)(r)), !0);
        });
      }

      r.toHash = function (e) {
        var t = {};

        var _iterator3 = _createForOfIteratorHelper(e),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _r12 = _step3.value;
            t[_r12] = !0;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return t;
      }, r.alwaysValidSchema = function (e, t) {
        return "boolean" == typeof t ? t : 0 === Object.keys(t).length || (a(e, t), !n(t, e.self.RULES.all));
      }, r.checkUnknownRules = a, r.schemaHasRules = n, r.schemaHasRulesButRef = function (e, t) {
        if ("boolean" == typeof e) return !e;

        for (var _r13 in e) {
          if ("$ref" !== _r13 && t.all[_r13]) return !0;
        }

        return !1;
      }, r.schemaRefOrVal = function (_ref24, r, s, a) {
        var e = _ref24.topSchemaRef,
            t = _ref24.schemaPath;

        if (!a) {
          if ("number" == typeof r || "boolean" == typeof r) return r;
          if ("string" == typeof r) return o._(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["", ""])), r);
        }

        return o._(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["", "", "", ""])), e, t, (0, o.getProperty)(s));
      }, r.unescapeFragment = function (e) {
        return c(decodeURIComponent(e));
      }, r.escapeFragment = function (e) {
        return encodeURIComponent(i(e));
      }, r.escapeJsonPointer = i, r.unescapeJsonPointer = c, r.eachItem = function (e, t) {
        if (Array.isArray(e)) {
          var _iterator4 = _createForOfIteratorHelper(e),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _r14 = _step4.value;
              t(_r14);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        } else t(e);
      }, r.mergeEvaluated = {
        props: l({
          mergeNames: function (e, t, r) {
            return e["if"](o._(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["", " !== true && ", " !== undefined"])), r, t), function () {
              e["if"](o._(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["", " === true"])), t), function () {
                return e.assign(r, !0);
              }, function () {
                return e.assign(r, o._(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["", " || {}"])), r)).code(o._(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["Object.assign(", ", ", ")"])), r, t));
              });
            });
          },
          mergeToName: function (e, t, r) {
            return e["if"](o._(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["", " !== true"])), r), function () {
              !0 === t ? e.assign(r, !0) : (e.assign(r, o._(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["", " || {}"])), r)), u(e, r, t));
            });
          },
          mergeValues: function (e, t) {
            return !0 === e || _objectSpread2(_objectSpread2({}, e), t);
          },
          resultToName: d
        }),
        items: l({
          mergeNames: function (e, t, r) {
            return e["if"](o._(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["", " !== true && ", " !== undefined"])), r, t), function () {
              return e.assign(r, o._(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["", " === true ? true : ", " > ", " ? ", " : ", ""])), t, r, t, r, t));
            });
          },
          mergeToName: function (e, t, r) {
            return e["if"](o._(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["", " !== true"])), r), function () {
              return e.assign(r, !0 === t || o._(_templateObject54 || (_templateObject54 = _taggedTemplateLiteral(["", " > ", " ? ", " : ", ""])), r, t, r, t));
            });
          },
          mergeValues: function (e, t) {
            return !0 === e || Math.max(e, t);
          },
          resultToName: function (e, t) {
            return e["var"]("items", t);
          }
        })
      }, r.evaluatedPropsToName = d, r.setEvaluated = u;
      var f = {};
      var p;

      function m(e, t) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e.opts.strictSchema;

        if (r) {
          if (t = "strict mode: ".concat(t), !0 === r) throw new Error(t);
          e.self.logger.warn(t);
        }
      }

      r.useFunc = function (e, t) {
        return e.scopeValue("func", {
          ref: t,
          code: f[t.code] || (f[t.code] = new s._Code(t.code))
        });
      }, function (e) {
        e[e.Num = 0] = "Num", e[e.Str = 1] = "Str";
      }(p = r.Type || (r.Type = {})), r.getErrorPath = function (e, t, r) {
        if (e instanceof o.Name) {
          var _s6 = t === p.Num;

          return r ? _s6 ? o._(_templateObject55 || (_templateObject55 = _taggedTemplateLiteral(["\"[\" + ", " + \"]\""])), e) : o._(_templateObject56 || (_templateObject56 = _taggedTemplateLiteral(["\"['\" + ", " + \"']\""])), e) : _s6 ? o._(_templateObject57 || (_templateObject57 = _taggedTemplateLiteral(["\"/\" + ", ""])), e) : o._(_templateObject58 || (_templateObject58 = _taggedTemplateLiteral(["\"/\" + ", ".replace(/~/g, \"~0\").replace(/\\//g, \"~1\")"], ["\"/\" + ", ".replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")"])), e);
        }

        return r ? (0, o.getProperty)(e).toString() : "/" + i(e);
      }, r.checkStrictMode = m;
    }, {
      "./codegen": 2,
      "./codegen/code": 1
    }],
    11: [function (e, t, r) {

      function o(e, t) {
        return t.rules.some(function (t) {
          return s(e, t);
        });
      }

      function s(e, t) {
        var r;
        return void 0 !== e[t.keyword] || (null === (r = t.definition["implements"]) || void 0 === r ? void 0 : r.some(function (t) {
          return void 0 !== e[t];
        }));
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.shouldUseRule = r.shouldUseGroup = r.schemaHasRulesForType = void 0, r.schemaHasRulesForType = function (_ref25, r) {
        var e = _ref25.schema,
            t = _ref25.self;
        var s = t.RULES.types[r];
        return s && !0 !== s && o(e, s);
      }, r.shouldUseGroup = o, r.shouldUseRule = s;
    }, {}],
    12: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.boolOrEmptySchema = r.topBoolOrEmptySchema = void 0;
      var o = e("../errors"),
          s = e("../codegen"),
          a = e("../names"),
          n = {
        message: "boolean schema is false"
      };

      function i(e, t) {
        var r = e.gen,
            s = e.data;
        (0, o.reportError)({
          gen: r,
          keyword: "false schema",
          data: s,
          schema: !1,
          schemaCode: !1,
          schemaValue: !1,
          params: {},
          it: e
        }, n, void 0, t);
      }

      r.topBoolOrEmptySchema = function (e) {
        var t = e.gen,
            r = e.schema,
            o = e.validateName;
        !1 === r ? i(e, !1) : "object" == _typeof(r) && !0 === r.$async ? t["return"](a["default"].data) : (t.assign(s._(_templateObject59 || (_templateObject59 = _taggedTemplateLiteral(["", ".errors"])), o), null), t["return"](!0));
      }, r.boolOrEmptySchema = function (e, t) {
        var r = e.gen,
            o = e.schema;
        !1 === o ? (r["var"](t, !1), i(e)) : r["var"](t, !0);
      };
    }, {
      "../codegen": 2,
      "../errors": 4,
      "../names": 6
    }],
    13: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.reportTypeError = r.checkDataTypes = r.checkDataType = r.coerceAndCheckDataType = r.getJSONTypes = r.getSchemaTypes = r.DataType = void 0;
      var o = e("../rules"),
          s = e("./applicability"),
          a = e("../errors"),
          n = e("../codegen"),
          i = e("../util");
      var c;

      function l(e) {
        var t = Array.isArray(e) ? e : e ? [e] : [];
        if (t.every(o.isJSONType)) return t;
        throw new Error("type must be JSONType or JSONType[]: " + t.join(","));
      }

      !function (e) {
        e[e.Correct = 0] = "Correct", e[e.Wrong = 1] = "Wrong";
      }(c = r.DataType || (r.DataType = {})), r.getSchemaTypes = function (e) {
        var t = l(e.type);

        if (t.includes("null")) {
          if (!1 === e.nullable) throw new Error("type: null contradicts nullable: false");
        } else {
          if (!t.length && void 0 !== e.nullable) throw new Error('"nullable" cannot be used without "type"');
          !0 === e.nullable && t.push("null");
        }

        return t;
      }, r.getJSONTypes = l, r.coerceAndCheckDataType = function (e, t) {
        var r = e.gen,
            o = e.data,
            a = e.opts,
            i = function (e, t) {
          return t ? e.filter(function (e) {
            return d.has(e) || "array" === t && "array" === e;
          }) : [];
        }(t, a.coerceTypes),
            l = t.length > 0 && !(0 === i.length && 1 === t.length && (0, s.schemaHasRulesForType)(e, t[0]));

        if (l) {
          var _s7 = f(t, o, a.strictNumbers, c.Wrong);

          r["if"](_s7, function () {
            i.length ? function (e, t, r) {
              var o = e.gen,
                  s = e.data,
                  a = e.opts,
                  i = o["let"]("dataType", n._(_templateObject60 || (_templateObject60 = _taggedTemplateLiteral(["typeof ", ""])), s)),
                  c = o["let"]("coerced", n._(_templateObject61 || (_templateObject61 = _taggedTemplateLiteral(["undefined"]))));
              "array" === a.coerceTypes && o["if"](n._(_templateObject62 || (_templateObject62 = _taggedTemplateLiteral(["", " == 'object' && Array.isArray(", ") && ", ".length == 1"])), i, s, s), function () {
                return o.assign(s, n._(_templateObject63 || (_templateObject63 = _taggedTemplateLiteral(["", "[0]"])), s)).assign(i, n._(_templateObject64 || (_templateObject64 = _taggedTemplateLiteral(["typeof ", ""])), s))["if"](f(t, s, a.strictNumbers), function () {
                  return o.assign(c, s);
                });
              });
              o["if"](n._(_templateObject65 || (_templateObject65 = _taggedTemplateLiteral(["", " !== undefined"])), c));

              var _iterator5 = _createForOfIteratorHelper(r),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var _e9 = _step5.value;
                  (d.has(_e9) || "array" === _e9 && "array" === a.coerceTypes) && l(_e9);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }

              function l(e) {
                switch (e) {
                  case "string":
                    return void o.elseIf(n._(_templateObject66 || (_templateObject66 = _taggedTemplateLiteral(["", " == \"number\" || ", " == \"boolean\""])), i, i)).assign(c, n._(_templateObject67 || (_templateObject67 = _taggedTemplateLiteral(["\"\" + ", ""])), s)).elseIf(n._(_templateObject68 || (_templateObject68 = _taggedTemplateLiteral(["", " === null"])), s)).assign(c, n._(_templateObject69 || (_templateObject69 = _taggedTemplateLiteral(["\"\""]))));

                  case "number":
                    return void o.elseIf(n._(_templateObject70 || (_templateObject70 = _taggedTemplateLiteral(["", " == \"boolean\" || ", " === null\n              || (", " == \"string\" && ", " && ", " == +", ")"])), i, s, i, s, s, s)).assign(c, n._(_templateObject71 || (_templateObject71 = _taggedTemplateLiteral(["+", ""])), s));

                  case "integer":
                    return void o.elseIf(n._(_templateObject72 || (_templateObject72 = _taggedTemplateLiteral(["", " === \"boolean\" || ", " === null\n              || (", " === \"string\" && ", " && ", " == +", " && !(", " % 1))"])), i, s, i, s, s, s, s)).assign(c, n._(_templateObject73 || (_templateObject73 = _taggedTemplateLiteral(["+", ""])), s));

                  case "boolean":
                    return void o.elseIf(n._(_templateObject74 || (_templateObject74 = _taggedTemplateLiteral(["", " === \"false\" || ", " === 0 || ", " === null"])), s, s, s)).assign(c, !1).elseIf(n._(_templateObject75 || (_templateObject75 = _taggedTemplateLiteral(["", " === \"true\" || ", " === 1"])), s, s)).assign(c, !0);

                  case "null":
                    return o.elseIf(n._(_templateObject76 || (_templateObject76 = _taggedTemplateLiteral(["", " === \"\" || ", " === 0 || ", " === false"])), s, s, s)), void o.assign(c, null);

                  case "array":
                    o.elseIf(n._(_templateObject77 || (_templateObject77 = _taggedTemplateLiteral(["", " === \"string\" || ", " === \"number\"\n              || ", " === \"boolean\" || ", " === null"])), i, i, i, s)).assign(c, n._(_templateObject78 || (_templateObject78 = _taggedTemplateLiteral(["[", "]"])), s));
                }
              }

              o["else"](), m(e), o.endIf(), o["if"](n._(_templateObject79 || (_templateObject79 = _taggedTemplateLiteral(["", " !== undefined"])), c), function () {
                o.assign(s, c), function (_ref26, o) {
                  var e = _ref26.gen,
                      t = _ref26.parentData,
                      r = _ref26.parentDataProperty;
                  e["if"](n._(_templateObject80 || (_templateObject80 = _taggedTemplateLiteral(["", " !== undefined"])), t), function () {
                    return e.assign(n._(_templateObject81 || (_templateObject81 = _taggedTemplateLiteral(["", "[", "]"])), t, r), o);
                  });
                }(e, c);
              });
            }(e, t, i) : m(e);
          });
        }

        return l;
      };
      var d = new Set(["string", "number", "integer", "boolean", "null"]);

      function u(e, t, r) {
        var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : c.Correct;
        var s = o === c.Correct ? n.operators.EQ : n.operators.NEQ;
        var a;

        switch (e) {
          case "null":
            return n._(_templateObject82 || (_templateObject82 = _taggedTemplateLiteral(["", " ", " null"])), t, s);

          case "array":
            a = n._(_templateObject83 || (_templateObject83 = _taggedTemplateLiteral(["Array.isArray(", ")"])), t);
            break;

          case "object":
            a = n._(_templateObject84 || (_templateObject84 = _taggedTemplateLiteral(["", " && typeof ", " == \"object\" && !Array.isArray(", ")"])), t, t, t);
            break;

          case "integer":
            a = i(n._(_templateObject85 || (_templateObject85 = _taggedTemplateLiteral(["!(", " % 1) && !isNaN(", ")"])), t, t));
            break;

          case "number":
            a = i();
            break;

          default:
            return n._(_templateObject86 || (_templateObject86 = _taggedTemplateLiteral(["typeof ", " ", " ", ""])), t, s, e);
        }

        return o === c.Correct ? a : (0, n.not)(a);

        function i() {
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : n.nil;
          return (0, n.and)(n._(_templateObject87 || (_templateObject87 = _taggedTemplateLiteral(["typeof ", " == \"number\""])), t), e, r ? n._(_templateObject88 || (_templateObject88 = _taggedTemplateLiteral(["isFinite(", ")"])), t) : n.nil);
        }
      }

      function f(e, t, r, o) {
        if (1 === e.length) return u(e[0], t, r, o);
        var s;
        var a = (0, i.toHash)(e);

        if (a.array && a.object) {
          var _e10 = n._(_templateObject89 || (_templateObject89 = _taggedTemplateLiteral(["typeof ", " != \"object\""])), t);

          s = a["null"] ? _e10 : n._(_templateObject90 || (_templateObject90 = _taggedTemplateLiteral(["!", " || ", ""])), t, _e10), delete a["null"], delete a.array, delete a.object;
        } else s = n.nil;

        a.number && delete a.integer;

        for (var _e11 in a) {
          s = (0, n.and)(s, u(_e11, t, r, o));
        }

        return s;
      }

      r.checkDataType = u, r.checkDataTypes = f;
      var p = {
        message: function (_ref27) {
          var e = _ref27.schema;
          return "must be ".concat(e);
        },
        params: function (_ref28) {
          var e = _ref28.schema,
              t = _ref28.schemaValue;
          return "string" == typeof e ? n._(_templateObject91 || (_templateObject91 = _taggedTemplateLiteral(["{type: ", "}"])), e) : n._(_templateObject92 || (_templateObject92 = _taggedTemplateLiteral(["{type: ", "}"])), t);
        }
      };

      function m(e) {
        var t = function (e) {
          var t = e.gen,
              r = e.data,
              o = e.schema,
              s = (0, i.schemaRefOrVal)(e, o, "type");
          return {
            gen: t,
            keyword: "type",
            data: r,
            schema: o.type,
            schemaCode: s,
            schemaValue: s,
            parentSchema: o,
            params: {},
            it: e
          };
        }(e);

        (0, a.reportError)(t, p);
      }

      r.reportTypeError = m;
    }, {
      "../codegen": 2,
      "../errors": 4,
      "../rules": 9,
      "../util": 10,
      "./applicability": 11
    }],
    14: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.assignDefaults = void 0;
      var o = e("../codegen"),
          s = e("../util");

      function a(e, t, r) {
        var a = e.gen,
            n = e.compositeRule,
            i = e.data,
            c = e.opts;
        if (void 0 === r) return;

        var l = o._(_templateObject93 || (_templateObject93 = _taggedTemplateLiteral(["", "", ""])), i, (0, o.getProperty)(t));

        if (n) return void (0, s.checkStrictMode)(e, "default is ignored for: ".concat(l));

        var d = o._(_templateObject94 || (_templateObject94 = _taggedTemplateLiteral(["", " === undefined"])), l);

        "empty" === c.useDefaults && (d = o._(_templateObject95 || (_templateObject95 = _taggedTemplateLiteral(["", " || ", " === null || ", " === \"\""])), d, l, l)), a["if"](d, o._(_templateObject96 || (_templateObject96 = _taggedTemplateLiteral(["", " = ", ""])), l, (0, o.stringify)(r)));
      }

      r.assignDefaults = function (e, t) {
        var _e$schema = e.schema,
            r = _e$schema.properties,
            o = _e$schema.items;
        if ("object" === t && r) for (var _t6 in r) {
          a(e, _t6, r[_t6]["default"]);
        } else "array" === t && Array.isArray(o) && o.forEach(function (t, r) {
          return a(e, r, t["default"]);
        });
      };
    }, {
      "../codegen": 2,
      "../util": 10
    }],
    15: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.getData = r.KeywordCxt = r.validateFunctionCode = void 0;
      var o = e("./boolSchema"),
          s = e("./dataType"),
          a = e("./applicability"),
          n = e("./dataType"),
          i = e("./defaults"),
          c = e("./keyword"),
          l = e("./subschema"),
          d = e("../codegen"),
          u = e("../names"),
          f = e("../resolve"),
          p = e("../util"),
          m = e("../errors");

      function h(_ref29, a) {
        var e = _ref29.gen,
            t = _ref29.validateName,
            r = _ref29.schema,
            o = _ref29.schemaEnv,
            s = _ref29.opts;
        s.code.es5 ? e.func(t, d._(_templateObject97 || (_templateObject97 = _taggedTemplateLiteral(["", ", ", ""])), u["default"].data, u["default"].valCxt), o.$async, function () {
          e.code(d._(_templateObject98 || (_templateObject98 = _taggedTemplateLiteral(["\"use strict\"; ", ""])), y(r, s))), function (e, t) {
            e["if"](u["default"].valCxt, function () {
              e["var"](u["default"].instancePath, d._(_templateObject99 || (_templateObject99 = _taggedTemplateLiteral(["", ".", ""])), u["default"].valCxt, u["default"].instancePath)), e["var"](u["default"].parentData, d._(_templateObject100 || (_templateObject100 = _taggedTemplateLiteral(["", ".", ""])), u["default"].valCxt, u["default"].parentData)), e["var"](u["default"].parentDataProperty, d._(_templateObject101 || (_templateObject101 = _taggedTemplateLiteral(["", ".", ""])), u["default"].valCxt, u["default"].parentDataProperty)), e["var"](u["default"].rootData, d._(_templateObject102 || (_templateObject102 = _taggedTemplateLiteral(["", ".", ""])), u["default"].valCxt, u["default"].rootData)), t.dynamicRef && e["var"](u["default"].dynamicAnchors, d._(_templateObject103 || (_templateObject103 = _taggedTemplateLiteral(["", ".", ""])), u["default"].valCxt, u["default"].dynamicAnchors));
            }, function () {
              e["var"](u["default"].instancePath, d._(_templateObject104 || (_templateObject104 = _taggedTemplateLiteral(["\"\""])))), e["var"](u["default"].parentData, d._(_templateObject105 || (_templateObject105 = _taggedTemplateLiteral(["undefined"])))), e["var"](u["default"].parentDataProperty, d._(_templateObject106 || (_templateObject106 = _taggedTemplateLiteral(["undefined"])))), e["var"](u["default"].rootData, u["default"].data), t.dynamicRef && e["var"](u["default"].dynamicAnchors, d._(_templateObject107 || (_templateObject107 = _taggedTemplateLiteral(["{}"]))));
            });
          }(e, s), e.code(a);
        }) : e.func(t, d._(_templateObject108 || (_templateObject108 = _taggedTemplateLiteral(["", ", ", ""])), u["default"].data, function (e) {
          return d._(_templateObject109 || (_templateObject109 = _taggedTemplateLiteral(["{", "=\"\", ", ", ", ", ", "=", "", "}={}"])), u["default"].instancePath, u["default"].parentData, u["default"].parentDataProperty, u["default"].rootData, u["default"].data, e.dynamicRef ? d._(_templateObject110 || (_templateObject110 = _taggedTemplateLiteral([", ", "={}"])), u["default"].dynamicAnchors) : d.nil);
        }(s)), o.$async, function () {
          return e.code(y(r, s)).code(a);
        });
      }

      function y(e, t) {
        var r = "object" == _typeof(e) && e[t.schemaId];
        return r && (t.code.source || t.code.process) ? d._(_templateObject111 || (_templateObject111 = _taggedTemplateLiteral(["/*# sourceURL=", " */"])), r) : d.nil;
      }

      function v(e, t) {
        $(e) && (_(e), g(e)) ? function (e, t) {
          var r = e.schema,
              o = e.gen,
              s = e.opts;
          s.$comment && r.$comment && b(e);
          (function (e) {
            var t = e.schema[e.opts.schemaId];
            t && (e.baseId = (0, f.resolveUrl)(e.opts.uriResolver, e.baseId, t));
          })(e), function (e) {
            if (e.schema.$async && !e.schemaEnv.$async) throw new Error("async schema in sync schema");
          }(e);
          var a = o["const"]("_errs", u["default"].errors);
          w(e, a), o["var"](t, d._(_templateObject112 || (_templateObject112 = _taggedTemplateLiteral(["", " === ", ""])), a, u["default"].errors));
        }(e, t) : (0, o.boolOrEmptySchema)(e, t);
      }

      function g(_ref30) {
        var e = _ref30.schema,
            t = _ref30.self;
        if ("boolean" == typeof e) return !e;

        for (var _r15 in e) {
          if (t.RULES.all[_r15]) return !0;
        }

        return !1;
      }

      function $(e) {
        return "boolean" != typeof e.schema;
      }

      function _(e) {
        (0, p.checkUnknownRules)(e), function (e) {
          var t = e.schema,
              r = e.errSchemaPath,
              o = e.opts,
              s = e.self;
          t.$ref && o.ignoreKeywordsWithRef && (0, p.schemaHasRulesButRef)(t, s.RULES) && s.logger.warn("$ref: keywords ignored in schema at path \"".concat(r, "\""));
        }(e);
      }

      function w(e, t) {
        if (e.opts.jtd) return E(e, [], !1, t);
        var r = (0, s.getSchemaTypes)(e.schema);
        E(e, r, !(0, s.coerceAndCheckDataType)(e, r), t);
      }

      function b(_ref31) {
        var e = _ref31.gen,
            t = _ref31.schemaEnv,
            r = _ref31.schema,
            o = _ref31.errSchemaPath,
            s = _ref31.opts;
        var a = r.$comment;
        if (!0 === s.$comment) e.code(d._(_templateObject113 || (_templateObject113 = _taggedTemplateLiteral(["", ".logger.log(", ")"])), u["default"].self, a));else if ("function" == typeof s.$comment) {
          var _r16 = d.str(_templateObject114 || (_templateObject114 = _taggedTemplateLiteral(["", "/$comment"])), o),
              _s8 = e.scopeValue("root", {
            ref: t.root
          });

          e.code(d._(_templateObject115 || (_templateObject115 = _taggedTemplateLiteral(["", ".opts.$comment(", ", ", ", ", ".schema)"])), u["default"].self, a, _r16, _s8));
        }
      }

      function E(e, t, r, o) {
        var s = e.gen,
            i = e.schema,
            c = e.data,
            l = e.allErrors,
            f = e.opts,
            m = e.self,
            h = m.RULES;

        function y(p) {
          (0, a.shouldUseGroup)(i, p) && (p.type ? (s["if"]((0, n.checkDataType)(p.type, c, f.strictNumbers)), P(e, p), 1 === t.length && t[0] === p.type && r && (s["else"](), (0, n.reportTypeError)(e)), s.endIf()) : P(e, p), l || s["if"](d._(_templateObject116 || (_templateObject116 = _taggedTemplateLiteral(["", " === ", ""])), u["default"].errors, o || 0)));
        }

        !i.$ref || !f.ignoreKeywordsWithRef && (0, p.schemaHasRulesButRef)(i, h) ? (f.jtd || function (e, t) {
          if (e.schemaEnv.meta || !e.opts.strictTypes) return;
          (function (e, t) {
            if (!t.length) return;
            if (!e.dataTypes.length) return void (e.dataTypes = t);
            t.forEach(function (t) {
              N(e.dataTypes, t) || k(e, "type \"".concat(t, "\" not allowed by context \"").concat(e.dataTypes.join(","), "\""));
            }), e.dataTypes = e.dataTypes.filter(function (e) {
              return N(t, e);
            });
          })(e, t), e.opts.allowUnionTypes || function (e, t) {
            t.length > 1 && (2 !== t.length || !t.includes("null")) && k(e, "use allowUnionTypes to allow union type keyword");
          }(e, t);
          !function (e, t) {
            var r = e.self.RULES.all;

            for (var _o6 in r) {
              var _s9 = r[_o6];

              if ("object" == _typeof(_s9) && (0, a.shouldUseRule)(e.schema, _s9)) {
                var _r17 = _s9.definition.type;
                _r17.length && !_r17.some(function (e) {
                  return S(t, e);
                }) && k(e, "missing type \"".concat(_r17.join(","), "\" for keyword \"").concat(_o6, "\""));
              }
            }
          }(e, e.dataTypes);
        }(e, t), s.block(function () {
          var _iterator6 = _createForOfIteratorHelper(h.rules),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var _e12 = _step6.value;
              y(_e12);
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }

          y(h.post);
        })) : s.block(function () {
          return C(e, "$ref", h.all.$ref.definition);
        });
      }

      function P(e, t) {
        var r = e.gen,
            o = e.schema,
            s = e.opts.useDefaults;
        s && (0, i.assignDefaults)(e, t.type), r.block(function () {
          var _iterator7 = _createForOfIteratorHelper(t.rules),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _r18 = _step7.value;
              (0, a.shouldUseRule)(o, _r18) && C(e, _r18.keyword, _r18.definition, t.type);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        });
      }

      function S(e, t) {
        return e.includes(t) || "number" === t && e.includes("integer");
      }

      function N(e, t) {
        return e.includes(t) || "integer" === t && e.includes("number");
      }

      function k(e, t) {
        (0, p.checkStrictMode)(e, t += " at \"".concat(e.schemaEnv.baseId + e.errSchemaPath, "\" (strictTypes)"), e.opts.strictTypes);
      }

      r.validateFunctionCode = function (e) {
        $(e) && (_(e), g(e)) ? function (e) {
          var t = e.schema,
              r = e.opts,
              o = e.gen;
          h(e, function () {
            r.$comment && t.$comment && b(e), function (e) {
              var t = e.schema,
                  r = e.opts;
              void 0 !== t["default"] && r.useDefaults && r.strictSchema && (0, p.checkStrictMode)(e, "default is ignored in the schema root");
            }(e), o["let"](u["default"].vErrors, null), o["let"](u["default"].errors, 0), r.unevaluated && function (e) {
              var t = e.gen,
                  r = e.validateName;
              e.evaluated = t["const"]("evaluated", d._(_templateObject117 || (_templateObject117 = _taggedTemplateLiteral(["", ".evaluated"])), r)), t["if"](d._(_templateObject118 || (_templateObject118 = _taggedTemplateLiteral(["", ".dynamicProps"])), e.evaluated), function () {
                return t.assign(d._(_templateObject119 || (_templateObject119 = _taggedTemplateLiteral(["", ".props"])), e.evaluated), d._(_templateObject120 || (_templateObject120 = _taggedTemplateLiteral(["undefined"]))));
              }), t["if"](d._(_templateObject121 || (_templateObject121 = _taggedTemplateLiteral(["", ".dynamicItems"])), e.evaluated), function () {
                return t.assign(d._(_templateObject122 || (_templateObject122 = _taggedTemplateLiteral(["", ".items"])), e.evaluated), d._(_templateObject123 || (_templateObject123 = _taggedTemplateLiteral(["undefined"]))));
              });
            }(e), w(e), function (e) {
              var t = e.gen,
                  r = e.schemaEnv,
                  o = e.validateName,
                  s = e.ValidationError,
                  a = e.opts;
              r.$async ? t["if"](d._(_templateObject124 || (_templateObject124 = _taggedTemplateLiteral(["", " === 0"])), u["default"].errors), function () {
                return t["return"](u["default"].data);
              }, function () {
                return t["throw"](d._(_templateObject125 || (_templateObject125 = _taggedTemplateLiteral(["new ", "(", ")"])), s, u["default"].vErrors));
              }) : (t.assign(d._(_templateObject126 || (_templateObject126 = _taggedTemplateLiteral(["", ".errors"])), o), u["default"].vErrors), a.unevaluated && function (_ref32) {
                var e = _ref32.gen,
                    t = _ref32.evaluated,
                    r = _ref32.props,
                    o = _ref32.items;
                r instanceof d.Name && e.assign(d._(_templateObject127 || (_templateObject127 = _taggedTemplateLiteral(["", ".props"])), t), r);
                o instanceof d.Name && e.assign(d._(_templateObject128 || (_templateObject128 = _taggedTemplateLiteral(["", ".items"])), t), o);
              }(e), t["return"](d._(_templateObject129 || (_templateObject129 = _taggedTemplateLiteral(["", " === 0"])), u["default"].errors)));
            }(e);
          });
        }(e) : h(e, function () {
          return (0, o.topBoolOrEmptySchema)(e);
        });
      };

      var j = function () {
        function j(e, t, r) {
          _classCallCheck(this, j);

          if ((0, c.validateKeywordUsage)(e, t, r), this.gen = e.gen, this.allErrors = e.allErrors, this.keyword = r, this.data = e.data, this.schema = e.schema[r], this.$data = t.$data && e.opts.$data && this.schema && this.schema.$data, this.schemaValue = (0, p.schemaRefOrVal)(e, this.schema, r, this.$data), this.schemaType = t.schemaType, this.parentSchema = e.schema, this.params = {}, this.it = e, this.def = t, this.$data) this.schemaCode = e.gen["const"]("vSchema", T(this.$data, e));else if (this.schemaCode = this.schemaValue, !(0, c.validSchemaType)(this.schema, t.schemaType, t.allowUndefined)) throw new Error("".concat(r, " value must be ").concat(JSON.stringify(t.schemaType)));
          ("code" in t ? t.trackErrors : !1 !== t.errors) && (this.errsCount = e.gen["const"]("_errs", u["default"].errors));
        }

        _createClass(j, [{
          key: "result",
          value: function result(e, t, r) {
            this.failResult((0, d.not)(e), t, r);
          }
        }, {
          key: "failResult",
          value: function failResult(e, t, r) {
            this.gen["if"](e), r ? r() : this.error(), t ? (this.gen["else"](), t(), this.allErrors && this.gen.endIf()) : this.allErrors ? this.gen.endIf() : this.gen["else"]();
          }
        }, {
          key: "pass",
          value: function pass(e, t) {
            this.failResult((0, d.not)(e), void 0, t);
          }
        }, {
          key: "fail",
          value: function fail(e) {
            if (void 0 === e) return this.error(), void (this.allErrors || this.gen["if"](!1));
            this.gen["if"](e), this.error(), this.allErrors ? this.gen.endIf() : this.gen["else"]();
          }
        }, {
          key: "fail$data",
          value: function fail$data(e) {
            if (!this.$data) return this.fail(e);
            var t = this.schemaCode;
            this.fail(d._(_templateObject130 || (_templateObject130 = _taggedTemplateLiteral(["", " !== undefined && (", ")"])), t, (0, d.or)(this.invalid$data(), e)));
          }
        }, {
          key: "error",
          value: function error(e, t, r) {
            if (t) return this.setParams(t), this._error(e, r), void this.setParams({});

            this._error(e, r);
          }
        }, {
          key: "_error",
          value: function _error(e, t) {
            (e ? m.reportExtraError : m.reportError)(this, this.def.error, t);
          }
        }, {
          key: "$dataError",
          value: function $dataError() {
            (0, m.reportError)(this, this.def.$dataError || m.keyword$DataError);
          }
        }, {
          key: "reset",
          value: function reset() {
            if (void 0 === this.errsCount) throw new Error('add "trackErrors" to keyword definition');
            (0, m.resetErrorsCount)(this.gen, this.errsCount);
          }
        }, {
          key: "ok",
          value: function ok(e) {
            this.allErrors || this.gen["if"](e);
          }
        }, {
          key: "setParams",
          value: function setParams(e, t) {
            t ? Object.assign(this.params, e) : this.params = e;
          }
        }, {
          key: "block$data",
          value: function block$data(e, t) {
            var _this24 = this;

            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : d.nil;
            this.gen.block(function () {
              _this24.check$data(e, r), t();
            });
          }
        }, {
          key: "check$data",
          value: function check$data() {
            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : d.nil;
            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : d.nil;
            if (!this.$data) return;
            var r = this.gen,
                o = this.schemaCode,
                s = this.schemaType,
                a = this.def;
            r["if"]((0, d.or)(d._(_templateObject131 || (_templateObject131 = _taggedTemplateLiteral(["", " === undefined"])), o), t)), e !== d.nil && r.assign(e, !0), (s.length || a.validateSchema) && (r.elseIf(this.invalid$data()), this.$dataError(), e !== d.nil && r.assign(e, !1)), r["else"]();
          }
        }, {
          key: "invalid$data",
          value: function invalid$data() {
            var e = this.gen,
                t = this.schemaCode,
                r = this.schemaType,
                o = this.def,
                s = this.it;
            return (0, d.or)(function () {
              if (r.length) {
                if (!(t instanceof d.Name)) throw new Error("ajv implementation error");

                var _e13 = Array.isArray(r) ? r : [r];

                return d._(_templateObject132 || (_templateObject132 = _taggedTemplateLiteral(["", ""])), (0, n.checkDataTypes)(_e13, t, s.opts.strictNumbers, n.DataType.Wrong));
              }

              return d.nil;
            }(), function () {
              if (o.validateSchema) {
                var _r19 = e.scopeValue("validate$data", {
                  ref: o.validateSchema
                });

                return d._(_templateObject133 || (_templateObject133 = _taggedTemplateLiteral(["!", "(", ")"])), _r19, t);
              }

              return d.nil;
            }());
          }
        }, {
          key: "subschema",
          value: function subschema(e, t) {
            var r = (0, l.getSubschema)(this.it, e);
            (0, l.extendSubschemaData)(r, this.it, e), (0, l.extendSubschemaMode)(r, e);

            var o = _objectSpread2(_objectSpread2(_objectSpread2({}, this.it), r), {}, {
              items: void 0,
              props: void 0
            });

            return v(o, t), o;
          }
        }, {
          key: "mergeEvaluated",
          value: function mergeEvaluated(e, t) {
            var r = this.it,
                o = this.gen;
            r.opts.unevaluated && (!0 !== r.props && void 0 !== e.props && (r.props = p.mergeEvaluated.props(o, e.props, r.props, t)), !0 !== r.items && void 0 !== e.items && (r.items = p.mergeEvaluated.items(o, e.items, r.items, t)));
          }
        }, {
          key: "mergeValidEvaluated",
          value: function mergeValidEvaluated(e, t) {
            var _this25 = this;

            var r = this.it,
                o = this.gen;
            if (r.opts.unevaluated && (!0 !== r.props || !0 !== r.items)) return o["if"](t, function () {
              return _this25.mergeEvaluated(e, d.Name);
            }), !0;
          }
        }]);

        return j;
      }();

      function C(e, t, r, o) {
        var s = new j(e, r, t);
        "code" in r ? r.code(s, o) : s.$data && r.validate ? (0, c.funcKeywordCode)(s, r) : "macro" in r ? (0, c.macroKeywordCode)(s, r) : (r.compile || r.validate) && (0, c.funcKeywordCode)(s, r);
      }

      r.KeywordCxt = j;
      var O = /^\/(?:[^~]|~0|~1)*$/,
          x = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

      function T(e, _ref33) {
        var t = _ref33.dataLevel,
            r = _ref33.dataNames,
            o = _ref33.dataPathArr;
        var s, a;
        if ("" === e) return u["default"].rootData;

        if ("/" === e[0]) {
          if (!O.test(e)) throw new Error("Invalid JSON-pointer: ".concat(e));
          s = e, a = u["default"].rootData;
        } else {
          var _n3 = x.exec(e);

          if (!_n3) throw new Error("Invalid JSON-pointer: ".concat(e));

          var _i9 = +_n3[1];

          if (s = _n3[2], "#" === s) {
            if (_i9 >= t) throw new Error(c("property/index", _i9));
            return o[t - _i9];
          }

          if (_i9 > t) throw new Error(c("data", _i9));
          if (a = r[t - _i9], !s) return a;
        }

        var n = a;
        var i = s.split("/");

        var _iterator8 = _createForOfIteratorHelper(i),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _e14 = _step8.value;
            _e14 && (a = d._(_templateObject134 || (_templateObject134 = _taggedTemplateLiteral(["", "", ""])), a, (0, d.getProperty)((0, p.unescapeJsonPointer)(_e14))), n = d._(_templateObject135 || (_templateObject135 = _taggedTemplateLiteral(["", " && ", ""])), n, a));
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        return n;

        function c(e, r) {
          return "Cannot access ".concat(e, " ").concat(r, " levels up, current level is ").concat(t);
        }
      }

      r.getData = T;
    }, {
      "../codegen": 2,
      "../errors": 4,
      "../names": 6,
      "../resolve": 8,
      "../util": 10,
      "./applicability": 11,
      "./boolSchema": 12,
      "./dataType": 13,
      "./defaults": 14,
      "./keyword": 16,
      "./subschema": 17
    }],
    16: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.validateKeywordUsage = r.validSchemaType = r.funcKeywordCode = r.macroKeywordCode = void 0;
      var o = e("../codegen"),
          s = e("../names"),
          a = e("../../vocabularies/code"),
          n = e("../errors");

      function i(e) {
        var t = e.gen,
            r = e.data,
            s = e.it;
        t["if"](s.parentData, function () {
          return t.assign(r, o._(_templateObject136 || (_templateObject136 = _taggedTemplateLiteral(["", "[", "]"])), s.parentData, s.parentDataProperty));
        });
      }

      function c(e, t, r) {
        if (void 0 === r) throw new Error("keyword \"".concat(t, "\" failed to compile"));
        return e.scopeValue("keyword", "function" == typeof r ? {
          ref: r
        } : {
          ref: r,
          code: (0, o.stringify)(r)
        });
      }

      r.macroKeywordCode = function (e, t) {
        var r = e.gen,
            s = e.keyword,
            a = e.schema,
            n = e.parentSchema,
            i = e.it,
            l = t.macro.call(i.self, a, n, i),
            d = c(r, s, l);
        !1 !== i.opts.validateSchema && i.self.validateSchema(l, !0);
        var u = r.name("valid");
        e.subschema({
          schema: l,
          schemaPath: o.nil,
          errSchemaPath: "".concat(i.errSchemaPath, "/").concat(s),
          topSchemaRef: d,
          compositeRule: !0
        }, u), e.pass(u, function () {
          return e.error(!0);
        });
      }, r.funcKeywordCode = function (e, t) {
        var r;
        var l = e.gen,
            d = e.keyword,
            u = e.schema,
            f = e.parentSchema,
            p = e.$data,
            m = e.it;
        !function (_ref34, t) {
          var e = _ref34.schemaEnv;
          if (t.async && !e.$async) throw new Error("async keyword in sync schema");
        }(m, t);
        var h = !p && t.compile ? t.compile.call(m.self, u, f, m) : t.validate,
            y = c(l, d, h),
            v = l["let"]("valid");

        function g() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : t.async ? o._(_templateObject137 || (_templateObject137 = _taggedTemplateLiteral(["await "]))) : o.nil;
          l.assign(v, o._(_templateObject138 || (_templateObject138 = _taggedTemplateLiteral(["", "", ""])), r, (0, a.callValidateCode)(e, y, m.opts.passContext ? s["default"]["this"] : s["default"].self, !("compile" in t && !p || !1 === t.schema))), t.modifying);
        }

        function $(e) {
          var r;
          l["if"]((0, o.not)(null !== (r = t.valid) && void 0 !== r ? r : v), e);
        }

        e.block$data(v, function () {
          if (!1 === t.errors) g(), t.modifying && i(e), $(function () {
            return e.error();
          });else {
            var _r20 = t.async ? function () {
              var e = l["let"]("ruleErrs", null);
              return l["try"](function () {
                return g(o._(_templateObject139 || (_templateObject139 = _taggedTemplateLiteral(["await "]))));
              }, function (t) {
                return l.assign(v, !1)["if"](o._(_templateObject140 || (_templateObject140 = _taggedTemplateLiteral(["", " instanceof ", ""])), t, m.ValidationError), function () {
                  return l.assign(e, o._(_templateObject141 || (_templateObject141 = _taggedTemplateLiteral(["", ".errors"])), t));
                }, function () {
                  return l["throw"](t);
                });
              }), e;
            }() : function () {
              var e = o._(_templateObject142 || (_templateObject142 = _taggedTemplateLiteral(["", ".errors"])), y);

              return l.assign(e, null), g(o.nil), e;
            }();

            t.modifying && i(e), $(function () {
              return function (e, t) {
                var r = e.gen;
                r["if"](o._(_templateObject143 || (_templateObject143 = _taggedTemplateLiteral(["Array.isArray(", ")"])), t), function () {
                  r.assign(s["default"].vErrors, o._(_templateObject144 || (_templateObject144 = _taggedTemplateLiteral(["", " === null ? ", " : ", ".concat(", ")"])), s["default"].vErrors, t, s["default"].vErrors, t)).assign(s["default"].errors, o._(_templateObject145 || (_templateObject145 = _taggedTemplateLiteral(["", ".length"])), s["default"].vErrors)), (0, n.extendErrors)(e);
                }, function () {
                  return e.error();
                });
              }(e, _r20);
            });
          }
        }), e.ok(null !== (r = t.valid) && void 0 !== r ? r : v);
      }, r.validSchemaType = function (e, t) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        return !t.length || t.some(function (t) {
          return "array" === t ? Array.isArray(e) : "object" === t ? e && "object" == _typeof(e) && !Array.isArray(e) : _typeof(e) == t || r && void 0 === e;
        });
      }, r.validateKeywordUsage = function (_ref35, s, a) {
        var e = _ref35.schema,
            t = _ref35.opts,
            r = _ref35.self,
            o = _ref35.errSchemaPath;
        if (Array.isArray(s.keyword) ? !s.keyword.includes(a) : s.keyword !== a) throw new Error("ajv implementation error");
        var n = s.dependencies;
        if (null == n ? void 0 : n.some(function (t) {
          return !Object.prototype.hasOwnProperty.call(e, t);
        })) throw new Error("parent schema must have dependencies of ".concat(a, ": ").concat(n.join(",")));

        if (s.validateSchema) {
          if (!s.validateSchema(e[a])) {
            var _e15 = "keyword \"".concat(a, "\" value is invalid at path \"").concat(o, "\": ") + r.errorsText(s.validateSchema.errors);

            if ("log" !== t.validateSchema) throw new Error(_e15);
            r.logger.error(_e15);
          }
        }
      };
    }, {
      "../../vocabularies/code": 42,
      "../codegen": 2,
      "../errors": 4,
      "../names": 6
    }],
    17: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.extendSubschemaMode = r.extendSubschemaData = r.getSubschema = void 0;
      var o = e("../codegen"),
          s = e("../util");
      r.getSubschema = function (e, _ref36) {
        var t = _ref36.keyword,
            r = _ref36.schemaProp,
            a = _ref36.schema,
            n = _ref36.schemaPath,
            i = _ref36.errSchemaPath,
            c = _ref36.topSchemaRef;
        if (void 0 !== t && void 0 !== a) throw new Error('both "keyword" and "schema" passed, only one allowed');

        if (void 0 !== t) {
          var _a = e.schema[t];
          return void 0 === r ? {
            schema: _a,
            schemaPath: o._(_templateObject146 || (_templateObject146 = _taggedTemplateLiteral(["", "", ""])), e.schemaPath, (0, o.getProperty)(t)),
            errSchemaPath: "".concat(e.errSchemaPath, "/").concat(t)
          } : {
            schema: _a[r],
            schemaPath: o._(_templateObject147 || (_templateObject147 = _taggedTemplateLiteral(["", "", "", ""])), e.schemaPath, (0, o.getProperty)(t), (0, o.getProperty)(r)),
            errSchemaPath: "".concat(e.errSchemaPath, "/").concat(t, "/").concat((0, s.escapeFragment)(r))
          };
        }

        if (void 0 !== a) {
          if (void 0 === n || void 0 === i || void 0 === c) throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
          return {
            schema: a,
            schemaPath: n,
            topSchemaRef: c,
            errSchemaPath: i
          };
        }

        throw new Error('either "keyword" or "schema" must be passed');
      }, r.extendSubschemaData = function (e, t, _ref37) {
        var r = _ref37.dataProp,
            a = _ref37.dataPropType,
            n = _ref37.data,
            i = _ref37.dataTypes,
            c = _ref37.propertyName;
        if (void 0 !== n && void 0 !== r) throw new Error('both "data" and "dataProp" passed, only one allowed');
        var l = t.gen;

        if (void 0 !== r) {
          var _n4 = t.errorPath,
              _i10 = t.dataPathArr,
              _c = t.opts;
          d(l["let"]("data", o._(_templateObject148 || (_templateObject148 = _taggedTemplateLiteral(["", "", ""])), t.data, (0, o.getProperty)(r)), !0)), e.errorPath = o.str(_templateObject149 || (_templateObject149 = _taggedTemplateLiteral(["", "", ""])), _n4, (0, s.getErrorPath)(r, a, _c.jsPropertySyntax)), e.parentDataProperty = o._(_templateObject150 || (_templateObject150 = _taggedTemplateLiteral(["", ""])), r), e.dataPathArr = [].concat(_toConsumableArray(_i10), [e.parentDataProperty]);
        }

        if (void 0 !== n) {
          d(n instanceof o.Name ? n : l["let"]("data", n, !0)), void 0 !== c && (e.propertyName = c);
        }

        function d(r) {
          e.data = r, e.dataLevel = t.dataLevel + 1, e.dataTypes = [], t.definedProperties = new Set(), e.parentData = t.data, e.dataNames = [].concat(_toConsumableArray(t.dataNames), [r]);
        }

        i && (e.dataTypes = i);
      }, r.extendSubschemaMode = function (e, _ref38) {
        var t = _ref38.jtdDiscriminator,
            r = _ref38.jtdMetadata,
            o = _ref38.compositeRule,
            s = _ref38.createErrors,
            a = _ref38.allErrors;
        void 0 !== o && (e.compositeRule = o), void 0 !== s && (e.createErrors = s), void 0 !== a && (e.allErrors = a), e.jtdDiscriminator = t, e.jtdMetadata = r;
      };
    }, {
      "../codegen": 2,
      "../util": 10
    }],
    18: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.CodeGen = r.Name = r.nil = r.stringify = r.str = r._ = r.KeywordCxt = void 0;
      var o = e("./compile/validate");
      Object.defineProperty(r, "KeywordCxt", {
        enumerable: !0,
        get: function () {
          return o.KeywordCxt;
        }
      });
      var s = e("./compile/codegen");
      Object.defineProperty(r, "_", {
        enumerable: !0,
        get: function () {
          return s._;
        }
      }), Object.defineProperty(r, "str", {
        enumerable: !0,
        get: function () {
          return s.str;
        }
      }), Object.defineProperty(r, "stringify", {
        enumerable: !0,
        get: function () {
          return s.stringify;
        }
      }), Object.defineProperty(r, "nil", {
        enumerable: !0,
        get: function () {
          return s.nil;
        }
      }), Object.defineProperty(r, "Name", {
        enumerable: !0,
        get: function () {
          return s.Name;
        }
      }), Object.defineProperty(r, "CodeGen", {
        enumerable: !0,
        get: function () {
          return s.CodeGen;
        }
      });

      var a = e("./runtime/validation_error"),
          n = e("./compile/ref_error"),
          i = e("./compile/rules"),
          c = e("./compile"),
          l = e("./compile/codegen"),
          d = e("./compile/resolve"),
          u = e("./compile/validate/dataType"),
          f = e("./compile/util"),
          p = e("./refs/data.json"),
          m = e("./runtime/uri"),
          h = function (e, t) {
        return new RegExp(e, t);
      };

      h.code = "new RegExp";
      var y = ["removeAdditional", "useDefaults", "coerceTypes"],
          v = new Set(["validate", "serialize", "parse", "wrapper", "root", "schema", "keyword", "pattern", "formats", "validate$data", "func", "obj", "Error"]),
          g = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now."
      },
          $ = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.'
      };

      function _(e) {
        var t, r, o, s, a, n, i, c, l, d, u, f, p, y, v, g, $, _, w, b, E, P, S, N, k;

        var j = e.strict,
            C = null === (t = e.code) || void 0 === t ? void 0 : t.optimize,
            O = !0 === C || void 0 === C ? 1 : C || 0,
            x = null !== (o = null === (r = e.code) || void 0 === r ? void 0 : r.regExp) && void 0 !== o ? o : h,
            T = null !== (s = e.uriResolver) && void 0 !== s ? s : m["default"];
        return {
          strictSchema: null === (n = null !== (a = e.strictSchema) && void 0 !== a ? a : j) || void 0 === n || n,
          strictNumbers: null === (c = null !== (i = e.strictNumbers) && void 0 !== i ? i : j) || void 0 === c || c,
          strictTypes: null !== (d = null !== (l = e.strictTypes) && void 0 !== l ? l : j) && void 0 !== d ? d : "log",
          strictTuples: null !== (f = null !== (u = e.strictTuples) && void 0 !== u ? u : j) && void 0 !== f ? f : "log",
          strictRequired: null !== (y = null !== (p = e.strictRequired) && void 0 !== p ? p : j) && void 0 !== y && y,
          code: e.code ? _objectSpread2(_objectSpread2({}, e.code), {}, {
            optimize: O,
            regExp: x
          }) : {
            optimize: O,
            regExp: x
          },
          loopRequired: null !== (v = e.loopRequired) && void 0 !== v ? v : 200,
          loopEnum: null !== (g = e.loopEnum) && void 0 !== g ? g : 200,
          meta: null === ($ = e.meta) || void 0 === $ || $,
          messages: null === (_ = e.messages) || void 0 === _ || _,
          inlineRefs: null === (w = e.inlineRefs) || void 0 === w || w,
          schemaId: null !== (b = e.schemaId) && void 0 !== b ? b : "$id",
          addUsedSchema: null === (E = e.addUsedSchema) || void 0 === E || E,
          validateSchema: null === (P = e.validateSchema) || void 0 === P || P,
          validateFormats: null === (S = e.validateFormats) || void 0 === S || S,
          unicodeRegExp: null === (N = e.unicodeRegExp) || void 0 === N || N,
          int32range: null === (k = e.int32range) || void 0 === k || k,
          uriResolver: T
        };
      }

      var w = function () {
        function w() {
          var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, w);

          this.schemas = {}, this.refs = {}, this.formats = {}, this._compilations = new Set(), this._loading = {}, this._cache = new Map(), e = this.opts = _objectSpread2(_objectSpread2({}, e), _(e));
          var _this$opts$code2 = this.opts.code,
              t = _this$opts$code2.es5,
              r = _this$opts$code2.lines;
          this.scope = new l.ValueScope({
            scope: {},
            prefixes: v,
            es5: t,
            lines: r
          }), this.logger = function (e) {
            if (!1 === e) return j;
            if (void 0 === e) return console;
            if (e.log && e.warn && e.error) return e;
            throw new Error("logger must implement log, warn and error methods");
          }(e.logger);
          var o = e.validateFormats;
          e.validateFormats = !1, this.RULES = (0, i.getRules)(), b.call(this, g, e, "NOT SUPPORTED"), b.call(this, $, e, "DEPRECATED", "warn"), this._metaOpts = k.call(this), e.formats && S.call(this), this._addVocabularies(), this._addDefaultMetaSchema(), e.keywords && N.call(this, e.keywords), "object" == _typeof(e.meta) && this.addMetaSchema(e.meta), P.call(this), e.validateFormats = o;
        }

        _createClass(w, [{
          key: "_addVocabularies",
          value: function _addVocabularies() {
            this.addKeyword("$async");
          }
        }, {
          key: "_addDefaultMetaSchema",
          value: function _addDefaultMetaSchema() {
            var _this$opts2 = this.opts,
                e = _this$opts2.$data,
                t = _this$opts2.meta,
                r = _this$opts2.schemaId;
            var o = p;
            "id" === r && (o = _objectSpread2({}, p), o.id = o.$id, delete o.$id), t && e && this.addMetaSchema(o, o[r], !1);
          }
        }, {
          key: "defaultMeta",
          value: function defaultMeta() {
            var _this$opts3 = this.opts,
                e = _this$opts3.meta,
                t = _this$opts3.schemaId;
            return this.opts.defaultMeta = "object" == _typeof(e) ? e[t] || e : void 0;
          }
        }, {
          key: "validate",
          value: function validate(e, t) {
            var r;

            if ("string" == typeof e) {
              if (r = this.getSchema(e), !r) throw new Error("no schema with key or ref \"".concat(e, "\""));
            } else r = this.compile(e);

            var o = r(t);
            return "$async" in r || (this.errors = r.errors), o;
          }
        }, {
          key: "compile",
          value: function compile(e, t) {
            var r = this._addSchema(e, t);

            return r.validate || this._compileSchemaEnv(r);
          }
        }, {
          key: "compileAsync",
          value: function compileAsync(e, t) {
            if ("function" != typeof this.opts.loadSchema) throw new Error("options.loadSchema should be a function");
            var r = this.opts.loadSchema;
            return o.call(this, e, t);

            function o(_x, _x2) {
              return _o7.apply(this, arguments);
            }

            function _o7() {
              _o7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(e, t) {
                var r;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return s.call(this, e.$schema);

                      case 2:
                        r = this._addSchema(e, t);
                        return _context.abrupt("return", r.validate || a.call(this, r));

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));
              return _o7.apply(this, arguments);
            }

            function s(_x3) {
              return _s10.apply(this, arguments);
            }

            function _s10() {
              _s10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(e) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.t0 = e && !this.getSchema(e);

                        if (!_context2.t0) {
                          _context2.next = 4;
                          break;
                        }

                        _context2.next = 4;
                        return o.call(this, {
                          $ref: e
                        }, !0);

                      case 4:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));
              return _s10.apply(this, arguments);
            }

            function a(_x4) {
              return _a2.apply(this, arguments);
            }

            function _a2() {
              _a2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(e) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.prev = 0;
                        return _context3.abrupt("return", this._compileSchemaEnv(e));

                      case 4:
                        _context3.prev = 4;
                        _context3.t0 = _context3["catch"](0);

                        if (_context3.t0 instanceof n["default"]) {
                          _context3.next = 8;
                          break;
                        }

                        throw _context3.t0;

                      case 8:
                        i.call(this, _context3.t0);
                        _context3.next = 11;
                        return c.call(this, _context3.t0.missingSchema);

                      case 11:
                        return _context3.abrupt("return", a.call(this, e));

                      case 12:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this, [[0, 4]]);
              }));
              return _a2.apply(this, arguments);
            }

            function i(_ref39) {
              var e = _ref39.missingSchema,
                  t = _ref39.missingRef;
              if (this.refs[e]) throw new Error("AnySchema ".concat(e, " is loaded but ").concat(t, " cannot be resolved"));
            }

            function c(_x5) {
              return _c2.apply(this, arguments);
            }

            function _c2() {
              _c2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(e) {
                var r;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return l.call(this, e);

                      case 2:
                        r = _context4.sent;
                        _context4.t0 = this.refs[e];

                        if (_context4.t0) {
                          _context4.next = 7;
                          break;
                        }

                        _context4.next = 7;
                        return s.call(this, r.$schema);

                      case 7:
                        this.refs[e] || this.addSchema(r, e, t);

                      case 8:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));
              return _c2.apply(this, arguments);
            }

            function l(_x6) {
              return _l2.apply(this, arguments);
            }

            function _l2() {
              _l2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(e) {
                var t;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        t = this._loading[e];

                        if (!t) {
                          _context5.next = 3;
                          break;
                        }

                        return _context5.abrupt("return", t);

                      case 3:
                        _context5.prev = 3;
                        _context5.next = 6;
                        return this._loading[e] = r(e);

                      case 6:
                        return _context5.abrupt("return", _context5.sent);

                      case 7:
                        _context5.prev = 7;
                        delete this._loading[e];
                        return _context5.finish(7);

                      case 10:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, this, [[3,, 7, 10]]);
              }));
              return _l2.apply(this, arguments);
            }
          }
        }, {
          key: "addSchema",
          value: function addSchema(e, t, r) {
            var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;

            if (Array.isArray(e)) {
              var _iterator9 = _createForOfIteratorHelper(e),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var _t7 = _step9.value;
                  this.addSchema(_t7, void 0, r, o);
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }

              return this;
            }

            var s;

            if ("object" == _typeof(e)) {
              var _t8 = this.opts.schemaId;
              if (s = e[_t8], void 0 !== s && "string" != typeof s) throw new Error("schema ".concat(_t8, " must be string"));
            }

            return t = (0, d.normalizeId)(t || s), this._checkUnique(t), this.schemas[t] = this._addSchema(e, r, t, o, !0), this;
          }
        }, {
          key: "addMetaSchema",
          value: function addMetaSchema(e, t) {
            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.opts.validateSchema;
            return this.addSchema(e, t, !0, r), this;
          }
        }, {
          key: "validateSchema",
          value: function validateSchema(e, t) {
            if ("boolean" == typeof e) return !0;
            var r;
            if (r = e.$schema, void 0 !== r && "string" != typeof r) throw new Error("$schema must be a string");
            if (r = r || this.opts.defaultMeta || this.defaultMeta(), !r) return this.logger.warn("meta-schema not available"), this.errors = null, !0;
            var o = this.validate(r, e);

            if (!o && t) {
              var _e16 = "schema is invalid: " + this.errorsText();

              if ("log" !== this.opts.validateSchema) throw new Error(_e16);
              this.logger.error(_e16);
            }

            return o;
          }
        }, {
          key: "getSchema",
          value: function getSchema(e) {
            var t;

            for (; "string" == typeof (t = E.call(this, e));) {
              e = t;
            }

            if (void 0 === t) {
              var _r21 = this.opts.schemaId,
                  _o8 = new c.SchemaEnv({
                schema: {},
                schemaId: _r21
              });

              if (t = c.resolveSchema.call(this, _o8, e), !t) return;
              this.refs[e] = t;
            }

            return t.validate || this._compileSchemaEnv(t);
          }
        }, {
          key: "removeSchema",
          value: function removeSchema(e) {
            if (e instanceof RegExp) return this._removeAllSchemas(this.schemas, e), this._removeAllSchemas(this.refs, e), this;

            switch (_typeof(e)) {
              case "undefined":
                return this._removeAllSchemas(this.schemas), this._removeAllSchemas(this.refs), this._cache.clear(), this;

              case "string":
                {
                  var _t9 = E.call(this, e);

                  return "object" == _typeof(_t9) && this._cache["delete"](_t9.schema), delete this.schemas[e], delete this.refs[e], this;
                }

              case "object":
                {
                  this._cache["delete"](e);

                  var _t10 = e[this.opts.schemaId];
                  return _t10 && (_t10 = (0, d.normalizeId)(_t10), delete this.schemas[_t10], delete this.refs[_t10]), this;
                }

              default:
                throw new Error("ajv.removeSchema: invalid parameter");
            }
          }
        }, {
          key: "addVocabulary",
          value: function addVocabulary(e) {
            var _iterator10 = _createForOfIteratorHelper(e),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var _t11 = _step10.value;
                this.addKeyword(_t11);
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }

            return this;
          }
        }, {
          key: "addKeyword",
          value: function addKeyword(e, t) {
            var _this26 = this;

            var r;
            if ("string" == typeof e) r = e, "object" == _typeof(t) && (this.logger.warn("these parameters are deprecated, see docs for addKeyword"), t.keyword = r);else {
              if ("object" != _typeof(e) || void 0 !== t) throw new Error("invalid addKeywords parameters");
              if (r = (t = e).keyword, Array.isArray(r) && !r.length) throw new Error("addKeywords: keyword must be string or non-empty array");
            }
            if (O.call(this, r, t), !t) return (0, f.eachItem)(r, function (e) {
              return x.call(_this26, e);
            }), this;
            I.call(this, t);

            var o = _objectSpread2(_objectSpread2({}, t), {}, {
              type: (0, u.getJSONTypes)(t.type),
              schemaType: (0, u.getJSONTypes)(t.schemaType)
            });

            return (0, f.eachItem)(r, 0 === o.type.length ? function (e) {
              return x.call(_this26, e, o);
            } : function (e) {
              return o.type.forEach(function (t) {
                return x.call(_this26, e, o, t);
              });
            }), this;
          }
        }, {
          key: "getKeyword",
          value: function getKeyword(e) {
            var t = this.RULES.all[e];
            return "object" == _typeof(t) ? t.definition : !!t;
          }
        }, {
          key: "removeKeyword",
          value: function removeKeyword(e) {
            var t = this.RULES;
            delete t.keywords[e], delete t.all[e];

            var _iterator11 = _createForOfIteratorHelper(t.rules),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var _r22 = _step11.value;

                var _t12 = _r22.rules.findIndex(function (t) {
                  return t.keyword === e;
                });

                _t12 >= 0 && _r22.rules.splice(_t12, 1);
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }

            return this;
          }
        }, {
          key: "addFormat",
          value: function addFormat(e, t) {
            return "string" == typeof t && (t = new RegExp(t)), this.formats[e] = t, this;
          }
        }, {
          key: "errorsText",
          value: function errorsText() {
            var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.errors;

            var _ref40 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref40$separator = _ref40.separator,
                t = _ref40$separator === void 0 ? ", " : _ref40$separator,
                _ref40$dataVar = _ref40.dataVar,
                r = _ref40$dataVar === void 0 ? "data" : _ref40$dataVar;

            return e && 0 !== e.length ? e.map(function (e) {
              return "".concat(r).concat(e.instancePath, " ").concat(e.message);
            }).reduce(function (e, r) {
              return e + t + r;
            }) : "No errors";
          }
        }, {
          key: "$dataMetaSchema",
          value: function $dataMetaSchema(e, t) {
            var r = this.RULES.all;
            e = JSON.parse(JSON.stringify(e));

            var _iterator12 = _createForOfIteratorHelper(t),
                _step12;

            try {
              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                var _o9 = _step12.value;

                var _t13 = _o9.split("/").slice(1);

                var _s11 = e;

                var _iterator13 = _createForOfIteratorHelper(_t13),
                    _step13;

                try {
                  for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                    var _e18 = _step13.value;
                    _s11 = _s11[_e18];
                  }
                } catch (err) {
                  _iterator13.e(err);
                } finally {
                  _iterator13.f();
                }

                for (var _e17 in r) {
                  var _t14 = r[_e17];
                  if ("object" != _typeof(_t14)) continue;
                  var _o10 = _t14.definition.$data,
                      _a3 = _s11[_e17];
                  _o10 && _a3 && (_s11[_e17] = D(_a3));
                }
              }
            } catch (err) {
              _iterator12.e(err);
            } finally {
              _iterator12.f();
            }

            return e;
          }
        }, {
          key: "_removeAllSchemas",
          value: function _removeAllSchemas(e, t) {
            for (var _r23 in e) {
              var _o11 = e[_r23];
              t && !t.test(_r23) || ("string" == typeof _o11 ? delete e[_r23] : _o11 && !_o11.meta && (this._cache["delete"](_o11.schema), delete e[_r23]));
            }
          }
        }, {
          key: "_addSchema",
          value: function _addSchema(e, t, r) {
            var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;
            var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.addUsedSchema;
            var a;
            var n = this.opts.schemaId;
            if ("object" == _typeof(e)) a = e[n];else {
              if (this.opts.jtd) throw new Error("schema must be object");
              if ("boolean" != typeof e) throw new Error("schema must be object or boolean");
            }

            var i = this._cache.get(e);

            if (void 0 !== i) return i;
            r = (0, d.normalizeId)(a || r);
            var l = d.getSchemaRefs.call(this, e, r);
            return i = new c.SchemaEnv({
              schema: e,
              schemaId: n,
              meta: t,
              baseId: r,
              localRefs: l
            }), this._cache.set(i.schema, i), s && !r.startsWith("#") && (r && this._checkUnique(r), this.refs[r] = i), o && this.validateSchema(e, !0), i;
          }
        }, {
          key: "_checkUnique",
          value: function _checkUnique(e) {
            if (this.schemas[e] || this.refs[e]) throw new Error("schema with key or id \"".concat(e, "\" already exists"));
          }
        }, {
          key: "_compileSchemaEnv",
          value: function _compileSchemaEnv(e) {
            if (e.meta ? this._compileMetaSchema(e) : c.compileSchema.call(this, e), !e.validate) throw new Error("ajv implementation error");
            return e.validate;
          }
        }, {
          key: "_compileMetaSchema",
          value: function _compileMetaSchema(e) {
            var t = this.opts;
            this.opts = this._metaOpts;

            try {
              c.compileSchema.call(this, e);
            } finally {
              this.opts = t;
            }
          }
        }]);

        return w;
      }();

      function b(e, t, r) {
        var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "error";

        for (var _s12 in e) {
          var _a4 = _s12;
          _a4 in t && this.logger[o]("".concat(r, ": option ").concat(_s12, ". ").concat(e[_a4]));
        }
      }

      function E(e) {
        return e = (0, d.normalizeId)(e), this.schemas[e] || this.refs[e];
      }

      function P() {
        var e = this.opts.schemas;
        if (e) if (Array.isArray(e)) this.addSchema(e);else for (var _t15 in e) {
          this.addSchema(e[_t15], _t15);
        }
      }

      function S() {
        for (var _e19 in this.opts.formats) {
          var _t16 = this.opts.formats[_e19];
          _t16 && this.addFormat(_e19, _t16);
        }
      }

      function N(e) {
        if (Array.isArray(e)) this.addVocabulary(e);else {
          this.logger.warn("keywords option as map is deprecated, pass array");

          for (var _t17 in e) {
            var _r24 = e[_t17];
            _r24.keyword || (_r24.keyword = _t17), this.addKeyword(_r24);
          }
        }
      }

      function k() {
        var e = _objectSpread2({}, this.opts);

        var _iterator14 = _createForOfIteratorHelper(y),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var _t18 = _step14.value;
            delete e[_t18];
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        return e;
      }

      r["default"] = w, w.ValidationError = a["default"], w.MissingRefError = n["default"];
      var j = {
        log: function () {},
        warn: function () {},
        error: function () {}
      };
      var C = /^[a-z_$][a-z0-9_$:-]*$/i;

      function O(e, t) {
        var r = this.RULES;
        if ((0, f.eachItem)(e, function (e) {
          if (r.keywords[e]) throw new Error("Keyword ".concat(e, " is already defined"));
          if (!C.test(e)) throw new Error("Keyword ".concat(e, " has invalid name"));
        }), t && t.$data && !("code" in t) && !("validate" in t)) throw new Error('$data keyword must have "code" or "validate" function');
      }

      function x(e, t, r) {
        var _this27 = this;

        var o;
        var s = null == t ? void 0 : t.post;
        if (r && s) throw new Error('keyword with "post" flag cannot have "type"');
        var a = this.RULES;
        var n = s ? a.post : a.rules.find(function (_ref41) {
          var e = _ref41.type;
          return e === r;
        });
        if (n || (n = {
          type: r,
          rules: []
        }, a.rules.push(n)), a.keywords[e] = !0, !t) return;
        var i = {
          keyword: e,
          definition: _objectSpread2(_objectSpread2({}, t), {}, {
            type: (0, u.getJSONTypes)(t.type),
            schemaType: (0, u.getJSONTypes)(t.schemaType)
          })
        };
        t.before ? T.call(this, n, i, t.before) : n.rules.push(i), a.all[e] = i, null === (o = t["implements"]) || void 0 === o || o.forEach(function (e) {
          return _this27.addKeyword(e);
        });
      }

      function T(e, t, r) {
        var o = e.rules.findIndex(function (e) {
          return e.keyword === r;
        });
        o >= 0 ? e.rules.splice(o, 0, t) : (e.rules.push(t), this.logger.warn("rule ".concat(r, " is not defined")));
      }

      function I(e) {
        var t = e.metaSchema;
        void 0 !== t && (e.$data && this.opts.$data && (t = D(t)), e.validateSchema = this.compile(t, !0));
      }

      var R = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
      };

      function D(e) {
        return {
          anyOf: [e, R]
        };
      }
    }, {
      "./compile": 5,
      "./compile/codegen": 2,
      "./compile/ref_error": 7,
      "./compile/resolve": 8,
      "./compile/rules": 9,
      "./compile/util": 10,
      "./compile/validate": 15,
      "./compile/validate/dataType": 13,
      "./refs/data.json": 19,
      "./runtime/uri": 23,
      "./runtime/validation_error": 24
    }],
    19: [function (e, t, r) {
      t.exports = {
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [{
              format: "relative-json-pointer"
            }, {
              format: "json-pointer"
            }]
          }
        },
        additionalProperties: !1
      };
    }, {}],
    20: [function (e, t, r) {
      t.exports = {
        $schema: "http://json-schema.org/draft-07/schema#",
        $id: "http://json-schema.org/draft-07/schema#",
        title: "Core schema meta-schema",
        definitions: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: {
              $ref: "#"
            }
          },
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            allOf: [{
              $ref: "#/definitions/nonNegativeInteger"
            }, {
              "default": 0
            }]
          },
          simpleTypes: {
            "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
          },
          stringArray: {
            type: "array",
            items: {
              type: "string"
            },
            uniqueItems: !0,
            "default": []
          }
        },
        type: ["object", "boolean"],
        properties: {
          $id: {
            type: "string",
            format: "uri-reference"
          },
          $schema: {
            type: "string",
            format: "uri"
          },
          $ref: {
            type: "string",
            format: "uri-reference"
          },
          $comment: {
            type: "string"
          },
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          "default": !0,
          readOnly: {
            type: "boolean",
            "default": !1
          },
          examples: {
            type: "array",
            items: !0
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: {
            $ref: "#/definitions/nonNegativeInteger"
          },
          minLength: {
            $ref: "#/definitions/nonNegativeIntegerDefault0"
          },
          pattern: {
            type: "string",
            format: "regex"
          },
          additionalItems: {
            $ref: "#"
          },
          items: {
            anyOf: [{
              $ref: "#"
            }, {
              $ref: "#/definitions/schemaArray"
            }],
            "default": !0
          },
          maxItems: {
            $ref: "#/definitions/nonNegativeInteger"
          },
          minItems: {
            $ref: "#/definitions/nonNegativeIntegerDefault0"
          },
          uniqueItems: {
            type: "boolean",
            "default": !1
          },
          contains: {
            $ref: "#"
          },
          maxProperties: {
            $ref: "#/definitions/nonNegativeInteger"
          },
          minProperties: {
            $ref: "#/definitions/nonNegativeIntegerDefault0"
          },
          required: {
            $ref: "#/definitions/stringArray"
          },
          additionalProperties: {
            $ref: "#"
          },
          definitions: {
            type: "object",
            additionalProperties: {
              $ref: "#"
            },
            "default": {}
          },
          properties: {
            type: "object",
            additionalProperties: {
              $ref: "#"
            },
            "default": {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: {
              $ref: "#"
            },
            propertyNames: {
              format: "regex"
            },
            "default": {}
          },
          dependencies: {
            type: "object",
            additionalProperties: {
              anyOf: [{
                $ref: "#"
              }, {
                $ref: "#/definitions/stringArray"
              }]
            }
          },
          propertyNames: {
            $ref: "#"
          },
          "const": !0,
          "enum": {
            type: "array",
            items: !0,
            minItems: 1,
            uniqueItems: !0
          },
          type: {
            anyOf: [{
              $ref: "#/definitions/simpleTypes"
            }, {
              type: "array",
              items: {
                $ref: "#/definitions/simpleTypes"
              },
              minItems: 1,
              uniqueItems: !0
            }]
          },
          format: {
            type: "string"
          },
          contentMediaType: {
            type: "string"
          },
          contentEncoding: {
            type: "string"
          },
          "if": {
            $ref: "#"
          },
          then: {
            $ref: "#"
          },
          "else": {
            $ref: "#"
          },
          allOf: {
            $ref: "#/definitions/schemaArray"
          },
          anyOf: {
            $ref: "#/definitions/schemaArray"
          },
          oneOf: {
            $ref: "#/definitions/schemaArray"
          },
          not: {
            $ref: "#"
          }
        },
        "default": !0
      };
    }, {}],
    21: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("fast-deep-equal");
      o.code = 'require("ajv/dist/runtime/equal").default', r["default"] = o;
    }, {
      "fast-deep-equal": 63
    }],
    22: [function (e, t, r) {

      function o(e) {
        var t = e.length;
        var r,
            o = 0,
            s = 0;

        for (; s < t;) {
          o++, r = e.charCodeAt(s++), r >= 55296 && r <= 56319 && s < t && (r = e.charCodeAt(s), 56320 == (64512 & r) && s++);
        }

        return o;
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r["default"] = o, o.code = 'require("ajv/dist/runtime/ucs2length").default';
    }, {}],
    23: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("uri-js");
      o.code = 'require("ajv/dist/runtime/uri").default', r["default"] = o;
    }, {
      "uri-js": 65
    }],
    24: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var o = function (_Error3) {
        _inherits(o, _Error3);

        var _super28 = _createSuper(o);

        function o(e) {
          var _this28;

          _classCallCheck(this, o);

          _this28 = _super28.call(this, "validation failed"), _this28.errors = e, _this28.ajv = _this28.validation = !0;
          return _this28;
        }

        return o;
      }(_wrapNativeSuper(Error));

      r["default"] = o;
    }, {}],
    25: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.validateAdditionalItems = void 0;
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: {
          message: function (_ref42) {
            var e = _ref42.params.len;
            return o.str(_templateObject151 || (_templateObject151 = _taggedTemplateLiteral(["must NOT have more than ", " items"])), e);
          },
          params: function (_ref43) {
            var e = _ref43.params.len;
            return o._(_templateObject152 || (_templateObject152 = _taggedTemplateLiteral(["{limit: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.parentSchema,
              r = e.it,
              o = t.items;
          Array.isArray(o) ? n(e, o) : (0, s.checkStrictMode)(r, '"additionalItems" is ignored when "items" is not an array of schemas');
        }
      };

      function n(e, t) {
        var r = e.gen,
            a = e.schema,
            n = e.data,
            i = e.keyword,
            c = e.it;
        c.items = !0;
        var l = r["const"]("len", o._(_templateObject153 || (_templateObject153 = _taggedTemplateLiteral(["", ".length"])), n));
        if (!1 === a) e.setParams({
          len: t.length
        }), e.pass(o._(_templateObject154 || (_templateObject154 = _taggedTemplateLiteral(["", " <= ", ""])), l, t.length));else if ("object" == _typeof(a) && !(0, s.alwaysValidSchema)(c, a)) {
          var _a5 = r["var"]("valid", o._(_templateObject155 || (_templateObject155 = _taggedTemplateLiteral(["", " <= ", ""])), l, t.length));

          r["if"]((0, o.not)(_a5), function () {
            return function (a) {
              r.forRange("i", t.length, l, function (t) {
                e.subschema({
                  keyword: i,
                  dataProp: t,
                  dataPropType: s.Type.Num
                }, a), c.allErrors || r["if"]((0, o.not)(a), function () {
                  return r["break"]();
                });
              });
            }(_a5);
          }), e.ok(_a5);
        }
      }

      r.validateAdditionalItems = n, r["default"] = a;
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10
    }],
    26: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../code"),
          s = e("../../compile/codegen"),
          a = e("../../compile/names"),
          n = e("../../compile/util");
      r["default"] = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: !0,
        trackErrors: !0,
        error: {
          message: "must NOT have additional properties",
          params: function (_ref44) {
            var e = _ref44.params;
            return s._(_templateObject156 || (_templateObject156 = _taggedTemplateLiteral(["{additionalProperty: ", "}"])), e.additionalProperty);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              i = e.parentSchema,
              c = e.data,
              l = e.errsCount,
              d = e.it;
          if (!l) throw new Error("ajv implementation error");
          var u = d.allErrors,
              f = d.opts;
          if (d.props = !0, "all" !== f.removeAdditional && (0, n.alwaysValidSchema)(d, r)) return;
          var p = (0, o.allSchemaProperties)(i.properties),
              m = (0, o.allSchemaProperties)(i.patternProperties);

          function h(e) {
            t.code(s._(_templateObject157 || (_templateObject157 = _taggedTemplateLiteral(["delete ", "[", "]"])), c, e));
          }

          function y(o) {
            if ("all" === f.removeAdditional || f.removeAdditional && !1 === r) h(o);else {
              if (!1 === r) return e.setParams({
                additionalProperty: o
              }), e.error(), void (u || t["break"]());

              if ("object" == _typeof(r) && !(0, n.alwaysValidSchema)(d, r)) {
                var _r25 = t.name("valid");

                "failing" === f.removeAdditional ? (v(o, _r25, !1), t["if"]((0, s.not)(_r25), function () {
                  e.reset(), h(o);
                })) : (v(o, _r25), u || t["if"]((0, s.not)(_r25), function () {
                  return t["break"]();
                }));
              }
            }
          }

          function v(t, r, o) {
            var s = {
              keyword: "additionalProperties",
              dataProp: t,
              dataPropType: n.Type.Str
            };
            !1 === o && Object.assign(s, {
              compositeRule: !0,
              createErrors: !1,
              allErrors: !1
            }), e.subschema(s, r);
          }

          t.forIn("key", c, function (r) {
            p.length || m.length ? t["if"](function (r) {
              var a;

              if (p.length > 8) {
                var _e20 = (0, n.schemaRefOrVal)(d, i.properties, "properties");

                a = (0, o.isOwnProperty)(t, _e20, r);
              } else a = p.length ? (s.or).apply(void 0, _toConsumableArray(p.map(function (e) {
                return s._(_templateObject158 || (_templateObject158 = _taggedTemplateLiteral(["", " === ", ""])), r, e);
              }))) : s.nil;

              return m.length && (a = (s.or).apply(void 0, [a].concat(_toConsumableArray(m.map(function (t) {
                return s._(_templateObject159 || (_templateObject159 = _taggedTemplateLiteral(["", ".test(", ")"])), (0, o.usePattern)(e, t), r);
              }))))), (0, s.not)(a);
            }(r), function () {
              return y(r);
            }) : y(r);
          }), e.ok(s._(_templateObject160 || (_templateObject160 = _taggedTemplateLiteral(["", " === ", ""])), l, a["default"].errors));
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/names": 6,
      "../../compile/util": 10,
      "../code": 42
    }],
    27: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/util");
      r["default"] = {
        keyword: "allOf",
        schemaType: "array",
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              s = e.it;
          if (!Array.isArray(r)) throw new Error("ajv implementation error");
          var a = t.name("valid");
          r.forEach(function (t, r) {
            if ((0, o.alwaysValidSchema)(s, t)) return;
            var n = e.subschema({
              keyword: "allOf",
              schemaProp: r
            }, a);
            e.ok(a), e.mergeEvaluated(n);
          });
        }
      };
    }, {
      "../../compile/util": 10
    }],
    28: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../code");
      r["default"] = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: !0,
        code: o.validateUnion,
        error: {
          message: "must match a schema in anyOf"
        }
      };
    }, {
      "../code": 42
    }],
    29: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util");
      r["default"] = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: !0,
        error: {
          message: function (_ref45) {
            var _ref45$params = _ref45.params,
                e = _ref45$params.min,
                t = _ref45$params.max;
            return void 0 === t ? o.str(_templateObject161 || (_templateObject161 = _taggedTemplateLiteral(["must contain at least ", " valid item(s)"])), e) : o.str(_templateObject162 || (_templateObject162 = _taggedTemplateLiteral(["must contain at least ", " and no more than ", " valid item(s)"])), e, t);
          },
          params: function (_ref46) {
            var _ref46$params = _ref46.params,
                e = _ref46$params.min,
                t = _ref46$params.max;
            return void 0 === t ? o._(_templateObject163 || (_templateObject163 = _taggedTemplateLiteral(["{minContains: ", "}"])), e) : o._(_templateObject164 || (_templateObject164 = _taggedTemplateLiteral(["{minContains: ", ", maxContains: ", "}"])), e, t);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              a = e.parentSchema,
              n = e.data,
              i = e.it;
          var c, l;
          var d = a.minContains,
              u = a.maxContains;
          i.opts.next ? (c = void 0 === d ? 1 : d, l = u) : c = 1;
          var f = t["const"]("len", o._(_templateObject165 || (_templateObject165 = _taggedTemplateLiteral(["", ".length"])), n));
          if (e.setParams({
            min: c,
            max: l
          }), void 0 === l && 0 === c) return void (0, s.checkStrictMode)(i, '"minContains" == 0 without "maxContains": "contains" keyword ignored');
          if (void 0 !== l && c > l) return (0, s.checkStrictMode)(i, '"minContains" > "maxContains" is always invalid'), void e.fail();

          if ((0, s.alwaysValidSchema)(i, r)) {
            var _t19 = o._(_templateObject166 || (_templateObject166 = _taggedTemplateLiteral(["", " >= ", ""])), f, c);

            return void 0 !== l && (_t19 = o._(_templateObject167 || (_templateObject167 = _taggedTemplateLiteral(["", " && ", " <= ", ""])), _t19, f, l)), void e.pass(_t19);
          }

          i.items = !0;
          var p = t.name("valid");

          function m() {
            var e = t.name("_valid"),
                r = t["let"]("count", 0);
            h(e, function () {
              return t["if"](e, function () {
                return function (e) {
                  t.code(o._(_templateObject168 || (_templateObject168 = _taggedTemplateLiteral(["", "++"])), e)), void 0 === l ? t["if"](o._(_templateObject169 || (_templateObject169 = _taggedTemplateLiteral(["", " >= ", ""])), e, c), function () {
                    return t.assign(p, !0)["break"]();
                  }) : (t["if"](o._(_templateObject170 || (_templateObject170 = _taggedTemplateLiteral(["", " > ", ""])), e, l), function () {
                    return t.assign(p, !1)["break"]();
                  }), 1 === c ? t.assign(p, !0) : t["if"](o._(_templateObject171 || (_templateObject171 = _taggedTemplateLiteral(["", " >= ", ""])), e, c), function () {
                    return t.assign(p, !0);
                  }));
                }(r);
              });
            });
          }

          function h(r, o) {
            t.forRange("i", 0, f, function (t) {
              e.subschema({
                keyword: "contains",
                dataProp: t,
                dataPropType: s.Type.Num,
                compositeRule: !0
              }, r), o();
            });
          }

          void 0 === l && 1 === c ? h(p, function () {
            return t["if"](p, function () {
              return t["break"]();
            });
          }) : 0 === c ? (t["let"](p, !0), void 0 !== l && t["if"](o._(_templateObject172 || (_templateObject172 = _taggedTemplateLiteral(["", ".length > 0"])), n), m)) : (t["let"](p, !1), m()), e.result(p, function () {
            return e.reset();
          });
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10
    }],
    30: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.validateSchemaDeps = r.validatePropertyDeps = r.error = void 0;
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../code");
      r.error = {
        message: function (_ref47) {
          var _ref47$params = _ref47.params,
              e = _ref47$params.property,
              t = _ref47$params.depsCount,
              r = _ref47$params.deps;
          return o.str(_templateObject173 || (_templateObject173 = _taggedTemplateLiteral(["must have ", " ", " when property ", " is present"])), 1 === t ? "property" : "properties", r, e);
        },
        params: function (_ref48) {
          var _ref48$params = _ref48.params,
              e = _ref48$params.property,
              t = _ref48$params.depsCount,
              r = _ref48$params.deps,
              s = _ref48$params.missingProperty;
          return o._(_templateObject174 || (_templateObject174 = _taggedTemplateLiteral(["{property: ", ",\n    missingProperty: ", ",\n    depsCount: ", ",\n    deps: ", "}"])), e, s, t, r);
        }
      };
      var n = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: r.error,
        code: function (e) {
          var _ref49 = function (_ref51) {
            var e = _ref51.schema;
            var t = {},
                r = {};

            for (var _o12 in e) {
              if ("__proto__" === _o12) continue;
              (Array.isArray(e[_o12]) ? t : r)[_o12] = e[_o12];
            }

            return [t, r];
          }(e),
              _ref50 = _slicedToArray(_ref49, 2),
              t = _ref50[0],
              r = _ref50[1];

          i(e, t), c(e, r);
        }
      };

      function i(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.schema;
        var r = e.gen,
            s = e.data,
            n = e.it;
        if (0 === Object.keys(t).length) return;
        var i = r["let"]("missing");

        var _loop2 = function (_c3) {
          var l = t[_c3];
          if (0 === l.length) return "continue";
          var d = (0, a.propertyInData)(r, s, _c3, n.opts.ownProperties);
          e.setParams({
            property: _c3,
            depsCount: l.length,
            deps: l.join(", ")
          }), n.allErrors ? r["if"](d, function () {
            var _iterator15 = _createForOfIteratorHelper(l),
                _step15;

            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var _t20 = _step15.value;
                (0, a.checkReportMissingProp)(e, _t20);
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
          }) : (r["if"](o._(_templateObject175 || (_templateObject175 = _taggedTemplateLiteral(["", " && (", ")"])), d, (0, a.checkMissingProp)(e, l, i))), (0, a.reportMissingProp)(e, i), r["else"]());
        };

        for (var _c3 in t) {
          var _ret2 = _loop2(_c3);

          if (_ret2 === "continue") continue;
        }
      }

      function c(e) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.schema;
        var r = e.gen,
            o = e.data,
            n = e.keyword,
            i = e.it,
            c = r.name("valid");

        var _loop3 = function (l) {
          (0, s.alwaysValidSchema)(i, t[l]) || (r["if"]((0, a.propertyInData)(r, o, l, i.opts.ownProperties), function () {
            var t = e.subschema({
              keyword: n,
              schemaProp: l
            }, c);
            e.mergeValidEvaluated(t, c);
          }, function () {
            return r["var"](c, !0);
          }), e.ok(c));
        };

        for (var l in t) {
          _loop3(l);
        }
      }

      r.validatePropertyDeps = i, r.validateSchemaDeps = c, r["default"] = n;
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../code": 42
    }],
    31: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util");

      function a(e, t) {
        var r = e.schema[t];
        return void 0 !== r && !(0, s.alwaysValidSchema)(e, r);
      }

      r["default"] = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: !0,
        error: {
          message: function (_ref52) {
            var e = _ref52.params;
            return o.str(_templateObject176 || (_templateObject176 = _taggedTemplateLiteral(["must match \"", "\" schema"])), e.ifClause);
          },
          params: function (_ref53) {
            var e = _ref53.params;
            return o._(_templateObject177 || (_templateObject177 = _taggedTemplateLiteral(["{failingKeyword: ", "}"])), e.ifClause);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.parentSchema,
              n = e.it;
          void 0 === r.then && void 0 === r["else"] && (0, s.checkStrictMode)(n, '"if" without "then" and "else" is ignored');
          var i = a(n, "then"),
              c = a(n, "else");
          if (!i && !c) return;
          var l = t["let"]("valid", !0),
              d = t.name("_valid");

          if (function () {
            var t = e.subschema({
              keyword: "if",
              compositeRule: !0,
              createErrors: !1,
              allErrors: !1
            }, d);
            e.mergeEvaluated(t);
          }(), e.reset(), i && c) {
            var _r26 = t["let"]("ifClause");

            e.setParams({
              ifClause: _r26
            }), t["if"](d, u("then", _r26), u("else", _r26));
          } else i ? t["if"](d, u("then")) : t["if"]((0, o.not)(d), u("else"));

          function u(r, s) {
            return function () {
              var a = e.subschema({
                keyword: r
              }, d);
              t.assign(l, d), e.mergeValidEvaluated(a, l), s ? t.assign(s, o._(_templateObject178 || (_templateObject178 = _taggedTemplateLiteral(["", ""])), r)) : e.setParams({
                ifClause: r
              });
            };
          }

          e.pass(l, function () {
            return e.error(!0);
          });
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10
    }],
    32: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./additionalItems"),
          s = e("./prefixItems"),
          a = e("./items"),
          n = e("./items2020"),
          i = e("./contains"),
          c = e("./dependencies"),
          l = e("./propertyNames"),
          d = e("./additionalProperties"),
          u = e("./properties"),
          f = e("./patternProperties"),
          p = e("./not"),
          m = e("./anyOf"),
          h = e("./oneOf"),
          y = e("./allOf"),
          v = e("./if"),
          g = e("./thenElse");

      r["default"] = function () {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        var t = [p["default"], m["default"], h["default"], y["default"], v["default"], g["default"], l["default"], d["default"], c["default"], u["default"], f["default"]];
        return e ? t.push(s["default"], n["default"]) : t.push(o["default"], a["default"]), t.push(i["default"]), t;
      };
    }, {
      "./additionalItems": 25,
      "./additionalProperties": 26,
      "./allOf": 27,
      "./anyOf": 28,
      "./contains": 29,
      "./dependencies": 30,
      "./if": 31,
      "./items": 33,
      "./items2020": 34,
      "./not": 35,
      "./oneOf": 36,
      "./patternProperties": 37,
      "./prefixItems": 38,
      "./properties": 39,
      "./propertyNames": 40,
      "./thenElse": 41
    }],
    33: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.validateTuple = void 0;
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../code"),
          n = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code: function (e) {
          var t = e.schema,
              r = e.it;
          if (Array.isArray(t)) return i(e, "additionalItems", t);
          r.items = !0, (0, s.alwaysValidSchema)(r, t) || e.ok((0, a.validateArray)(e));
        }
      };

      function i(e, t) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e.schema;
        var a = e.gen,
            n = e.parentSchema,
            i = e.data,
            c = e.keyword,
            l = e.it;
        !function (e) {
          var o = l.opts,
              a = l.errSchemaPath,
              n = r.length,
              i = n === e.minItems && (n === e.maxItems || !1 === e[t]);

          if (o.strictTuples && !i) {
            (0, s.checkStrictMode)(l, "\"".concat(c, "\" is ").concat(n, "-tuple, but minItems or maxItems/").concat(t, " are not specified or different at path \"").concat(a, "\""), o.strictTuples);
          }
        }(n), l.opts.unevaluated && r.length && !0 !== l.items && (l.items = s.mergeEvaluated.items(a, r.length, l.items));
        var d = a.name("valid"),
            u = a["const"]("len", o._(_templateObject179 || (_templateObject179 = _taggedTemplateLiteral(["", ".length"])), i));
        r.forEach(function (t, r) {
          (0, s.alwaysValidSchema)(l, t) || (a["if"](o._(_templateObject180 || (_templateObject180 = _taggedTemplateLiteral(["", " > ", ""])), u, r), function () {
            return e.subschema({
              keyword: c,
              schemaProp: r,
              dataProp: r
            }, d);
          }), e.ok(d));
        });
      }

      r.validateTuple = i, r["default"] = n;
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../code": 42
    }],
    34: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../code"),
          n = e("./additionalItems");
      r["default"] = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: {
          message: function (_ref54) {
            var e = _ref54.params.len;
            return o.str(_templateObject181 || (_templateObject181 = _taggedTemplateLiteral(["must NOT have more than ", " items"])), e);
          },
          params: function (_ref55) {
            var e = _ref55.params.len;
            return o._(_templateObject182 || (_templateObject182 = _taggedTemplateLiteral(["{limit: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.schema,
              r = e.parentSchema,
              o = e.it,
              i = r.prefixItems;
          o.items = !0, (0, s.alwaysValidSchema)(o, t) || (i ? (0, n.validateAdditionalItems)(e, i) : e.ok((0, a.validateArray)(e)));
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../code": 42,
      "./additionalItems": 25
    }],
    35: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/util");
      r["default"] = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: !0,
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              s = e.it;
          if ((0, o.alwaysValidSchema)(s, r)) return void e.fail();
          var a = t.name("valid");
          e.subschema({
            keyword: "not",
            compositeRule: !0,
            createErrors: !1,
            allErrors: !1
          }, a), e.failResult(a, function () {
            return e.reset();
          }, function () {
            return e.error();
          });
        },
        error: {
          message: "must NOT be valid"
        }
      };
    }, {
      "../../compile/util": 10
    }],
    36: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util");
      r["default"] = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: !0,
        error: {
          message: "must match exactly one schema in oneOf",
          params: function (_ref56) {
            var e = _ref56.params;
            return o._(_templateObject183 || (_templateObject183 = _taggedTemplateLiteral(["{passingSchemas: ", "}"])), e.passing);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              a = e.parentSchema,
              n = e.it;
          if (!Array.isArray(r)) throw new Error("ajv implementation error");
          if (n.opts.discriminator && a.discriminator) return;
          var i = r,
              c = t["let"]("valid", !1),
              l = t["let"]("passing", null),
              d = t.name("_valid");
          e.setParams({
            passing: l
          }), t.block(function () {
            i.forEach(function (r, a) {
              var i;
              (0, s.alwaysValidSchema)(n, r) ? t["var"](d, !0) : i = e.subschema({
                keyword: "oneOf",
                schemaProp: a,
                compositeRule: !0
              }, d), a > 0 && t["if"](o._(_templateObject184 || (_templateObject184 = _taggedTemplateLiteral(["", " && ", ""])), d, c)).assign(c, !1).assign(l, o._(_templateObject185 || (_templateObject185 = _taggedTemplateLiteral(["[", ", ", "]"])), l, a))["else"](), t["if"](d, function () {
                t.assign(c, !0), t.assign(l, a), i && e.mergeEvaluated(i, o.Name);
              });
            });
          }), e.result(c, function () {
            return e.reset();
          }, function () {
            return e.error(!0);
          });
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10
    }],
    37: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../code"),
          s = e("../../compile/codegen"),
          a = e("../../compile/util"),
          n = e("../../compile/util");
      r["default"] = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              i = e.data,
              c = e.parentSchema,
              l = e.it,
              d = l.opts,
              u = (0, o.allSchemaProperties)(r),
              f = u.filter(function (e) {
            return (0, a.alwaysValidSchema)(l, r[e]);
          });
          if (0 === u.length || f.length === u.length && (!l.opts.unevaluated || !0 === l.props)) return;
          var p = d.strictSchema && !d.allowMatchingProperties && c.properties,
              m = t.name("valid");
          !0 === l.props || l.props instanceof s.Name || (l.props = (0, n.evaluatedPropsToName)(t, l.props));
          var h = l.props;

          function y(e) {
            for (var _t21 in p) {
              new RegExp(e).test(_t21) && (0, a.checkStrictMode)(l, "property ".concat(_t21, " matches pattern ").concat(e, " (use allowMatchingProperties)"));
            }
          }

          function v(r) {
            t.forIn("key", i, function (a) {
              t["if"](s._(_templateObject186 || (_templateObject186 = _taggedTemplateLiteral(["", ".test(", ")"])), (0, o.usePattern)(e, r), a), function () {
                var o = f.includes(r);
                o || e.subschema({
                  keyword: "patternProperties",
                  schemaProp: r,
                  dataProp: a,
                  dataPropType: n.Type.Str
                }, m), l.opts.unevaluated && !0 !== h ? t.assign(s._(_templateObject187 || (_templateObject187 = _taggedTemplateLiteral(["", "[", "]"])), h, a), !0) : o || l.allErrors || t["if"]((0, s.not)(m), function () {
                  return t["break"]();
                });
              });
            });
          }

          !function () {
            var _iterator16 = _createForOfIteratorHelper(u),
                _step16;

            try {
              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var _e21 = _step16.value;
                p && y(_e21), l.allErrors ? v(_e21) : (t["var"](m, !0), v(_e21), t["if"](m));
              }
            } catch (err) {
              _iterator16.e(err);
            } finally {
              _iterator16.f();
            }
          }();
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../code": 42
    }],
    38: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./items");
      r["default"] = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: function (e) {
          return (0, o.validateTuple)(e, "items");
        }
      };
    }, {
      "./items": 33
    }],
    39: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/validate"),
          s = e("../code"),
          a = e("../../compile/util"),
          n = e("./additionalProperties");
      r["default"] = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              i = e.parentSchema,
              c = e.data,
              l = e.it;
          "all" === l.opts.removeAdditional && void 0 === i.additionalProperties && n["default"].code(new o.KeywordCxt(l, n["default"], "additionalProperties"));
          var d = (0, s.allSchemaProperties)(r);

          var _iterator17 = _createForOfIteratorHelper(d),
              _step17;

          try {
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              var _e22 = _step17.value;
              l.definedProperties.add(_e22);
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }

          l.opts.unevaluated && d.length && !0 !== l.props && (l.props = a.mergeEvaluated.props(t, (0, a.toHash)(d), l.props));
          var u = d.filter(function (e) {
            return !(0, a.alwaysValidSchema)(l, r[e]);
          });
          if (0 === u.length) return;
          var f = t.name("valid");

          var _iterator18 = _createForOfIteratorHelper(u),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var _r27 = _step18.value;
              p(_r27) ? m(_r27) : (t["if"]((0, s.propertyInData)(t, c, _r27, l.opts.ownProperties)), m(_r27), l.allErrors || t["else"]()["var"](f, !0), t.endIf()), e.it.definedProperties.add(_r27), e.ok(f);
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          function p(e) {
            return l.opts.useDefaults && !l.compositeRule && void 0 !== r[e]["default"];
          }

          function m(t) {
            e.subschema({
              keyword: "properties",
              schemaProp: t,
              dataProp: t
            }, f);
          }
        }
      };
    }, {
      "../../compile/util": 10,
      "../../compile/validate": 15,
      "../code": 42,
      "./additionalProperties": 26
    }],
    40: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util");
      r["default"] = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: {
          message: "property name must be valid",
          params: function (_ref57) {
            var e = _ref57.params;
            return o._(_templateObject188 || (_templateObject188 = _taggedTemplateLiteral(["{propertyName: ", "}"])), e.propertyName);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              a = e.data,
              n = e.it;
          if ((0, s.alwaysValidSchema)(n, r)) return;
          var i = t.name("valid");
          t.forIn("key", a, function (r) {
            e.setParams({
              propertyName: r
            }), e.subschema({
              keyword: "propertyNames",
              data: r,
              dataTypes: ["string"],
              propertyName: r,
              compositeRule: !0
            }, i), t["if"]((0, o.not)(i), function () {
              e.error(!0), n.allErrors || t["break"]();
            });
          }), e.ok(i);
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10
    }],
    41: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/util");
      r["default"] = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code: function (_ref58) {
          var e = _ref58.keyword,
              t = _ref58.parentSchema,
              r = _ref58.it;
          void 0 === t["if"] && (0, o.checkStrictMode)(r, "\"".concat(e, "\" without \"if\" is ignored"));
        }
      };
    }, {
      "../../compile/util": 10
    }],
    42: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.validateUnion = r.validateArray = r.usePattern = r.callValidateCode = r.schemaProperties = r.allSchemaProperties = r.noPropertyInData = r.propertyInData = r.isOwnProperty = r.hasPropFunc = r.reportMissingProp = r.checkMissingProp = r.checkReportMissingProp = void 0;
      var o = e("../compile/codegen"),
          s = e("../compile/util"),
          a = e("../compile/names"),
          n = e("../compile/util");

      function i(e) {
        return e.scopeValue("func", {
          ref: Object.prototype.hasOwnProperty,
          code: o._(_templateObject189 || (_templateObject189 = _taggedTemplateLiteral(["Object.prototype.hasOwnProperty"])))
        });
      }

      function c(e, t, r) {
        return o._(_templateObject190 || (_templateObject190 = _taggedTemplateLiteral(["", ".call(", ", ", ")"])), i(e), t, r);
      }

      function l(e, t, r, s) {
        var a = o._(_templateObject191 || (_templateObject191 = _taggedTemplateLiteral(["", "", " === undefined"])), t, (0, o.getProperty)(r));

        return s ? (0, o.or)(a, (0, o.not)(c(e, t, r))) : a;
      }

      function d(e) {
        return e ? Object.keys(e).filter(function (e) {
          return "__proto__" !== e;
        }) : [];
      }

      r.checkReportMissingProp = function (e, t) {
        var r = e.gen,
            s = e.data,
            a = e.it;
        r["if"](l(r, s, t, a.opts.ownProperties), function () {
          e.setParams({
            missingProperty: o._(_templateObject192 || (_templateObject192 = _taggedTemplateLiteral(["", ""])), t)
          }, !0), e.error();
        });
      }, r.checkMissingProp = function (_ref59, s, a) {
        var e = _ref59.gen,
            t = _ref59.data,
            r = _ref59.it.opts;
        return (o.or).apply(void 0, _toConsumableArray(s.map(function (s) {
          return (0, o.and)(l(e, t, s, r.ownProperties), o._(_templateObject193 || (_templateObject193 = _taggedTemplateLiteral(["", " = ", ""])), a, s));
        })));
      }, r.reportMissingProp = function (e, t) {
        e.setParams({
          missingProperty: t
        }, !0), e.error();
      }, r.hasPropFunc = i, r.isOwnProperty = c, r.propertyInData = function (e, t, r, s) {
        var a = o._(_templateObject194 || (_templateObject194 = _taggedTemplateLiteral(["", "", " !== undefined"])), t, (0, o.getProperty)(r));

        return s ? o._(_templateObject195 || (_templateObject195 = _taggedTemplateLiteral(["", " && ", ""])), a, c(e, t, r)) : a;
      }, r.noPropertyInData = l, r.allSchemaProperties = d, r.schemaProperties = function (e, t) {
        return d(t).filter(function (r) {
          return !(0, s.alwaysValidSchema)(e, t[r]);
        });
      }, r.callValidateCode = function (_ref60, l, d, u) {
        var e = _ref60.schemaCode,
            t = _ref60.data,
            _ref60$it = _ref60.it,
            r = _ref60$it.gen,
            s = _ref60$it.topSchemaRef,
            n = _ref60$it.schemaPath,
            i = _ref60$it.errorPath,
            c = _ref60.it;
        var f = u ? o._(_templateObject196 || (_templateObject196 = _taggedTemplateLiteral(["", ", ", ", ", "", ""])), e, t, s, n) : t,
            p = [[a["default"].instancePath, (0, o.strConcat)(a["default"].instancePath, i)], [a["default"].parentData, c.parentData], [a["default"].parentDataProperty, c.parentDataProperty], [a["default"].rootData, a["default"].rootData]];
        c.opts.dynamicRef && p.push([a["default"].dynamicAnchors, a["default"].dynamicAnchors]);

        var m = o._(_templateObject197 || (_templateObject197 = _taggedTemplateLiteral(["", ", ", ""])), f, r.object.apply(r, p));

        return d !== o.nil ? o._(_templateObject198 || (_templateObject198 = _taggedTemplateLiteral(["", ".call(", ", ", ")"])), l, d, m) : o._(_templateObject199 || (_templateObject199 = _taggedTemplateLiteral(["", "(", ")"])), l, m);
      };

      var u = o._(_templateObject200 || (_templateObject200 = _taggedTemplateLiteral(["new RegExp"])));

      r.usePattern = function (_ref61, r) {
        var e = _ref61.gen,
            t = _ref61.it.opts;
        var s = t.unicodeRegExp ? "u" : "",
            a = t.code.regExp,
            i = a(r, s);
        return e.scopeValue("pattern", {
          key: i.toString(),
          ref: i,
          code: o._(_templateObject201 || (_templateObject201 = _taggedTemplateLiteral(["", "(", ", ", ")"])), "new RegExp" === a.code ? u : (0, n.useFunc)(e, a), r, s)
        });
      }, r.validateArray = function (e) {
        var t = e.gen,
            r = e.data,
            a = e.keyword,
            n = e.it,
            i = t.name("valid");

        if (n.allErrors) {
          var _e23 = t["let"]("valid", !0);

          return c(function () {
            return t.assign(_e23, !1);
          }), _e23;
        }

        return t["var"](i, !0), c(function () {
          return t["break"]();
        }), i;

        function c(n) {
          var c = t["const"]("len", o._(_templateObject202 || (_templateObject202 = _taggedTemplateLiteral(["", ".length"])), r));
          t.forRange("i", 0, c, function (r) {
            e.subschema({
              keyword: a,
              dataProp: r,
              dataPropType: s.Type.Num
            }, i), t["if"]((0, o.not)(i), n);
          });
        }
      }, r.validateUnion = function (e) {
        var t = e.gen,
            r = e.schema,
            a = e.keyword,
            n = e.it;
        if (!Array.isArray(r)) throw new Error("ajv implementation error");
        if (r.some(function (e) {
          return (0, s.alwaysValidSchema)(n, e);
        }) && !n.opts.unevaluated) return;
        var i = t["let"]("valid", !1),
            c = t.name("_valid");
        t.block(function () {
          return r.forEach(function (r, s) {
            var n = e.subschema({
              keyword: a,
              schemaProp: s,
              compositeRule: !0
            }, c);
            t.assign(i, o._(_templateObject203 || (_templateObject203 = _taggedTemplateLiteral(["", " || ", ""])), i, c));
            e.mergeValidEvaluated(n, c) || t["if"]((0, o.not)(i));
          });
        }), e.result(i, function () {
          return e.reset();
        }, function () {
          return e.error(!0);
        });
      };
    }, {
      "../compile/codegen": 2,
      "../compile/names": 6,
      "../compile/util": 10
    }],
    43: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      r["default"] = {
        keyword: "id",
        code: function () {
          throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        }
      };
    }, {}],
    44: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./id"),
          s = e("./ref");
      r["default"] = ["$schema", "$id", "$defs", "$vocabulary", {
        keyword: "$comment"
      }, "definitions", o["default"], s["default"]];
    }, {
      "./id": 43,
      "./ref": 45
    }],
    45: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.callRef = r.getValidate = void 0;
      var o = e("../../compile/ref_error"),
          s = e("../code"),
          a = e("../../compile/codegen"),
          n = e("../../compile/names"),
          i = e("../../compile"),
          c = e("../../compile/util"),
          l = {
        keyword: "$ref",
        schemaType: "string",
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              s = e.it,
              n = s.baseId,
              c = s.schemaEnv,
              l = s.validateName,
              f = s.opts,
              p = s.self,
              m = c.root;
          if (("#" === r || "#/" === r) && n === m.baseId) return function () {
            if (c === m) return u(e, l, c, c.$async);
            var r = t.scopeValue("root", {
              ref: m
            });
            return u(e, a._(_templateObject204 || (_templateObject204 = _taggedTemplateLiteral(["", ".validate"])), r), m, m.$async);
          }();
          var h = i.resolveRef.call(p, m, n, r);
          if (void 0 === h) throw new o["default"](s.opts.uriResolver, n, r);
          return h instanceof i.SchemaEnv ? function (t) {
            var r = d(e, t);
            u(e, r, t, t.$async);
          }(h) : function (o) {
            var s = t.scopeValue("schema", !0 === f.code.source ? {
              ref: o,
              code: (0, a.stringify)(o)
            } : {
              ref: o
            }),
                n = t.name("valid"),
                i = e.subschema({
              schema: o,
              dataTypes: [],
              schemaPath: a.nil,
              topSchemaRef: s,
              errSchemaPath: r
            }, n);
            e.mergeEvaluated(i), e.ok(n);
          }(h);
        }
      };

      function d(e, t) {
        var r = e.gen;
        return t.validate ? r.scopeValue("validate", {
          ref: t.validate
        }) : a._(_templateObject205 || (_templateObject205 = _taggedTemplateLiteral(["", ".validate"])), r.scopeValue("wrapper", {
          ref: t
        }));
      }

      function u(e, t, r, o) {
        var i = e.gen,
            l = e.it,
            d = l.allErrors,
            u = l.schemaEnv,
            f = l.opts,
            p = f.passContext ? n["default"]["this"] : a.nil;

        function m(e) {
          var t = a._(_templateObject206 || (_templateObject206 = _taggedTemplateLiteral(["", ".errors"])), e);

          i.assign(n["default"].vErrors, a._(_templateObject207 || (_templateObject207 = _taggedTemplateLiteral(["", " === null ? ", " : ", ".concat(", ")"])), n["default"].vErrors, t, n["default"].vErrors, t)), i.assign(n["default"].errors, a._(_templateObject208 || (_templateObject208 = _taggedTemplateLiteral(["", ".length"])), n["default"].vErrors));
        }

        function h(e) {
          var t;
          if (!l.opts.unevaluated) return;
          var o = null === (t = null == r ? void 0 : r.validate) || void 0 === t ? void 0 : t.evaluated;
          if (!0 !== l.props) if (o && !o.dynamicProps) void 0 !== o.props && (l.props = c.mergeEvaluated.props(i, o.props, l.props));else {
            var _t22 = i["var"]("props", a._(_templateObject209 || (_templateObject209 = _taggedTemplateLiteral(["", ".evaluated.props"])), e));

            l.props = c.mergeEvaluated.props(i, _t22, l.props, a.Name);
          }
          if (!0 !== l.items) if (o && !o.dynamicItems) void 0 !== o.items && (l.items = c.mergeEvaluated.items(i, o.items, l.items));else {
            var _t23 = i["var"]("items", a._(_templateObject210 || (_templateObject210 = _taggedTemplateLiteral(["", ".evaluated.items"])), e));

            l.items = c.mergeEvaluated.items(i, _t23, l.items, a.Name);
          }
        }

        o ? function () {
          if (!u.$async) throw new Error("async schema referenced by sync schema");
          var r = i["let"]("valid");
          i["try"](function () {
            i.code(a._(_templateObject211 || (_templateObject211 = _taggedTemplateLiteral(["await ", ""])), (0, s.callValidateCode)(e, t, p))), h(t), d || i.assign(r, !0);
          }, function (e) {
            i["if"](a._(_templateObject212 || (_templateObject212 = _taggedTemplateLiteral(["!(", " instanceof ", ")"])), e, l.ValidationError), function () {
              return i["throw"](e);
            }), m(e), d || i.assign(r, !1);
          }), e.ok(r);
        }() : e.result((0, s.callValidateCode)(e, t, p), function () {
          return h(t);
        }, function () {
          return m(t);
        });
      }

      r.getValidate = d, r.callRef = u, r["default"] = l;
    }, {
      "../../compile": 5,
      "../../compile/codegen": 2,
      "../../compile/names": 6,
      "../../compile/ref_error": 7,
      "../../compile/util": 10,
      "../code": 42
    }],
    46: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../discriminator/types"),
          a = e("../../compile"),
          n = e("../../compile/util");
      r["default"] = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error: {
          message: function (_ref62) {
            var _ref62$params = _ref62.params,
                e = _ref62$params.discrError,
                t = _ref62$params.tagName;
            return e === s.DiscrError.Tag ? "tag \"".concat(t, "\" must be string") : "value of tag \"".concat(t, "\" must be in oneOf");
          },
          params: function (_ref63) {
            var _ref63$params = _ref63.params,
                e = _ref63$params.discrError,
                t = _ref63$params.tag,
                r = _ref63$params.tagName;
            return o._(_templateObject213 || (_templateObject213 = _taggedTemplateLiteral(["{error: ", ", tag: ", ", tagValue: ", "}"])), e, r, t);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.data,
              i = e.schema,
              c = e.parentSchema,
              l = e.it,
              d = c.oneOf;
          if (!l.opts.discriminator) throw new Error("discriminator: requires discriminator option");
          var u = i.propertyName;
          if ("string" != typeof u) throw new Error("discriminator: requires propertyName");
          if (i.mapping) throw new Error("discriminator: mapping is not supported");
          if (!d) throw new Error("discriminator: requires oneOf keyword");
          var f = t["let"]("valid", !1),
              p = t["const"]("tag", o._(_templateObject214 || (_templateObject214 = _taggedTemplateLiteral(["", "", ""])), r, (0, o.getProperty)(u)));

          function m(r) {
            var s = t.name("valid"),
                a = e.subschema({
              keyword: "oneOf",
              schemaProp: r
            }, s);
            return e.mergeEvaluated(a, o.Name), s;
          }

          t["if"](o._(_templateObject215 || (_templateObject215 = _taggedTemplateLiteral(["typeof ", " == \"string\""])), p), function () {
            return function () {
              var r = function () {
                var e;
                var t = {},
                    r = s(c);
                var o = !0;

                for (var _t24 = 0; _t24 < d.length; _t24++) {
                  var _c4 = d[_t24];
                  (null == _c4 ? void 0 : _c4.$ref) && !(0, n.schemaHasRulesButRef)(_c4, l.self.RULES) && (_c4 = a.resolveRef.call(l.self, l.schemaEnv.root, l.baseId, null == _c4 ? void 0 : _c4.$ref), _c4 instanceof a.SchemaEnv && (_c4 = _c4.schema));

                  var _f = null === (e = null == _c4 ? void 0 : _c4.properties) || void 0 === e ? void 0 : e[u];

                  if ("object" != _typeof(_f)) throw new Error("discriminator: oneOf subschemas (or referenced schemas) must have \"properties/".concat(u, "\""));
                  o = o && (r || s(_c4)), i(_f, _t24);
                }

                if (!o) throw new Error("discriminator: \"".concat(u, "\" must be required"));
                return t;

                function s(_ref64) {
                  var e = _ref64.required;
                  return Array.isArray(e) && e.includes(u);
                }

                function i(e, t) {
                  if (e["const"]) f(e["const"], t);else {
                    if (!e["enum"]) throw new Error("discriminator: \"properties/".concat(u, "\" must have \"const\" or \"enum\""));

                    var _iterator19 = _createForOfIteratorHelper(e["enum"]),
                        _step19;

                    try {
                      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                        var _r28 = _step19.value;
                        f(_r28, t);
                      }
                    } catch (err) {
                      _iterator19.e(err);
                    } finally {
                      _iterator19.f();
                    }
                  }
                }

                function f(e, r) {
                  if ("string" != typeof e || e in t) throw new Error("discriminator: \"".concat(u, "\" values must be unique strings"));
                  t[e] = r;
                }
              }();

              t["if"](!1);

              for (var _e24 in r) {
                t.elseIf(o._(_templateObject216 || (_templateObject216 = _taggedTemplateLiteral(["", " === ", ""])), p, _e24)), t.assign(f, m(r[_e24]));
              }

              t["else"](), e.error(!1, {
                discrError: s.DiscrError.Mapping,
                tag: p,
                tagName: u
              }), t.endIf();
            }();
          }, function () {
            return e.error(!1, {
              discrError: s.DiscrError.Tag,
              tag: p,
              tagName: u
            });
          }), e.ok(f);
        }
      };
    }, {
      "../../compile": 5,
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../discriminator/types": 47
    }],
    47: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.DiscrError = void 0, function (e) {
        e.Tag = "tag", e.Mapping = "mapping";
      }(r.DiscrError || (r.DiscrError = {}));
    }, {}],
    48: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./core"),
          s = e("./validation"),
          a = e("./applicator"),
          n = e("./format"),
          i = e("./metadata"),
          c = [o["default"], s["default"], (0, a["default"])(), n["default"], i.metadataVocabulary, i.contentVocabulary];
      r["default"] = c;
    }, {
      "./applicator": 32,
      "./core": 44,
      "./format": 50,
      "./metadata": 51,
      "./validation": 54
    }],
    49: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen");
      r["default"] = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: !0,
        error: {
          message: function (_ref65) {
            var e = _ref65.schemaCode;
            return o.str(_templateObject217 || (_templateObject217 = _taggedTemplateLiteral(["must match format \"", "\""])), e);
          },
          params: function (_ref66) {
            var e = _ref66.schemaCode;
            return o._(_templateObject218 || (_templateObject218 = _taggedTemplateLiteral(["{format: ", "}"])), e);
          }
        },
        code: function (e, t) {
          var r = e.gen,
              s = e.data,
              a = e.$data,
              n = e.schema,
              i = e.schemaCode,
              c = e.it,
              l = c.opts,
              d = c.errSchemaPath,
              u = c.schemaEnv,
              f = c.self;
          l.validateFormats && (a ? function () {
            var a = r.scopeValue("formats", {
              ref: f.formats,
              code: l.code.formats
            }),
                n = r["const"]("fDef", o._(_templateObject219 || (_templateObject219 = _taggedTemplateLiteral(["", "[", "]"])), a, i)),
                c = r["let"]("fType"),
                d = r["let"]("format");
            r["if"](o._(_templateObject220 || (_templateObject220 = _taggedTemplateLiteral(["typeof ", " == \"object\" && !(", " instanceof RegExp)"])), n, n), function () {
              return r.assign(c, o._(_templateObject221 || (_templateObject221 = _taggedTemplateLiteral(["", ".type || \"string\""])), n)).assign(d, o._(_templateObject222 || (_templateObject222 = _taggedTemplateLiteral(["", ".validate"])), n));
            }, function () {
              return r.assign(c, o._(_templateObject223 || (_templateObject223 = _taggedTemplateLiteral(["\"string\""])))).assign(d, n);
            }), e.fail$data((0, o.or)(!1 === l.strictSchema ? o.nil : o._(_templateObject224 || (_templateObject224 = _taggedTemplateLiteral(["", " && !", ""])), i, d), function () {
              var e = u.$async ? o._(_templateObject225 || (_templateObject225 = _taggedTemplateLiteral(["(", ".async ? await ", "(", ") : ", "(", "))"])), n, d, s, d, s) : o._(_templateObject226 || (_templateObject226 = _taggedTemplateLiteral(["", "(", ")"])), d, s),
                  r = o._(_templateObject227 || (_templateObject227 = _taggedTemplateLiteral(["(typeof ", " == \"function\" ? ", " : ", ".test(", "))"])), d, e, d, s);

              return o._(_templateObject228 || (_templateObject228 = _taggedTemplateLiteral(["", " && ", " !== true && ", " === ", " && !", ""])), d, d, c, t, r);
            }()));
          }() : function () {
            var a = f.formats[n];
            if (!a) return void function () {
              if (!1 === l.strictSchema) return void f.logger.warn(e());
              throw new Error(e());

              function e() {
                return "unknown format \"".concat(n, "\" ignored in schema at path \"").concat(d, "\"");
              }
            }();
            if (!0 === a) return;

            var _ref67 = function (e) {
              var t = e instanceof RegExp ? (0, o.regexpCode)(e) : l.code.formats ? o._(_templateObject229 || (_templateObject229 = _taggedTemplateLiteral(["", "", ""])), l.code.formats, (0, o.getProperty)(n)) : void 0,
                  s = r.scopeValue("formats", {
                key: n,
                ref: e,
                code: t
              });
              if ("object" == _typeof(e) && !(e instanceof RegExp)) return [e.type || "string", e.validate, o._(_templateObject230 || (_templateObject230 = _taggedTemplateLiteral(["", ".validate"])), s)];
              return ["string", e, s];
            }(a),
                _ref68 = _slicedToArray(_ref67, 3),
                i = _ref68[0],
                c = _ref68[1],
                p = _ref68[2];

            i === t && e.pass(function () {
              if ("object" == _typeof(a) && !(a instanceof RegExp) && a.async) {
                if (!u.$async) throw new Error("async format in sync schema");
                return o._(_templateObject231 || (_templateObject231 = _taggedTemplateLiteral(["await ", "(", ")"])), p, s);
              }

              return "function" == typeof c ? o._(_templateObject232 || (_templateObject232 = _taggedTemplateLiteral(["", "(", ")"])), p, s) : o._(_templateObject233 || (_templateObject233 = _taggedTemplateLiteral(["", ".test(", ")"])), p, s);
            }());
          }());
        }
      };
    }, {
      "../../compile/codegen": 2
    }],
    50: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./format");
      r["default"] = [o["default"]];
    }, {
      "./format": 49
    }],
    51: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.contentVocabulary = r.metadataVocabulary = void 0, r.metadataVocabulary = ["title", "description", "default", "deprecated", "readOnly", "writeOnly", "examples"], r.contentVocabulary = ["contentMediaType", "contentEncoding", "contentSchema"];
    }, {}],
    52: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../../runtime/equal");
      r["default"] = {
        keyword: "const",
        $data: !0,
        error: {
          message: "must be equal to constant",
          params: function (_ref69) {
            var e = _ref69.schemaCode;
            return o._(_templateObject234 || (_templateObject234 = _taggedTemplateLiteral(["{allowedValue: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.data,
              n = e.$data,
              i = e.schemaCode,
              c = e.schema;
          n || c && "object" == _typeof(c) ? e.fail$data(o._(_templateObject235 || (_templateObject235 = _taggedTemplateLiteral(["!", "(", ", ", ")"])), (0, s.useFunc)(t, a["default"]), r, i)) : e.fail(o._(_templateObject236 || (_templateObject236 = _taggedTemplateLiteral(["", " !== ", ""])), c, r));
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../../runtime/equal": 21
    }],
    53: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../../runtime/equal");
      r["default"] = {
        keyword: "enum",
        schemaType: "array",
        $data: !0,
        error: {
          message: "must be equal to one of the allowed values",
          params: function (_ref70) {
            var e = _ref70.schemaCode;
            return o._(_templateObject237 || (_templateObject237 = _taggedTemplateLiteral(["{allowedValues: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.data,
              n = e.$data,
              i = e.schema,
              c = e.schemaCode,
              l = e.it;
          if (!n && 0 === i.length) throw new Error("enum must have non-empty array");
          var d;

          var u = function () {
            return null != d ? d : d = (0, s.useFunc)(t, a["default"]);
          };

          var f;
          if (i.length >= l.opts.loopEnum || n) f = t["let"]("valid"), e.block$data(f, function () {
            t.assign(f, !1), t.forOf("v", c, function (e) {
              return t["if"](o._(_templateObject238 || (_templateObject238 = _taggedTemplateLiteral(["", "(", ", ", ")"])), u(), r, e), function () {
                return t.assign(f, !0)["break"]();
              });
            });
          });else {
            if (!Array.isArray(i)) throw new Error("ajv implementation error");

            var _e25 = t["const"]("vSchema", c);

            f = (o.or).apply(void 0, _toConsumableArray(i.map(function (t, s) {
              return function (e, t) {
                var s = i[t];
                return "object" == _typeof(s) && null !== s ? o._(_templateObject239 || (_templateObject239 = _taggedTemplateLiteral(["", "(", ", ", "[", "])"])), u(), r, e, t) : o._(_templateObject240 || (_templateObject240 = _taggedTemplateLiteral(["", " === ", ""])), r, s);
              }(_e25, s);
            })));
          }
          e.pass(f);
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../../runtime/equal": 21
    }],
    54: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("./limitNumber"),
          s = e("./multipleOf"),
          a = e("./limitLength"),
          n = e("./pattern"),
          i = e("./limitProperties"),
          c = e("./required"),
          l = e("./limitItems"),
          d = e("./uniqueItems"),
          u = e("./const"),
          f = e("./enum");
      r["default"] = [o["default"], s["default"], a["default"], n["default"], i["default"], c["default"], l["default"], d["default"], {
        keyword: "type",
        schemaType: ["string", "array"]
      }, {
        keyword: "nullable",
        schemaType: "boolean"
      }, u["default"], f["default"]];
    }, {
      "./const": 52,
      "./enum": 53,
      "./limitItems": 55,
      "./limitLength": 56,
      "./limitNumber": 57,
      "./limitProperties": 58,
      "./multipleOf": 59,
      "./pattern": 60,
      "./required": 61,
      "./uniqueItems": 62
    }],
    55: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen");
      r["default"] = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: !0,
        error: {
          message: function (_ref71) {
            var e = _ref71.keyword,
                t = _ref71.schemaCode;
            return o.str(_templateObject241 || (_templateObject241 = _taggedTemplateLiteral(["must NOT have ", " than ", " items"])), "maxItems" === e ? "more" : "fewer", t);
          },
          params: function (_ref72) {
            var e = _ref72.schemaCode;
            return o._(_templateObject242 || (_templateObject242 = _taggedTemplateLiteral(["{limit: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.keyword,
              r = e.data,
              s = e.schemaCode;
          e.fail$data(o._(_templateObject243 || (_templateObject243 = _taggedTemplateLiteral(["", ".length ", " ", ""])), r, "maxItems" === t ? o.operators.GT : o.operators.LT, s));
        }
      };
    }, {
      "../../compile/codegen": 2
    }],
    56: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = e("../../compile/util"),
          a = e("../../runtime/ucs2length");
      r["default"] = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: !0,
        error: {
          message: function (_ref73) {
            var e = _ref73.keyword,
                t = _ref73.schemaCode;
            return o.str(_templateObject244 || (_templateObject244 = _taggedTemplateLiteral(["must NOT have ", " than ", " characters"])), "maxLength" === e ? "more" : "fewer", t);
          },
          params: function (_ref74) {
            var e = _ref74.schemaCode;
            return o._(_templateObject245 || (_templateObject245 = _taggedTemplateLiteral(["{limit: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.keyword,
              r = e.data,
              n = e.schemaCode,
              i = e.it,
              c = "maxLength" === t ? o.operators.GT : o.operators.LT,
              l = !1 === i.opts.unicode ? o._(_templateObject246 || (_templateObject246 = _taggedTemplateLiteral(["", ".length"])), r) : o._(_templateObject247 || (_templateObject247 = _taggedTemplateLiteral(["", "(", ")"])), (0, s.useFunc)(e.gen, a["default"]), r);
          e.fail$data(o._(_templateObject248 || (_templateObject248 = _taggedTemplateLiteral(["", " ", " ", ""])), l, c, n));
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../../runtime/ucs2length": 22
    }],
    57: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen"),
          s = o.operators,
          a = {
        maximum: {
          okStr: "<=",
          ok: s.LTE,
          fail: s.GT
        },
        minimum: {
          okStr: ">=",
          ok: s.GTE,
          fail: s.LT
        },
        exclusiveMaximum: {
          okStr: "<",
          ok: s.LT,
          fail: s.GTE
        },
        exclusiveMinimum: {
          okStr: ">",
          ok: s.GT,
          fail: s.LTE
        }
      },
          n = {
        message: function (_ref75) {
          var e = _ref75.keyword,
              t = _ref75.schemaCode;
          return o.str(_templateObject249 || (_templateObject249 = _taggedTemplateLiteral(["must be ", " ", ""])), a[e].okStr, t);
        },
        params: function (_ref76) {
          var e = _ref76.keyword,
              t = _ref76.schemaCode;
          return o._(_templateObject250 || (_templateObject250 = _taggedTemplateLiteral(["{comparison: ", ", limit: ", "}"])), a[e].okStr, t);
        }
      },
          i = {
        keyword: Object.keys(a),
        type: "number",
        schemaType: "number",
        $data: !0,
        error: n,
        code: function (e) {
          var t = e.keyword,
              r = e.data,
              s = e.schemaCode;
          e.fail$data(o._(_templateObject251 || (_templateObject251 = _taggedTemplateLiteral(["", " ", " ", " || isNaN(", ")"])), r, a[t].fail, s, r));
        }
      };
      r["default"] = i;
    }, {
      "../../compile/codegen": 2
    }],
    58: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen");
      r["default"] = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: !0,
        error: {
          message: function (_ref77) {
            var e = _ref77.keyword,
                t = _ref77.schemaCode;
            return o.str(_templateObject252 || (_templateObject252 = _taggedTemplateLiteral(["must NOT have ", " than ", " properties"])), "maxProperties" === e ? "more" : "fewer", t);
          },
          params: function (_ref78) {
            var e = _ref78.schemaCode;
            return o._(_templateObject253 || (_templateObject253 = _taggedTemplateLiteral(["{limit: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.keyword,
              r = e.data,
              s = e.schemaCode;
          e.fail$data(o._(_templateObject254 || (_templateObject254 = _taggedTemplateLiteral(["Object.keys(", ").length ", " ", ""])), r, "maxProperties" === t ? o.operators.GT : o.operators.LT, s));
        }
      };
    }, {
      "../../compile/codegen": 2
    }],
    59: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/codegen");
      r["default"] = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: !0,
        error: {
          message: function (_ref79) {
            var e = _ref79.schemaCode;
            return o.str(_templateObject255 || (_templateObject255 = _taggedTemplateLiteral(["must be multiple of ", ""])), e);
          },
          params: function (_ref80) {
            var e = _ref80.schemaCode;
            return o._(_templateObject256 || (_templateObject256 = _taggedTemplateLiteral(["{multipleOf: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.data,
              s = e.schemaCode,
              a = e.it,
              n = a.opts.multipleOfPrecision,
              i = t["let"]("res"),
              c = n ? o._(_templateObject257 || (_templateObject257 = _taggedTemplateLiteral(["Math.abs(Math.round(", ") - ", ") > 1e-", ""])), i, i, n) : o._(_templateObject258 || (_templateObject258 = _taggedTemplateLiteral(["", " !== parseInt(", ")"])), i, i);
          e.fail$data(o._(_templateObject259 || (_templateObject259 = _taggedTemplateLiteral(["(", " === 0 || (", " = ", "/", ", ", "))"])), s, i, r, s, c));
        }
      };
    }, {
      "../../compile/codegen": 2
    }],
    60: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../code"),
          s = e("../../compile/codegen");
      r["default"] = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: !0,
        error: {
          message: function (_ref81) {
            var e = _ref81.schemaCode;
            return s.str(_templateObject260 || (_templateObject260 = _taggedTemplateLiteral(["must match pattern \"", "\""])), e);
          },
          params: function (_ref82) {
            var e = _ref82.schemaCode;
            return s._(_templateObject261 || (_templateObject261 = _taggedTemplateLiteral(["{pattern: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.data,
              r = e.$data,
              a = e.schema,
              n = e.schemaCode,
              i = e.it,
              c = r ? s._(_templateObject262 || (_templateObject262 = _taggedTemplateLiteral(["(new RegExp(", ", ", "))"])), n, i.opts.unicodeRegExp ? "u" : "") : (0, o.usePattern)(e, a);
          e.fail$data(s._(_templateObject263 || (_templateObject263 = _taggedTemplateLiteral(["!", ".test(", ")"])), c, t));
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../code": 42
    }],
    61: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../code"),
          s = e("../../compile/codegen"),
          a = e("../../compile/util");
      r["default"] = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: !0,
        error: {
          message: function (_ref83) {
            var e = _ref83.params.missingProperty;
            return s.str(_templateObject264 || (_templateObject264 = _taggedTemplateLiteral(["must have required property '", "'"])), e);
          },
          params: function (_ref84) {
            var e = _ref84.params.missingProperty;
            return s._(_templateObject265 || (_templateObject265 = _taggedTemplateLiteral(["{missingProperty: ", "}"])), e);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.schema,
              n = e.schemaCode,
              i = e.data,
              c = e.$data,
              l = e.it,
              d = l.opts;
          if (!c && 0 === r.length) return;
          var u = r.length >= d.loopRequired;

          if (l.allErrors ? function () {
            if (u || c) e.block$data(s.nil, f);else {
              var _iterator20 = _createForOfIteratorHelper(r),
                  _step20;

              try {
                for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                  var _t25 = _step20.value;
                  (0, o.checkReportMissingProp)(e, _t25);
                }
              } catch (err) {
                _iterator20.e(err);
              } finally {
                _iterator20.f();
              }
            }
          }() : function () {
            var a = t["let"]("missing");

            if (u || c) {
              var _r29 = t["let"]("valid", !0);

              e.block$data(_r29, function () {
                return function (r, a) {
                  e.setParams({
                    missingProperty: r
                  }), t.forOf(r, n, function () {
                    t.assign(a, (0, o.propertyInData)(t, i, r, d.ownProperties)), t["if"]((0, s.not)(a), function () {
                      e.error(), t["break"]();
                    });
                  }, s.nil);
                }(a, _r29);
              }), e.ok(_r29);
            } else t["if"]((0, o.checkMissingProp)(e, r, a)), (0, o.reportMissingProp)(e, a), t["else"]();
          }(), d.strictRequired) {
            var _t26 = e.parentSchema.properties,
                _o13 = e.it.definedProperties;

            var _iterator21 = _createForOfIteratorHelper(r),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var _e26 = _step21.value;

                if (void 0 === (null == _t26 ? void 0 : _t26[_e26]) && !_o13.has(_e26)) {
                  (0, a.checkStrictMode)(l, "required property \"".concat(_e26, "\" is not defined at \"").concat(l.schemaEnv.baseId + l.errSchemaPath, "\" (strictRequired)"), l.opts.strictRequired);
                }
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }

          function f() {
            t.forOf("prop", n, function (r) {
              e.setParams({
                missingProperty: r
              }), t["if"]((0, o.noPropertyInData)(t, i, r, d.ownProperties), function () {
                return e.error();
              });
            });
          }
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../code": 42
    }],
    62: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = e("../../compile/validate/dataType"),
          s = e("../../compile/codegen"),
          a = e("../../compile/util"),
          n = e("../../runtime/equal");
      r["default"] = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: !0,
        error: {
          message: function (_ref85) {
            var _ref85$params = _ref85.params,
                e = _ref85$params.i,
                t = _ref85$params.j;
            return s.str(_templateObject266 || (_templateObject266 = _taggedTemplateLiteral(["must NOT have duplicate items (items ## ", " and ", " are identical)"])), t, e);
          },
          params: function (_ref86) {
            var _ref86$params = _ref86.params,
                e = _ref86$params.i,
                t = _ref86$params.j;
            return s._(_templateObject267 || (_templateObject267 = _taggedTemplateLiteral(["{i: ", ", j: ", "}"])), e, t);
          }
        },
        code: function (e) {
          var t = e.gen,
              r = e.data,
              i = e.$data,
              c = e.schema,
              l = e.parentSchema,
              d = e.schemaCode,
              u = e.it;
          if (!i && !c) return;
          var f = t["let"]("valid"),
              p = l.items ? (0, o.getSchemaTypes)(l.items) : [];

          function m(a, n) {
            var i = t.name("item"),
                c = (0, o.checkDataTypes)(p, i, u.opts.strictNumbers, o.DataType.Wrong),
                l = t["const"]("indices", s._(_templateObject268 || (_templateObject268 = _taggedTemplateLiteral(["{}"]))));
            t["for"](s._(_templateObject269 || (_templateObject269 = _taggedTemplateLiteral([";", "--;"])), a), function () {
              t["let"](i, s._(_templateObject270 || (_templateObject270 = _taggedTemplateLiteral(["", "[", "]"])), r, a)), t["if"](c, s._(_templateObject271 || (_templateObject271 = _taggedTemplateLiteral(["continue"])))), p.length > 1 && t["if"](s._(_templateObject272 || (_templateObject272 = _taggedTemplateLiteral(["typeof ", " == \"string\""])), i), s._(_templateObject273 || (_templateObject273 = _taggedTemplateLiteral(["", " += \"_\""])), i)), t["if"](s._(_templateObject274 || (_templateObject274 = _taggedTemplateLiteral(["typeof ", "[", "] == \"number\""])), l, i), function () {
                t.assign(n, s._(_templateObject275 || (_templateObject275 = _taggedTemplateLiteral(["", "[", "]"])), l, i)), e.error(), t.assign(f, !1)["break"]();
              }).code(s._(_templateObject276 || (_templateObject276 = _taggedTemplateLiteral(["", "[", "] = ", ""])), l, i, a));
            });
          }

          function h(o, i) {
            var c = (0, a.useFunc)(t, n["default"]),
                l = t.name("outer");
            t.label(l)["for"](s._(_templateObject277 || (_templateObject277 = _taggedTemplateLiteral([";", "--;"])), o), function () {
              return t["for"](s._(_templateObject278 || (_templateObject278 = _taggedTemplateLiteral(["", " = ", "; ", "--;"])), i, o, i), function () {
                return t["if"](s._(_templateObject279 || (_templateObject279 = _taggedTemplateLiteral(["", "(", "[", "], ", "[", "])"])), c, r, o, r, i), function () {
                  e.error(), t.assign(f, !1)["break"](l);
                });
              });
            });
          }

          e.block$data(f, function () {
            var o = t["let"]("i", s._(_templateObject280 || (_templateObject280 = _taggedTemplateLiteral(["", ".length"])), r)),
                a = t["let"]("j");
            e.setParams({
              i: o,
              j: a
            }), t.assign(f, !0), t["if"](s._(_templateObject281 || (_templateObject281 = _taggedTemplateLiteral(["", " > 1"])), o), function () {
              return (p.length > 0 && !p.some(function (e) {
                return "object" === e || "array" === e;
              }) ? m : h)(o, a);
            });
          }, s._(_templateObject282 || (_templateObject282 = _taggedTemplateLiteral(["", " === false"])), d)), e.ok(f);
        }
      };
    }, {
      "../../compile/codegen": 2,
      "../../compile/util": 10,
      "../../compile/validate/dataType": 13,
      "../../runtime/equal": 21
    }],
    63: [function (e, t, r) {

      t.exports = function e(t, r) {
        if (t === r) return !0;

        if (t && r && "object" == _typeof(t) && "object" == _typeof(r)) {
          if (t.constructor !== r.constructor) return !1;
          var o, s, a;

          if (Array.isArray(t)) {
            if ((o = t.length) != r.length) return !1;

            for (s = o; 0 != s--;) {
              if (!e(t[s], r[s])) return !1;
            }

            return !0;
          }

          if (t.constructor === RegExp) return t.source === r.source && t.flags === r.flags;
          if (t.valueOf !== Object.prototype.valueOf) return t.valueOf() === r.valueOf();
          if (t.toString !== Object.prototype.toString) return t.toString() === r.toString();
          if ((o = (a = Object.keys(t)).length) !== Object.keys(r).length) return !1;

          for (s = o; 0 != s--;) {
            if (!Object.prototype.hasOwnProperty.call(r, a[s])) return !1;
          }

          for (s = o; 0 != s--;) {
            var n = a[s];
            if (!e(t[n], r[n])) return !1;
          }

          return !0;
        }

        return t != t && r != r;
      };
    }, {}],
    64: [function (e, t, r) {

      var o = t.exports = function (e, t, r) {
        "function" == typeof t && (r = t, t = {}), s(t, "function" == typeof (r = t.cb || r) ? r : r.pre || function () {}, r.post || function () {}, e, "", e);
      };

      function s(e, t, r, a, n, i, c, l, d, u) {
        if (a && "object" == _typeof(a) && !Array.isArray(a)) {
          for (var f in t(a, n, i, c, l, d, u), a) {
            var p = a[f];

            if (Array.isArray(p)) {
              if (f in o.arrayKeywords) for (var m = 0; m < p.length; m++) {
                s(e, t, r, p[m], n + "/" + f + "/" + m, i, n, f, a, m);
              }
            } else if (f in o.propsKeywords) {
              if (p && "object" == _typeof(p)) for (var h in p) {
                s(e, t, r, p[h], n + "/" + f + "/" + h.replace(/~/g, "~0").replace(/\//g, "~1"), i, n, f, a, h);
              }
            } else (f in o.keywords || e.allKeys && !(f in o.skipKeywords)) && s(e, t, r, p, n + "/" + f, i, n, f, a);
          }

          r(a, n, i, c, l, d, u);
        }
      }

      o.keywords = {
        additionalItems: !0,
        items: !0,
        contains: !0,
        additionalProperties: !0,
        propertyNames: !0,
        not: !0,
        "if": !0,
        then: !0,
        "else": !0
      }, o.arrayKeywords = {
        items: !0,
        allOf: !0,
        anyOf: !0,
        oneOf: !0
      }, o.propsKeywords = {
        $defs: !0,
        definitions: !0,
        properties: !0,
        patternProperties: !0,
        dependencies: !0
      }, o.skipKeywords = {
        "default": !0,
        "enum": !0,
        "const": !0,
        required: !0,
        maximum: !0,
        minimum: !0,
        exclusiveMaximum: !0,
        exclusiveMinimum: !0,
        multipleOf: !0,
        maxLength: !0,
        minLength: !0,
        pattern: !0,
        format: !0,
        maxItems: !0,
        minItems: !0,
        uniqueItems: !0,
        maxProperties: !0,
        minProperties: !0
      };
    }, {}],
    65: [function (e, t, r) {
      /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
      !function (e, o) {
        o("object" == _typeof(r) && void 0 !== t ? r : e.URI = e.URI || {});
      }(this, function (e) {

        function t() {
          for (var e = arguments.length, t = Array(e), r = 0; r < e; r++) {
            t[r] = arguments[r];
          }

          if (t.length > 1) {
            t[0] = t[0].slice(0, -1);

            for (var o = t.length - 1, s = 1; s < o; ++s) {
              t[s] = t[s].slice(1, -1);
            }

            return t[o] = t[o].slice(1), t.join("");
          }

          return t[0];
        }

        function r(e) {
          return "(?:" + e + ")";
        }

        function o(e) {
          return void 0 === e ? "undefined" : null === e ? "null" : Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase();
        }

        function s(e) {
          return e.toUpperCase();
        }

        function a(e) {
          var o = "[A-Za-z]",
              s = "[0-9]",
              a = t(s, "[A-Fa-f]"),
              n = r(r("%[EFef]" + a + "%" + a + a + "%" + a + a) + "|" + r("%[89A-Fa-f]" + a + "%" + a + a) + "|" + r("%" + a + a)),
              i = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
              c = t("[\\:\\/\\?\\#\\[\\]\\@]", i),
              l = e ? "[\\uE000-\\uF8FF]" : "[]",
              d = t(o, s, "[\\-\\.\\_\\~]", e ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]");
              r(o + t(o, s, "[\\+\\-\\.]") + "*");
              r(r(n + "|" + t(d, i, "[\\:]")) + "*");
              var p = (r(r("25[0-5]") + "|" + r("2[0-4][0-9]") + "|" + r("1[0-9][0-9]") + "|" + r("0?[1-9][0-9]") + "|0?0?" + s)),
              m = r(p + "\\." + p + "\\." + p + "\\." + p),
              h = r(a + "{1,4}"),
              y = r(r(h + "\\:" + h) + "|" + m),
              v = r(r(h + "\\:") + "{6}" + y),
              g = r("\\:\\:" + r(h + "\\:") + "{5}" + y),
              $ = r(r(h) + "?\\:\\:" + r(h + "\\:") + "{4}" + y),
              _ = r(r(r(h + "\\:") + "{0,1}" + h) + "?\\:\\:" + r(h + "\\:") + "{3}" + y),
              w = r(r(r(h + "\\:") + "{0,2}" + h) + "?\\:\\:" + r(h + "\\:") + "{2}" + y),
              b = r(r(r(h + "\\:") + "{0,3}" + h) + "?\\:\\:" + h + "\\:" + y),
              E = r(r(r(h + "\\:") + "{0,4}" + h) + "?\\:\\:" + y),
              P = r(r(r(h + "\\:") + "{0,5}" + h) + "?\\:\\:" + h),
              S = r(r(r(h + "\\:") + "{0,6}" + h) + "?\\:\\:"),
              N = r([v, g, $, _, w, b, E, P, S].join("|")),
              k = r(r(d + "|" + n) + "+");
              r("[vV]" + a + "+\\." + t(d, i, "[\\:]") + "+");
              r(r(n + "|" + t(d, i)) + "*");
              var D = r(n + "|" + t(d, i, "[\\:\\@]"));
              r(r(n + "|" + t(d, i, "[\\@]")) + "+");
              (r(r(D + "|" + t("[\\/\\?]", l)) + "*"));
          return {
            NOT_SCHEME: new RegExp(t("[^]", o, s, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(t("[^\\%\\:]", d, i), "g"),
            NOT_HOST: new RegExp(t("[^\\%\\[\\]\\:]", d, i), "g"),
            NOT_PATH: new RegExp(t("[^\\%\\/\\:\\@]", d, i), "g"),
            NOT_PATH_NOSCHEME: new RegExp(t("[^\\%\\/\\@]", d, i), "g"),
            NOT_QUERY: new RegExp(t("[^\\%]", d, i, "[\\:\\@\\/\\?]", l), "g"),
            NOT_FRAGMENT: new RegExp(t("[^\\%]", d, i, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(t("[^]", d, i), "g"),
            UNRESERVED: new RegExp(d, "g"),
            OTHER_CHARS: new RegExp(t("[^\\%]", d, c), "g"),
            PCT_ENCODED: new RegExp(n, "g"),
            IPV4ADDRESS: new RegExp("^(" + m + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + N + ")" + r(r("\\%25|\\%(?!" + a + "{2})") + "(" + k + ")") + "?\\]?$")
          };
        }

        var n = a(!1),
            i = a(!0),
            c = function (e, t) {
          if (Array.isArray(e)) return e;
          if (Symbol.iterator in Object(e)) return function (e, t) {
            var r = [],
                o = !0,
                s = !1,
                a = void 0;

            try {
              for (var n, i = e[Symbol.iterator](); !(o = (n = i.next()).done) && (r.push(n.value), !t || r.length !== t); o = !0) {
                ;
              }
            } catch (e) {
              s = !0, a = e;
            } finally {
              try {
                !o && i["return"] && i["return"]();
              } finally {
                if (s) throw a;
              }
            }

            return r;
          }(e, t);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        },
            l = 2147483647,
            d = 36,
            u = /^xn--/,
            f = /[^\0-\x7E]/,
            p = /[\x2E\u3002\uFF0E\uFF61]/g,
            m = {
          overflow: "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        },
            h = Math.floor,
            y = String.fromCharCode;

        function v(e) {
          throw new RangeError(m[e]);
        }

        function g(e, t) {
          var r = e.split("@"),
              o = "";
          r.length > 1 && (o = r[0] + "@", e = r[1]);

          var s = function (e, t) {
            for (var r = [], o = e.length; o--;) {
              r[o] = t(e[o]);
            }

            return r;
          }((e = e.replace(p, ".")).split("."), t).join(".");

          return o + s;
        }

        function $(e) {
          for (var t = [], r = 0, o = e.length; r < o;) {
            var s = e.charCodeAt(r++);

            if (s >= 55296 && s <= 56319 && r < o) {
              var a = e.charCodeAt(r++);
              56320 == (64512 & a) ? t.push(((1023 & s) << 10) + (1023 & a) + 65536) : (t.push(s), r--);
            } else t.push(s);
          }

          return t;
        }

        var _ = function (e, t) {
          return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
        },
            w = function (e, t, r) {
          var o = 0;

          for (e = r ? h(e / 700) : e >> 1, e += h(e / t); e > 455; o += d) {
            e = h(e / 35);
          }

          return h(o + 36 * e / (e + 38));
        },
            b = function (e) {
          var t,
              r = [],
              o = e.length,
              s = 0,
              a = 128,
              n = 72,
              i = e.lastIndexOf("-");
          i < 0 && (i = 0);

          for (var c = 0; c < i; ++c) {
            e.charCodeAt(c) >= 128 && v("not-basic"), r.push(e.charCodeAt(c));
          }

          for (var u = i > 0 ? i + 1 : 0; u < o;) {
            for (var f = s, p = 1, m = d;; m += d) {
              u >= o && v("invalid-input");
              var y = (t = e.charCodeAt(u++)) - 48 < 10 ? t - 22 : t - 65 < 26 ? t - 65 : t - 97 < 26 ? t - 97 : d;
              (y >= d || y > h((l - s) / p)) && v("overflow"), s += y * p;
              var g = m <= n ? 1 : m >= n + 26 ? 26 : m - n;
              if (y < g) break;
              var $ = d - g;
              p > h(l / $) && v("overflow"), p *= $;
            }

            var _ = r.length + 1;

            n = w(s - f, _, 0 == f), h(s / _) > l - a && v("overflow"), a += h(s / _), s %= _, r.splice(s++, 0, a);
          }

          return String.fromCodePoint.apply(String, r);
        },
            E = function (e) {
          var t = [],
              r = (e = $(e)).length,
              o = 128,
              s = 0,
              a = 72,
              n = !0,
              i = !1,
              c = void 0;

          try {
            for (var u, f = e[Symbol.iterator](); !(n = (u = f.next()).done); n = !0) {
              var p = u.value;
              p < 128 && t.push(y(p));
            }
          } catch (e) {
            i = !0, c = e;
          } finally {
            try {
              !n && f["return"] && f["return"]();
            } finally {
              if (i) throw c;
            }
          }

          var m = t.length,
              g = m;

          for (m && t.push("-"); g < r;) {
            var b = l,
                E = !0,
                P = !1,
                S = void 0;

            try {
              for (var N, k = e[Symbol.iterator](); !(E = (N = k.next()).done); E = !0) {
                var j = N.value;
                j >= o && j < b && (b = j);
              }
            } catch (e) {
              P = !0, S = e;
            } finally {
              try {
                !E && k["return"] && k["return"]();
              } finally {
                if (P) throw S;
              }
            }

            var C = g + 1;
            b - o > h((l - s) / C) && v("overflow"), s += (b - o) * C, o = b;
            var O = !0,
                x = !1,
                T = void 0;

            try {
              for (var I, R = e[Symbol.iterator](); !(O = (I = R.next()).done); O = !0) {
                var D = I.value;

                if (D < o && ++s > l && v("overflow"), D == o) {
                  for (var A = s, M = d;; M += d) {
                    var V = M <= a ? 1 : M >= a + 26 ? 26 : M - a;
                    if (A < V) break;
                    var F = A - V,
                        q = d - V;
                    t.push(y(_(V + F % q, 0))), A = h(F / q);
                  }

                  t.push(y(_(A, 0))), a = w(s, C, g == m), s = 0, ++g;
                }
              }
            } catch (e) {
              x = !0, T = e;
            } finally {
              try {
                !O && R["return"] && R["return"]();
              } finally {
                if (x) throw T;
              }
            }

            ++s, ++o;
          }

          return t.join("");
        },
            P = function (e) {
          return g(e, function (e) {
            return f.test(e) ? "xn--" + E(e) : e;
          });
        },
            S = function (e) {
          return g(e, function (e) {
            return u.test(e) ? b(e.slice(4).toLowerCase()) : e;
          });
        },
            N = {};

        function k(e) {
          var t = e.charCodeAt(0);
          return t < 16 ? "%0" + t.toString(16).toUpperCase() : t < 128 ? "%" + t.toString(16).toUpperCase() : t < 2048 ? "%" + (t >> 6 | 192).toString(16).toUpperCase() + "%" + (63 & t | 128).toString(16).toUpperCase() : "%" + (t >> 12 | 224).toString(16).toUpperCase() + "%" + (t >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (63 & t | 128).toString(16).toUpperCase();
        }

        function j(e) {
          for (var t = "", r = 0, o = e.length; r < o;) {
            var s = parseInt(e.substr(r + 1, 2), 16);
            if (s < 128) t += String.fromCharCode(s), r += 3;else if (s >= 194 && s < 224) {
              if (o - r >= 6) {
                var a = parseInt(e.substr(r + 4, 2), 16);
                t += String.fromCharCode((31 & s) << 6 | 63 & a);
              } else t += e.substr(r, 6);

              r += 6;
            } else if (s >= 224) {
              if (o - r >= 9) {
                var n = parseInt(e.substr(r + 4, 2), 16),
                    i = parseInt(e.substr(r + 7, 2), 16);
                t += String.fromCharCode((15 & s) << 12 | (63 & n) << 6 | 63 & i);
              } else t += e.substr(r, 9);

              r += 9;
            } else t += e.substr(r, 3), r += 3;
          }

          return t;
        }

        function C(e, t) {
          function r(e) {
            var r = j(e);
            return r.match(t.UNRESERVED) ? r : e;
          }

          return e.scheme && (e.scheme = String(e.scheme).replace(t.PCT_ENCODED, r).toLowerCase().replace(t.NOT_SCHEME, "")), void 0 !== e.userinfo && (e.userinfo = String(e.userinfo).replace(t.PCT_ENCODED, r).replace(t.NOT_USERINFO, k).replace(t.PCT_ENCODED, s)), void 0 !== e.host && (e.host = String(e.host).replace(t.PCT_ENCODED, r).toLowerCase().replace(t.NOT_HOST, k).replace(t.PCT_ENCODED, s)), void 0 !== e.path && (e.path = String(e.path).replace(t.PCT_ENCODED, r).replace(e.scheme ? t.NOT_PATH : t.NOT_PATH_NOSCHEME, k).replace(t.PCT_ENCODED, s)), void 0 !== e.query && (e.query = String(e.query).replace(t.PCT_ENCODED, r).replace(t.NOT_QUERY, k).replace(t.PCT_ENCODED, s)), void 0 !== e.fragment && (e.fragment = String(e.fragment).replace(t.PCT_ENCODED, r).replace(t.NOT_FRAGMENT, k).replace(t.PCT_ENCODED, s)), e;
        }

        function O(e) {
          return e.replace(/^0*(.*)/, "$1") || "0";
        }

        function x(e, t) {
          var r = e.match(t.IPV4ADDRESS) || [],
              o = c(r, 2)[1];
          return o ? o.split(".").map(O).join(".") : e;
        }

        function T(e, t) {
          var r = e.match(t.IPV6ADDRESS) || [],
              o = c(r, 3),
              s = o[1],
              a = o[2];

          if (s) {
            for (var n = s.toLowerCase().split("::").reverse(), i = c(n, 2), l = i[0], d = i[1], u = d ? d.split(":").map(O) : [], f = l.split(":").map(O), p = t.IPV4ADDRESS.test(f[f.length - 1]), m = p ? 7 : 8, h = f.length - m, y = Array(m), v = 0; v < m; ++v) {
              y[v] = u[v] || f[h + v] || "";
            }

            p && (y[m - 1] = x(y[m - 1], t));
            var g = y.reduce(function (e, t, r) {
              if (!t || "0" === t) {
                var o = e[e.length - 1];
                o && o.index + o.length === r ? o.length++ : e.push({
                  index: r,
                  length: 1
                });
              }

              return e;
            }, []).sort(function (e, t) {
              return t.length - e.length;
            })[0],
                $ = void 0;

            if (g && g.length > 1) {
              var _ = y.slice(0, g.index),
                  w = y.slice(g.index + g.length);

              $ = _.join(":") + "::" + w.join(":");
            } else $ = y.join(":");

            return a && ($ += "%" + a), $;
          }

          return e;
        }

        var I = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,
            R = void 0 === "".match(/(){0}/)[1];

        function D(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              r = {},
              o = !1 !== t.iri ? i : n;
          "suffix" === t.reference && (e = (t.scheme ? t.scheme + ":" : "") + "//" + e);
          var s = e.match(I);

          if (s) {
            R ? (r.scheme = s[1], r.userinfo = s[3], r.host = s[4], r.port = parseInt(s[5], 10), r.path = s[6] || "", r.query = s[7], r.fragment = s[8], isNaN(r.port) && (r.port = s[5])) : (r.scheme = s[1] || void 0, r.userinfo = -1 !== e.indexOf("@") ? s[3] : void 0, r.host = -1 !== e.indexOf("//") ? s[4] : void 0, r.port = parseInt(s[5], 10), r.path = s[6] || "", r.query = -1 !== e.indexOf("?") ? s[7] : void 0, r.fragment = -1 !== e.indexOf("#") ? s[8] : void 0, isNaN(r.port) && (r.port = e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? s[4] : void 0)), r.host && (r.host = T(x(r.host, o), o)), r.reference = void 0 !== r.scheme || void 0 !== r.userinfo || void 0 !== r.host || void 0 !== r.port || r.path || void 0 !== r.query ? void 0 === r.scheme ? "relative" : void 0 === r.fragment ? "absolute" : "uri" : "same-document", t.reference && "suffix" !== t.reference && t.reference !== r.reference && (r.error = r.error || "URI is not a " + t.reference + " reference.");
            var a = N[(t.scheme || r.scheme || "").toLowerCase()];
            if (t.unicodeSupport || a && a.unicodeSupport) C(r, o);else {
              if (r.host && (t.domainHost || a && a.domainHost)) try {
                r.host = P(r.host.replace(o.PCT_ENCODED, j).toLowerCase());
              } catch (e) {
                r.error = r.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
              }
              C(r, n);
            }
            a && a.parse && a.parse(r, t);
          } else r.error = r.error || "URI can not be parsed.";

          return r;
        }

        function A(e, t) {
          var r = !1 !== t.iri ? i : n,
              o = [];
          return void 0 !== e.userinfo && (o.push(e.userinfo), o.push("@")), void 0 !== e.host && o.push(T(x(String(e.host), r), r).replace(r.IPV6ADDRESS, function (e, t, r) {
            return "[" + t + (r ? "%25" + r : "") + "]";
          })), "number" != typeof e.port && "string" != typeof e.port || (o.push(":"), o.push(String(e.port))), o.length ? o.join("") : void 0;
        }

        var M = /^\.\.?\//,
            V = /^\/\.(\/|$)/,
            F = /^\/\.\.(\/|$)/,
            q = /^\/?(?:.|\n)*?(?=\/|$)/;

        function U(e) {
          for (var t = []; e.length;) {
            if (e.match(M)) e = e.replace(M, "");else if (e.match(V)) e = e.replace(V, "/");else if (e.match(F)) e = e.replace(F, "/"), t.pop();else if ("." === e || ".." === e) e = "";else {
              var r = e.match(q);
              if (!r) throw new Error("Unexpected dot segment condition");
              var o = r[0];
              e = e.slice(o.length), t.push(o);
            }
          }

          return t.join("");
        }

        function z(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              r = t.iri ? i : n,
              o = [],
              s = N[(t.scheme || e.scheme || "").toLowerCase()];
          if (s && s.serialize && s.serialize(e, t), e.host) if (r.IPV6ADDRESS.test(e.host)) ;else if (t.domainHost || s && s.domainHost) try {
            e.host = t.iri ? S(e.host) : P(e.host.replace(r.PCT_ENCODED, j).toLowerCase());
          } catch (r) {
            e.error = e.error || "Host's domain name can not be converted to " + (t.iri ? "Unicode" : "ASCII") + " via punycode: " + r;
          }
          C(e, r), "suffix" !== t.reference && e.scheme && (o.push(e.scheme), o.push(":"));
          var a = A(e, t);

          if (void 0 !== a && ("suffix" !== t.reference && o.push("//"), o.push(a), e.path && "/" !== e.path.charAt(0) && o.push("/")), void 0 !== e.path) {
            var c = e.path;
            t.absolutePath || s && s.absolutePath || (c = U(c)), void 0 === a && (c = c.replace(/^\/\//, "/%2F")), o.push(c);
          }

          return void 0 !== e.query && (o.push("?"), o.push(e.query)), void 0 !== e.fragment && (o.push("#"), o.push(e.fragment)), o.join("");
        }

        function K(e, t) {
          var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
              o = arguments[3],
              s = {};
          return o || (e = D(z(e, r), r), t = D(z(t, r), r)), !(r = r || {}).tolerant && t.scheme ? (s.scheme = t.scheme, s.userinfo = t.userinfo, s.host = t.host, s.port = t.port, s.path = U(t.path || ""), s.query = t.query) : (void 0 !== t.userinfo || void 0 !== t.host || void 0 !== t.port ? (s.userinfo = t.userinfo, s.host = t.host, s.port = t.port, s.path = U(t.path || ""), s.query = t.query) : (t.path ? ("/" === t.path.charAt(0) ? s.path = U(t.path) : (s.path = void 0 === e.userinfo && void 0 === e.host && void 0 === e.port || e.path ? e.path ? e.path.slice(0, e.path.lastIndexOf("/") + 1) + t.path : t.path : "/" + t.path, s.path = U(s.path)), s.query = t.query) : (s.path = e.path, s.query = void 0 !== t.query ? t.query : e.query), s.userinfo = e.userinfo, s.host = e.host, s.port = e.port), s.scheme = e.scheme), s.fragment = t.fragment, s;
        }

        function L(e, t) {
          return e && e.toString().replace(t && t.iri ? i.PCT_ENCODED : n.PCT_ENCODED, j);
        }

        var H = {
          scheme: "http",
          domainHost: !0,
          parse: function (e, t) {
            return e.host || (e.error = e.error || "HTTP URIs must have a host."), e;
          },
          serialize: function (e, t) {
            var r = "https" === String(e.scheme).toLowerCase();
            return e.port !== (r ? 443 : 80) && "" !== e.port || (e.port = void 0), e.path || (e.path = "/"), e;
          }
        },
            G = {
          scheme: "https",
          domainHost: H.domainHost,
          parse: H.parse,
          serialize: H.serialize
        };

        function J(e) {
          return "boolean" == typeof e.secure ? e.secure : "wss" === String(e.scheme).toLowerCase();
        }

        var B = {
          scheme: "ws",
          domainHost: !0,
          parse: function (e, t) {
            var r = e;
            return r.secure = J(r), r.resourceName = (r.path || "/") + (r.query ? "?" + r.query : ""), r.path = void 0, r.query = void 0, r;
          },
          serialize: function (e, t) {
            if (e.port !== (J(e) ? 443 : 80) && "" !== e.port || (e.port = void 0), "boolean" == typeof e.secure && (e.scheme = e.secure ? "wss" : "ws", e.secure = void 0), e.resourceName) {
              var r = e.resourceName.split("?"),
                  o = c(r, 2),
                  s = o[0],
                  a = o[1];
              e.path = s && "/" !== s ? s : void 0, e.query = a, e.resourceName = void 0;
            }

            return e.fragment = void 0, e;
          }
        },
            W = {
          scheme: "wss",
          domainHost: B.domainHost,
          parse: B.parse,
          serialize: B.serialize
        },
            Q = {},
            Z = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",
            Y = "[0-9A-Fa-f]",
            X = r(r("%[EFef][0-9A-Fa-f]%" + Y + Y + "%" + Y + Y) + "|" + r("%[89A-Fa-f][0-9A-Fa-f]%" + Y + Y) + "|" + r("%" + Y + Y)),
            ee = t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]", '[\\"\\\\]'),
            te = new RegExp(Z, "g"),
            re = new RegExp(X, "g"),
            oe = new RegExp(t("[^]", "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]", "[\\.]", '[\\"]', ee), "g"),
            se = new RegExp(t("[^]", Z, "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"), "g"),
            ae = se;

        function ne(e) {
          var t = j(e);
          return t.match(te) ? t : e;
        }

        var ie = {
          scheme: "mailto",
          parse: function (e, t) {
            var r = e,
                o = r.to = r.path ? r.path.split(",") : [];

            if (r.path = void 0, r.query) {
              for (var s = !1, a = {}, n = r.query.split("&"), i = 0, c = n.length; i < c; ++i) {
                var l = n[i].split("=");

                switch (l[0]) {
                  case "to":
                    for (var d = l[1].split(","), u = 0, f = d.length; u < f; ++u) {
                      o.push(d[u]);
                    }

                    break;

                  case "subject":
                    r.subject = L(l[1], t);
                    break;

                  case "body":
                    r.body = L(l[1], t);
                    break;

                  default:
                    s = !0, a[L(l[0], t)] = L(l[1], t);
                }
              }

              s && (r.headers = a);
            }

            r.query = void 0;

            for (var p = 0, m = o.length; p < m; ++p) {
              var h = o[p].split("@");
              if (h[0] = L(h[0]), t.unicodeSupport) h[1] = L(h[1], t).toLowerCase();else try {
                h[1] = P(L(h[1], t).toLowerCase());
              } catch (e) {
                r.error = r.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
              }
              o[p] = h.join("@");
            }

            return r;
          },
          serialize: function (e, t) {
            var r,
                o = e,
                a = null != (r = e.to) ? r instanceof Array ? r : "number" != typeof r.length || r.split || r.setInterval || r.call ? [r] : Array.prototype.slice.call(r) : [];

            if (a) {
              for (var n = 0, i = a.length; n < i; ++n) {
                var c = String(a[n]),
                    l = c.lastIndexOf("@"),
                    d = c.slice(0, l).replace(re, ne).replace(re, s).replace(oe, k),
                    u = c.slice(l + 1);

                try {
                  u = t.iri ? S(u) : P(L(u, t).toLowerCase());
                } catch (e) {
                  o.error = o.error || "Email address's domain name can not be converted to " + (t.iri ? "Unicode" : "ASCII") + " via punycode: " + e;
                }

                a[n] = d + "@" + u;
              }

              o.path = a.join(",");
            }

            var f = e.headers = e.headers || {};
            e.subject && (f.subject = e.subject), e.body && (f.body = e.body);
            var p = [];

            for (var m in f) {
              f[m] !== Q[m] && p.push(m.replace(re, ne).replace(re, s).replace(se, k) + "=" + f[m].replace(re, ne).replace(re, s).replace(ae, k));
            }

            return p.length && (o.query = p.join("&")), o;
          }
        },
            ce = /^([^\:]+)\:(.*)/,
            le = {
          scheme: "urn",
          parse: function (e, t) {
            var r = e.path && e.path.match(ce),
                o = e;

            if (r) {
              var s = t.scheme || o.scheme || "urn",
                  a = r[1].toLowerCase(),
                  n = r[2],
                  i = N[s + ":" + (t.nid || a)];
              o.nid = a, o.nss = n, o.path = void 0, i && (o = i.parse(o, t));
            } else o.error = o.error || "URN can not be parsed.";

            return o;
          },
          serialize: function (e, t) {
            var r = e.nid,
                o = N[(t.scheme || e.scheme || "urn") + ":" + (t.nid || r)];
            o && (e = o.serialize(e, t));
            var s = e;
            return s.path = (r || t.nid) + ":" + e.nss, s;
          }
        },
            de = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,
            ue = {
          scheme: "urn:uuid",
          parse: function (e, t) {
            var r = e;
            return r.uuid = r.nss, r.nss = void 0, t.tolerant || r.uuid && r.uuid.match(de) || (r.error = r.error || "UUID is not valid."), r;
          },
          serialize: function (e, t) {
            var r = e;
            return r.nss = (e.uuid || "").toLowerCase(), r;
          }
        };
        N[H.scheme] = H, N[G.scheme] = G, N[B.scheme] = B, N[W.scheme] = W, N[ie.scheme] = ie, N[le.scheme] = le, N[ue.scheme] = ue, e.SCHEMES = N, e.pctEncChar = k, e.pctDecChars = j, e.parse = D, e.removeDotSegments = U, e.serialize = z, e.resolveComponents = K, e.resolve = function (e, t, r) {
          var o = function (e, t) {
            var r = e;
            if (t) for (var o in t) {
              r[o] = t[o];
            }
            return r;
          }({
            scheme: "null"
          }, r);

          return z(K(D(e, o), D(t, o), o, !0), o);
        }, e.normalize = function (e, t) {
          return "string" == typeof e ? e = z(D(e, t), t) : "object" === o(e) && (e = D(z(e, t), t)), e;
        }, e.equal = function (e, t, r) {
          return "string" == typeof e ? e = z(D(e, r), r) : "object" === o(e) && (e = z(e, r)), "string" == typeof t ? t = z(D(t, r), r) : "object" === o(t) && (t = z(t, r)), e === t;
        }, e.escapeComponent = function (e, t) {
          return e && e.toString().replace(t && t.iri ? i.ESCAPE : n.ESCAPE, k);
        }, e.unescapeComponent = L, Object.defineProperty(e, "__esModule", {
          value: !0
        });
      });
    }, {}],
    ajv: [function (e, t, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.CodeGen = r.Name = r.nil = r.stringify = r.str = r._ = r.KeywordCxt = void 0;
      var o = e("./core"),
          s = e("./vocabularies/draft7"),
          a = e("./vocabularies/discriminator"),
          n = e("./refs/json-schema-draft-07.json"),
          i = ["/properties"],
          c = "http://json-schema.org/draft-07/schema";

      var l = function (_o$default) {
        _inherits(l, _o$default);

        var _super29 = _createSuper(l);

        function l() {
          _classCallCheck(this, l);

          return _super29.apply(this, arguments);
        }

        _createClass(l, [{
          key: "_addVocabularies",
          value: function _addVocabularies() {
            var _this29 = this;

            _get(_getPrototypeOf(l.prototype), "_addVocabularies", this).call(this), s["default"].forEach(function (e) {
              return _this29.addVocabulary(e);
            }), this.opts.discriminator && this.addKeyword(a["default"]);
          }
        }, {
          key: "_addDefaultMetaSchema",
          value: function _addDefaultMetaSchema() {
            if (_get(_getPrototypeOf(l.prototype), "_addDefaultMetaSchema", this).call(this), !this.opts.meta) return;
            var e = this.opts.$data ? this.$dataMetaSchema(n, i) : n;
            this.addMetaSchema(e, c, !1), this.refs["http://json-schema.org/schema"] = c;
          }
        }, {
          key: "defaultMeta",
          value: function defaultMeta() {
            return this.opts.defaultMeta = _get(_getPrototypeOf(l.prototype), "defaultMeta", this).call(this) || (this.getSchema(c) ? c : void 0);
          }
        }]);

        return l;
      }(o["default"]);

      t.exports = r = l, Object.defineProperty(r, "__esModule", {
        value: !0
      }), r["default"] = l;
      var d = e("./compile/validate");
      Object.defineProperty(r, "KeywordCxt", {
        enumerable: !0,
        get: function () {
          return d.KeywordCxt;
        }
      });
      var u = e("./compile/codegen");
      Object.defineProperty(r, "_", {
        enumerable: !0,
        get: function () {
          return u._;
        }
      }), Object.defineProperty(r, "str", {
        enumerable: !0,
        get: function () {
          return u.str;
        }
      }), Object.defineProperty(r, "stringify", {
        enumerable: !0,
        get: function () {
          return u.stringify;
        }
      }), Object.defineProperty(r, "nil", {
        enumerable: !0,
        get: function () {
          return u.nil;
        }
      }), Object.defineProperty(r, "Name", {
        enumerable: !0,
        get: function () {
          return u.Name;
        }
      }), Object.defineProperty(r, "CodeGen", {
        enumerable: !0,
        get: function () {
          return u.CodeGen;
        }
      });
    }, {
      "./compile/codegen": 2,
      "./compile/validate": 15,
      "./core": 18,
      "./refs/json-schema-draft-07.json": 20,
      "./vocabularies/discriminator": 46,
      "./vocabularies/draft7": 48
    }]
  }, {}, [])("ajv"));

  var fileInputView = __AMD("components/adapt-odi-fileInput/js/fileInputView", function (_QuestionView) {
    _inherits(fileInputView, _QuestionView);

    var _super = _createSuper(fileInputView);

    function fileInputView() {
      _classCallCheck(this, fileInputView);

      return _super.apply(this, arguments);
    }

    _createClass(fileInputView, [{
      key: "events",
      value: function events() {
        return {
          'focus .js-item-input': 'onItemFocus',
          'blur .js-item-input': 'onItemBlur',
          'change .js-item-input': 'onInputChanged',
          'keyup .js-item-input': 'onKeyPress'
        };
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit() {
        this.resetQuestion();
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.model.resetActiveItems();
        this.model.resetItems();
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', true);
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', false);
      }
    }, {
      key: "getFile",
      value: function getFile() {
        var $itemInput = this.$('.js-item-input').eq(0);

        function readFile(file) {
          return new Promise(function (resolve, reject) {
            var reader = new FileReader();

            reader.onload = function (res) {
              resolve(res.target.result);
            };

            reader.onerror = function (err) {
              return reject(err);
            };

            return reader.readAsText(file);
          });
        }

        function onSubmit() {
          return _onSubmit.apply(this, arguments);
        }

        function _onSubmit() {
          _onSubmit = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
            var file, contents, parse, fileObj;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    file = $itemInput[0].files[0];
                    _context.next = 3;
                    return readFile(file);

                  case 3:
                    contents = _context.sent;
                    _context.next = 6;
                    return Papa.parse(contents, {
                      header: true
                    });

                  case 6:
                    parse = _context.sent;
                    _context.next = 9;
                    return {
                      parse: parse,
                      contents: contents
                    };

                  case 9:
                    fileObj = _context.sent;
                    _context.next = 12;
                    return fileObj;

                  case 12:
                    return _context.abrupt("return", _context.sent);

                  case 13:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return _onSubmit.apply(this, arguments);
        }

        return onSubmit();
      }
    }, {
      key: "createTable",
      value: function () {
        var _createTable = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var result, tableData, i, record, recordVals, numCols, j, key, value, col, tableHeader;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.getFile();

                case 2:
                  result = _context2.sent;
                  tableData = [];

                  for (i = 0; i < result.parse.data.length; i++) {
                    record = result.parse.data[i];
                    recordVals = [];
                    numCols = Object.keys(record).length;

                    for (j = 0; j < numCols; j++) {
                      key = Object.keys(record)[j];
                      value = record[key];
                      recordVals.push(value);
                    }

                    tableData.push(recordVals);
                  }

                  window.alert = function () {};

                  col = [];
                  tableHeader = [];

                  for (i = 0; i < result.parse.data.length; i++) {
                    for (key in result.parse.data[i]) {
                      if (col.indexOf(key) === -1) {
                        col.push(key);
                      }
                    }
                  }

                  for (i in col) {
                    tableHeader.push({
                      title: col[i]
                    });
                  }

                  $('#example').DataTable({
                    "dom": '<"top"ip>rt<"clear">',
                    data: tableData,
                    columns: tableHeader,
                    scrollX: true
                  });

                case 11:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function createTable() {
          return _createTable.apply(this, arguments);
        }

        return createTable;
      }()
    }, {
      key: "checkCsvStructure",
      value: function () {
        var _checkCsvStructure = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var csvResults, result, lineBreaks, undeclaredHeader, raggedRows, blankRows, whiteSpace, file, file_exists, file_lines, checkUTF8, singleCommaSeparated, inconsistentValues, emptyColumnName, duplicateColumnName;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  csvResults = [];
                  _context3.next = 3;
                  return this.getFile();

                case 3:
                  result = _context3.sent;

                  lineBreaks = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_line_breaks = [];

                    for (var i = 0; i < csv_lines.length - 1; i++) {
                      csv_line_breaks.push(csv_lines[i].split('\r').length - 1);
                    }

                    var csv_line_breaks_unique = csv_line_breaks.filter(function (item, pos) {
                      return csv_line_breaks.indexOf(item) == pos;
                    });

                    if (csv_line_breaks_unique.length > 1) {
                      csvResults.push('Line breaks are not the same throughout the csv file.');
                    }
                  };

                  undeclaredHeader = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_headers = csv_lines[0].split(',');

                    if (csv_headers.length == 1) {
                      csvResults.push('The csv headers have not been declared.', "the headers are: ".concat(headers));
                    }
                  };

                  raggedRows = function (csv) {
                    var csv_lines = csv.split('\n');
                    csv_lines[0].split(',');
                    var csv_rows = [];

                    for (var i = 1; i < csv_lines.length - 1; i++) {
                      csv_rows.push(csv_lines[i].split(','));
                    }

                    var csv_rows_columns = [];

                    for (var _i = 0; _i < csv_rows.length - 1; _i++) {
                      csv_rows_columns.push(csv_rows[_i].length);
                    }

                    var csv_rows_columns_unique = csv_rows_columns.filter(function (item, pos) {
                      return csv_rows_columns.indexOf(item) == pos;
                    });

                    if (csv_rows_columns_unique.length > 1) {
                      csvResults.push("Every row in the file doesn't have the same number of columns.", "here are the column counts we have found: ".concat(_toConsumableArray(csv_rows_columns_unique)));
                    }
                  };

                  blankRows = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_rows = [];

                    for (var i = 1; i < csv_lines.length - 1; i++) {
                      csv_rows.push(csv_lines[i].split(','));
                    }

                    var csv_rows_blank = [];

                    for (var _i2 = 0; _i2 < csv_rows.length - 1; _i2++) {
                      if (csv_rows[_i2].length == 1 && csv_rows[_i2][0] == '') {
                        csv_rows_blank.push(_i2);
                      }
                    }

                    if (csv_rows_blank.length > 0) {
                      csvResults.push('There are blank rows in the csv.', "see here: ".concat(csv_rows_blank, " / ").concat(csv_rows.length - 1));
                    }
                  };

                  whiteSpace = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_rows = [];

                    for (var i = 1; i < csv_lines.length - 1; i++) {
                      csv_rows.push(csv_lines[i].split(','));
                    }

                    var csv_rows_whitespace = [];

                    for (var _i3 = 0; _i3 < csv_rows.length - 1; _i3++) {
                      for (var j = 0; j < csv_rows[_i3].length; j++) {
                        if (csv_rows[_i3][j].split('"').length % 2 != 0) {
                          if (csv_rows[_i3][j].split('"').length > 2) {
                            if (csv_rows[_i3][j].split('"')[1].split(' ').length > 1) {
                              csv_rows_whitespace.push(_i3);
                            }
                          }
                        }
                      }
                    }

                    if (csv_rows_whitespace.length > 0) {
                      csvResults.push('There is whitespace between commas and double quotes around fields in csv.', "whitespace: ".concat(csv_rows_whitespace));
                    }
                  };

                  file = '';
                  file_exists = false;
                  file_lines = file.split('\n');

                  if (file_lines.length > 0) {
                    file_exists = true;
                  }

                  if (!file_exists) {
                    csvResults.push('404 error');
                  }

                  checkUTF8 = function (csv) {
                    var utf8Text = csv;

                    try {
                      utf8Text = decodeURIComponent(escape(csv));
                    } catch (e) {}

                    return utf8Text;
                  };

                  singleCommaSeparated = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_rows = [];

                    for (var i = 1; i < csv_lines.length - 1; i++) {
                      csv_rows.push(csv_lines[i].split(','));
                    }

                    var csv_rows_columns = [];

                    for (var _i4 = 0; _i4 < csv_rows.length - 1; _i4++) {
                      csv_rows_columns.push(csv_rows[_i4].length);
                    }

                    var csv_rows_columns_unique = csv_rows_columns.filter(function (item, pos) {
                      return csv_rows_columns.indexOf(item) == pos;
                    });

                    if (csv_rows_columns_unique.length == 1 && csv_rows_columns_unique[0] == 1) {
                      csvResults.push('The CSV file only contains a single comma-separated column.');
                    }
                  };

                  inconsistentValues = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_rows = [];

                    for (var i = 1; i < csv_lines.length - 1; i++) {
                      csv_rows.push(csv_lines[i].split(','));
                    }

                    var csv_rows_columns = [];

                    for (var _i5 = 0; _i5 < csv_rows.length - 1; _i5++) {
                      csv_rows_columns.push(csv_rows[_i5].length);
                    }

                    var csv_rows_columns_unique = csv_rows_columns.filter(function (item, pos) {
                      return csv_rows_columns.indexOf(item) == pos;
                    });
                    var csv_rows_columns_unique_max = Math.max.apply(Math, csv_rows_columns_unique);
                    var csv_rows_columns_unique_max_index = csv_rows_columns_unique.indexOf(csv_rows_columns_unique_max);
                    var csv_rows_columns_unique_max_columns = csv_rows_columns_unique[csv_rows_columns_unique_max_index];
                    var csv_rows_columns_unique_max_columns_values = [];

                    for (var _i6 = 0; _i6 < csv_rows.length - 1; _i6++) {
                      csv_rows_columns_unique_max_columns_values.push(csv_rows[_i6][csv_rows_columns_unique_max_columns]);
                    }

                    var csv_rows_columns_unique_max_columns_values_numeric = [];

                    for (var _i7 = 0; _i7 < csv_rows_columns_unique_max_columns_values.length; _i7++) {
                      if (!isNaN(csv_rows_columns_unique_max_columns_values[_i7])) {
                        csv_rows_columns_unique_max_columns_values_numeric.push(csv_rows_columns_unique_max_columns_values[_i7]);
                      }
                    }

                    if (csv_rows_columns_unique_max_columns_values_numeric.length / csv_rows_columns_unique_max_columns_values.length < 0.9) {
                      csvResults.push("There are inconsistent values in the csv file.");
                    }
                  };

                  emptyColumnName = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_headers = csv_lines[0].split(',');
                    var csv_headers_blank = [];

                    for (var i = 0; i < csv_headers.length; i++) {
                      if (csv_headers[i] == '') {
                        csv_headers_blank.push(i);
                      }
                    }

                    if (csv_headers_blank.length > 0) {
                      csvResults.push("There are columns that don't have a name in the csv file.");
                    }
                  };

                  duplicateColumnName = function (csv) {
                    var csv_lines = csv.split('\n');
                    var csv_headers = csv_lines[0].split(',');
                    var csv_headers_unique = csv_headers.filter(function (item, pos) {
                      return csv_headers.indexOf(item) == pos;
                    });

                    if (csv_headers_unique.length != csv_headers.length) {
                      csvResults.push('Not all the columns are unique.', "see here: ".concat(csv_headers_unique));
                    }
                  };

                  lineBreaks(result.contents);
                  undeclaredHeader(result.contents);
                  raggedRows(result.contents);
                  singleCommaSeparated(result.contents);
                  blankRows(result.contents);
                  whiteSpace(result.contents);
                  checkUTF8(result.contents);
                  inconsistentValues(result.contents);
                  emptyColumnName(result.contents);
                  duplicateColumnName(result.contents);
                  return _context3.abrupt("return", csvResults);

                case 31:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function checkCsvStructure() {
          return _checkCsvStructure.apply(this, arguments);
        }

        return checkCsvStructure;
      }()
    }, {
      key: "validateAjv",
      value: function () {
        var _validateAjv = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var result, convertIntObj, r, arrayResult, ajv, results, i, valid, userAjvResults, _console, _console2, getErrors, userResult;

          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  convertIntObj = function _convertIntObj(input) {
                    var res = {};

                    for (var key in input) {
                      res[key] = {};

                      for (var prop in input[key]) {
                        var parsed = parseInt(input[key][prop], 10);
                        res[key][prop] = isNaN(parsed) ? input[key][prop] : parsed;
                      }
                    }

                    return res;
                  };

                  _context4.next = 3;
                  return this.getFile();

                case 3:
                  result = _context4.sent;
                  console.log(result);
                  r = convertIntObj(result.parse.data);
                  arrayResult = Object.values(r);
                  console.log(r);
                  ajv = new Ajv({
                    strict: false
                  });
                  results = [];

                  for (i = 0; i < arrayResult.length; i++) {
                    valid = ajv.validate.apply(ajv, _toConsumableArray(this.model.get('_schema')).concat([arrayResult[i]]));
                    console.log(valid);

                    if (!valid) {
                      results.push(ajv.errors);
                    }
                  }

                  userAjvResults = [];

                  if (results.length == 0) {
                    userAjvResults.push('<a href="https://ajv.js.org/">Ajv Validator</a> found no errors');
                  } else {
                    (_console = console).log.apply(_console, results);

                    getErrors = results.map(function (r) {
                      return r[0]['instancePath'].slice(1).toLowerCase() + " " + r[0]['message'];
                    });

                    (_console2 = console).log.apply(_console2, _toConsumableArray(getErrors));
                  }

                  userResult = userAjvResults;
                  return _context4.abrupt("return", userResult);

                case 15:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function validateAjv() {
          return _validateAjv.apply(this, arguments);
        }

        return validateAjv;
      }()
    }, {
      key: "feedback",
      value: function () {
        var _feedback = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var ajv, csv, combinedArr, combinedArrString, feedback;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.validateAjv();

                case 2:
                  ajv = _context5.sent;
                  _context5.next = 5;
                  return this.checkCsvStructure();

                case 5:
                  csv = _context5.sent;
                  combinedArr = ajv.concat(csv);
                  combinedArrString = combinedArr.join(' <br />');
                  console.log(combinedArrString);
                  this.model.get('_items')[0].feedback = combinedArr;
                  this.model.get('_items')[0]["_score"] = combinedArr.length;
                  this.model.get('_feedback').correct = combinedArrString;
                  this.model.get('_feedback')._partlyCorrect["final"] = combinedArr;
                  _context5.next = 15;
                  return $('#feedback').html("<ul> ".concat(combinedArr.map(function (result) {
                    return "<li>".concat(result, "</li>");
                  }).join(''), " </ul>"));

                case 15:
                  feedback = _context5.sent;
                  return _context5.abrupt("return", feedback);

                case 17:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function feedback() {
          return _feedback.apply(this, arguments);
        }

        return feedback;
      }()
    }, {
      key: "onInputChanged",
      value: function () {
        var _onInputChanged = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(e) {
          var index, itemModel, shouldSelect;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  index = $(e.currentTarget).data('adapt-index');
                  itemModel = this.model.getItem(index);
                  shouldSelect = !itemModel.get('_isActive');
                  shouldSelect = true;
                  this.model.resetActiveItems();
                  itemModel.toggleActive(shouldSelect);
                  this.createTable();
                  this.feedback();

                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function onInputChanged(_x) {
          return _onInputChanged.apply(this, arguments);
        }

        return onInputChanged;
      }()
    }]);

    return fileInputView;
  }(QuestionView$1));

  __AMD("components/adapt-odi-fileInput/js/adapt-odi-fileInput", Adapt.register('fileinput', {
    view: fileInputView,
    model: ItemsQuestionModel$1.extend({})
  }));

  var StackList = ComponentView$1.extend({
    TRANSITION_TIME: 250,
    events: {
      "click .stacklist__next": "nextItem"
    },
    preRender: function () {
      this.model.set("_globals", Adapt.course.get("_globals"));
      this.model.set("_stage", -1);
      this.setupButton();
    },
    postRender: function () {
      this.$items = this.$(".stacklist__item");
      this.$button = this.$('.stacklist__button');

      if (!this.model.get("_isComplete") || this.model.get("_isResetOnRevisit")) {
        this.setupListItems();
        this.setupItemOffsets();
        this.listenTo(Adapt, 'device:resize', this.setupItemOffsets);
      }

      this.setReadyStatus();
    },
    setupButton: function () {
      var _button = this.model.get("_button") || {};

      var btnAriaLabel = this.model.get("_globals")._components._stacklist.ariaButtonLabel || this.model.get("_globals")._accessibility._ariaLabels.next;

      this.model.set({
        buttonAriaLabel: btnAriaLabel
      });
      if (!_button.startText) _button.startText = "Click here to begin";
      if (!_button.continueText) _button.continueText = "Next";
      if (!_button.ariaLabel) _button.ariaLabel = btnAriaLabel;
      this.model.set("_button", _button);
    },
    setupListItems: function () {
      this.$items.addClass("visibility-hidden");
      this.$button.show();
    },
    setupItemOffsets: function () {
      var wWin = $(window).width();
      var offsetLeft = -this.$el.outerWidth();
      var offsetRight = wWin + 10;
      var stage = this.model.get('_stage');
      var buttonOffset = 0;
      this.$items.each(function (i) {
        var $el = $(this);

        if (i <= stage) {
          buttonOffset += $el.outerHeight(true);
          return;
        }

        var isLeft = i % 2 === 0;
        var offset = $el.offset();
        offset.left = isLeft ? offsetLeft : offsetRight;
        $el.offset(offset);
      });
      this.$button.css({
        top: buttonOffset
      });
    },
    nextItem: function () {
      var stage = this.model.get("_stage") + 1;
      this.setStage(stage);
    },
    setStage: function (stage) {
      this.model.set("_stage", stage);
      var items = this.model.get("_items");
      var isComplete = this.model.get("_items").length - 1 === stage;
      var $item = this.$(".stacklist__item").eq(stage);
      $item.removeClass("visibility-hidden");
      var h = $item.outerHeight(true);
      $item.velocity({
        left: 0
      }, {
        delay: this.TRANSITION_TIME,
        duration: this.TRANSITION_TIME,
        complete: function () {
          $item.addClass("show").a11y_focus();
        }
      });

      if (isComplete) {
        this.onCompletion();
        this.updateButton('', h);
      } else {
        var continueText = items[stage].next || this.model.get("_button").continueText;

        var btnAriaLabel = this.model.get("_globals")._components._stacklist.ariaButtonLabel || this.model.get("_globals")._accessibility._ariaLabels.next;

        var ariaLabel = continueText + ', ' + btnAriaLabel;
        this.updateButton(continueText, h, ariaLabel);
      }
    },
    updateButton: function (text, offset, ariaLabel) {
      this.$(".stacklist__button").css({
        top: "+=" + offset
      });

      if (text === '') {
        return;
      }

      var $button = this.$(".stacklist__next");
      $button.blur();
      setTimeout(function () {
        $button.html(text);
        $button.attr('aria-label', ariaLabel);
      }, this.TRANSITION_TIME * 2);
    },
    onCompletion: function () {
      var $buttonDiv = this.$(".stacklist__button");
      var $button = this.$(".stacklist__next");
      $buttonDiv.css({
        opacity: 0
      });
      setTimeout(function () {
        $button.remove();
      }, this.TRANSITION_TIME);
      this.setCompletionStatus();
    }
  });
  var StackListView = __AMD("components/adapt-stacklist/js/StackListView", StackList);

  __AMD("components/adapt-stacklist/js/adapt-stacklist", Adapt.register("stacklist", {
    view: StackListView,
    model: ItemsComponentModel
  }));

  var AssessmentView = {
    postRender: function () {
      ArticleView$1.prototype.postRender.call(this);

      if (this.model.isAssessmentEnabled()) {
        var _config$_questions;

        this._setupEventListeners();

        var config = this.model.getConfig();

        if ((config === null || config === void 0 ? void 0 : (_config$_questions = config._questions) === null || _config$_questions === void 0 ? void 0 : _config$_questions._canShowMarking) === false) {
          this.$el.addClass('has-no-marking');
        }
      }

      this.$el.addClass('is-assessment');
    },
    _setupEventListeners: function () {
      this.listenTo(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset,
        remove: this._onRemove
      });
    },
    _removeEventListeners: function () {
      this.stopListening(Adapt, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset
      });
    },
    _onAssessmentComplete: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      Adapt.log.info('assessment complete', state, model);
    },
    _onAssessmentReset: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      Adapt.log.info('assessment reset', state, model);
    },
    _onRemove: function () {
      this._removeEventListeners();
    }
  };
  var AdaptAssessmentArticleView = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView", AssessmentView);

  var QuestionBank = function () {
    function QuestionBank(quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {
      _classCallCheck(this, QuestionBank);

      this._id = quizBankid;
      this._articleId = articleId;
      this._numQuestionBlocks = numQuestionBlocks;
      this._uniqueQuestions = uniqueQuestions;
      this.questionBlocks = [];
      this.unUsedQuestionBlocks = undefined;
      this.usedQuestionBlocks = [];
    }

    _createClass(QuestionBank, [{
      key: "getID",
      value: function getID() {
        return this._id;
      }
    }, {
      key: "addBlock",
      value: function addBlock(block) {
        this.questionBlocks.push(block);
      }
    }, {
      key: "getRandomQuestionBlocks",
      value: function getRandomQuestionBlocks() {
        this.checkResetUnunsedBlocks();
        var questionBlocks = [];
        var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);

        for (var i = 0; i < this._numQuestionBlocks; i++) {
          var question = this.getRandomQuestion();

          if (question !== undefined) {
            questionBlocks.push(question);
            continue;
          }

          if (usedQuestionBlocks.length === 0) break;
          var index = Math.floor(Math.random() * (usedQuestionBlocks.length - 1));
          question = usedQuestionBlocks.splice(index, 1)[0];
          questionBlocks.push(question);
        }

        return questionBlocks;
      }
    }, {
      key: "checkResetUnunsedBlocks",
      value: function checkResetUnunsedBlocks() {
        if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;
        this.unUsedQuestionBlocks = this.questionBlocks.slice(0);
      }
    }, {
      key: "getRandomQuestion",
      value: function getRandomQuestion() {
        if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {
          Adapt.log.warn('assessment:' + this._articleId + ' No more unique questions for _assessment._quizBankID ' + this._id);
          return undefined;
        }

        var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length - 1));
        var questionBlock = this.unUsedQuestionBlocks[index];
        this.usedQuestionBlocks.push(questionBlock);
        this.unUsedQuestionBlocks.splice(index, 1);
        return questionBlock;
      }
    }]);

    return QuestionBank;
  }();

  var QuestionBank$1 = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank", QuestionBank);

  var givenIdCount = 0;
  var assessmentConfigDefaults = {
    _isEnabled: true,
    _questions: {
      _resetType: 'soft',
      _canShowFeedback: false,
      _canShowMarking: false,
      _canShowModelAnswer: false
    },
    _suppressMarking: false,
    _isPercentageBased: true,
    _scoreToPass: 100,
    _correctToPass: 100,
    _includeInTotalScore: true,
    _assessmentWeight: 1,
    _isResetOnRevisit: true,
    _reloadPageOnReset: true,
    _attempts: 'infinite',
    _allowResetIfPassed: false
  };
  var AssessmentModel = {
    _getCurrentQuestionComponents: function () {
      return this.findDescendantModels('block').filter(function (block) {
        return block.get('_isAvailable');
      }).reduce(function (questions, block) {
        return questions.concat(block.findDescendantModels('question'));
      }, []);
    },
    _getAllQuestionComponents: function () {
      return this.findDescendantModels('question');
    },
    _postInitialize: function () {
      if (!this.isAssessmentEnabled()) return;
      var assessmentConfig = this.getConfig();
      Object.assign(this, {
        _originalChildModels: null,
        _questionBanks: null,
        _forceResetOnRevisit: false
      });
      var attemptsLeft;

      switch (assessmentConfig._attempts) {
        case 'infinite':
        case 0:
        case undefined:
        case -1:
        case null:
          attemptsLeft = 'infinite';
          break;

        default:
          attemptsLeft = assessmentConfig._attempts;
          break;
      }

      this.set({
        _assessmentCompleteInSession: false,
        _attemptInProgress: false,
        _isAssessmentComplete: false,
        _numberOfQuestionsAnswered: 0,
        _lastAttemptScoreAsPercent: 0,
        _attempts: attemptsLeft,
        _attemptsLeft: attemptsLeft,
        _attemptsSpent: 0
      });
      this.listenToOnce(Adapt, 'app:dataReady', this._onDataReady);
      this.listenTo(Adapt, 'remove', this._onRemove);
    },
    init: function () {
      this._originalChildModels = this.getChildren().models;
      this.setupCurrentQuestionComponents();

      this._setAssessmentOwnershipOnChildrenModels();

      this._updateQuestionsState();
    },
    setupCurrentQuestionComponents: function () {
      var assessmentQuestionsConfig = this.getConfig()._questions;

      this._getAllQuestionComponents().forEach(function (component) {
        component.set({
          _canShowFeedback: assessmentQuestionsConfig._canShowFeedback,
          _canShowMarking: assessmentQuestionsConfig._canShowMarking,
          _canShowModelAnswer: assessmentQuestionsConfig._canShowModelAnswer
        });
      });
    },
    _setAssessmentOwnershipOnChildrenModels: function () {
      var assessmentConfig = this.get('_assessment');
      var childConfig = {
        _isPartOfAssessment: true,
        _assessmentId: assessmentConfig._id
      };

      var _iterator = _createForOfIteratorHelper(this._originalChildModels),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var blockModel = _step.value;
          blockModel.set(childConfig);
          blockModel.setOnChildren(childConfig);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    checkIfResetOnRevisit: function () {},
    _onDataReady: function () {
      Adapt.assessment.register(this);
    },
    _setupAssessmentData: function (force, callback) {
      var assessmentConfig = this.getConfig();
      var state = this.getState();
      var hasAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
      var shouldResetOnRevisit = assessmentConfig._isResetOnRevisit && !this.get('_attemptInProgress');
      var shouldResetAssessment = shouldResetOnRevisit && !state.isPass && hasAttemptsLeft || force === true;
      var shouldResetQuestions = shouldResetOnRevisit && (state.allowResetIfPassed || !state.isPass) || force === true;

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt.trigger('assessments:preReset', this.getState(), this);
      }

      var quizModels;

      if (shouldResetAssessment) {
        this.set({
          _numberOfQuestionsAnswered: 0,
          _isAssessmentComplete: false,
          _assessmentCompleteInSession: false,
          _score: 0
        });
        this.getChildren().models = this._originalChildModels;

        if (assessmentConfig !== null && assessmentConfig !== void 0 && assessmentConfig._banks._isEnabled && (assessmentConfig === null || assessmentConfig === void 0 ? void 0 : assessmentConfig._banks._split.length) > 1) {
          quizModels = this._setupBankedAssessment();
        } else if (assessmentConfig !== null && assessmentConfig !== void 0 && assessmentConfig._randomisation._isEnabled) {
          quizModels = this._setupRandomisedAssessment();
        }
      }

      if (!quizModels) {
        quizModels = this.getChildren().models;
      } else if (quizModels.length === 0) {
        quizModels = this.getChildren().models;
        Adapt.log.warn('assessment: Not enough unique questions to create a fresh assessment, using last selection');
      }

      this.getChildren().models = quizModels;
      this.setupCurrentQuestionComponents();

      if (shouldResetAssessment || shouldResetQuestions) {
        this._resetQuestions();

        this.set('_attemptInProgress', true);
        Adapt.trigger('assessments:reset', this.getState(), this);
      }

      if (!state.isComplete) {
        this.set('_attemptInProgress', true);
      }

      this._overrideQuestionComponentSettings();

      this._setupQuestionListeners();

      this._checkNumberOfQuestionsAnswered();

      this._updateQuestionsState();

      Adapt.assessment.saveState();
      this.trigger('reset');

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt.trigger('assessments:postReset', this.getState(), this);
      }
    },
    _setupBankedAssessment: function () {
      var assessmentConfig = this.getConfig();

      this._setupBanks();

      var questionModels = [];

      this._questionBanks.forEach(function (questionBank) {
        var _questionModels;

        (_questionModels = questionModels).push.apply(_questionModels, _toConsumableArray(questionBank.getRandomQuestionBlocks()));
      });

      if (assessmentConfig._banks._randomisation) {
        questionModels = _.shuffle(questionModels);
      }

      return questionModels;
    },
    _setupBanks: function () {
      var assessmentConfig = this.getConfig();

      var banks = assessmentConfig._banks._split.split(',');

      var bankId;
      this._questionBanks = [];

      for (var i = 0, l = banks.length; i < l; i++) {
        var bank = banks[i];
        bankId = i + 1;
        var questionBank = new QuestionBank$1(bankId, this.get('_id'), bank, true);
        this._questionBanks[bankId] = questionBank;
      }

      var children = this.getChildren().models;

      var _iterator2 = _createForOfIteratorHelper(children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var blockModel = _step2.value;
          var blockAssessmentConfig = blockModel.get('_assessment');
          if (!blockAssessmentConfig) continue;
          bankId = blockAssessmentConfig._quizBankID;

          this._questionBanks[bankId].addBlock(blockModel);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    _setupRandomisedAssessment: function () {
      var assessmentConfig = this.getConfig();
      var randomisationModel = assessmentConfig._randomisation;
      var blockModels = this.getChildren().models;

      var questionModels = _.shuffle(blockModels);

      if (randomisationModel._blockCount > 0) {
        questionModels = questionModels.slice(0, randomisationModel._blockCount);
      }

      return questionModels;
    },
    _overrideQuestionComponentSettings: function () {
      var newSettings = this._getMarkingSettings();

      var questionConfig = this.getConfig()._questions;

      if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowFeedback')) {
        newSettings._canShowFeedback = questionConfig._canShowFeedback;
      }

      if (!_.isEmpty(newSettings)) {
        var questionComponents = this._getAllQuestionComponents();

        questionComponents.forEach(function (model) {
          return model.set(newSettings, {
            pluginName: '_assessment'
          });
        });
      }
    },
    _setupQuestionListeners: function () {
      this._removeQuestionListeners();

      this.listenTo(this.getChildren(), 'change:_isInteractionComplete', this._onBlockCompleted);
    },
    _checkNumberOfQuestionsAnswered: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var numberOfQuestionsAnswered = questionComponents.filter(function (model) {
        return model.get('_isInteractionComplete');
      }).length;
      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);
    },
    _removeQuestionListeners: function () {
      this.stopListening(this.getChildren(), 'change:_isInteractionComplete', this._onBlockCompleted);
    },
    _onBlockCompleted: function (blockModel, value) {
      var _this = this;

      if (value === false) return;
      var questionModels = blockModel.findDescendantModels('question');
      questionModels.forEach(function (questionModel) {
        _this._onQuestionCompleted(questionModel, value);
      });
      if (!blockModel.get('_isInteractionComplete')) return;

      this._checkAssessmentComplete();
    },
    _onQuestionCompleted: function (questionModel, value) {
      if (value === false) return;
      if (!questionModel.get('_isInteractionComplete')) return;
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');
      numberOfQuestionsAnswered++;
      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);

      this._updateQuestionsState();

      Adapt.assessment.saveState();

      this._checkAssessmentComplete();
    },
    _checkAssessmentComplete: function () {
      var allQuestionsAdded = this.get('_requireCompletionOf') !== Number.POSITIVE_INFINITY;
      if (!allQuestionsAdded) return;
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');

      var allQuestionsAnswered = numberOfQuestionsAnswered >= this._getCurrentQuestionComponents().length;

      if (!allQuestionsAnswered) return;

      this._onAssessmentComplete();
    },
    _onAssessmentComplete: function () {
      var _this2 = this;

      var wasAttemptInProgess = this.get('_attemptInProgress');
      if (!wasAttemptInProgess) return;
      this.set('_attemptInProgress', false);

      this._spendAttempt();

      var _scoreAsPercent = this._getScoreAsPercent();

      var _score = this._getScore();

      var _maxScore = this._getMaxScore();

      var _minScore = this._getMinScore();

      var _correctCount = this._getCorrectCount();

      var _correctAsPercent = this._getCorrectAsPercent();

      var _questionCount = this._getQuestionCount();

      this.set({
        _scoreAsPercent: _scoreAsPercent,
        _score: _score,
        _maxScore: _maxScore,
        _minScore: _minScore,
        _correctAsPercent: _correctAsPercent,
        _correctCount: _correctCount,
        _questionCount: _questionCount,
        _lastAttemptScoreAsPercent: _scoreAsPercent,
        _assessmentCompleteInSession: true,
        _isAssessmentComplete: true
      });

      this._updateQuestionsState();

      this._checkIsPass();

      this._removeQuestionListeners();

      if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {
        _.defer(function () {
          _this2._overrideMarkingSettings();

          _this2._refreshQuestions();
        });
      }

      Adapt.trigger('assessments:complete', this.getState(), this);
    },
    _updateQuestionsState: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var questions = questionComponents.map(function (model) {
        var _model$get;

        return {
          _id: model.get('_id'),
          _isCorrect: (_model$get = model.get('_isCorrect')) !== null && _model$get !== void 0 ? _model$get : null
        };
      });
      this.set('_questions', questions);
    },
    _checkIsPass: function () {
      var assessmentConfig = this.getConfig();
      var isPercentageBased = assessmentConfig._isPercentageBased;
      var scoreToPass = assessmentConfig._scoreToPass;
      var correctToPass = assessmentConfig._correctToPass || 0;
      var scoreAsPercent = this.get('_scoreAsPercent');
      var score = this.get('_score');
      var correctAsPercent = this.get('_correctAsPercent');
      var correctCount = this.get('_correctCount');
      var isPass = isPercentageBased ? scoreAsPercent >= scoreToPass && correctAsPercent >= correctToPass : score >= scoreToPass && correctCount >= correctToPass;
      this.set('_isPass', isPass);
    },
    _getMarkingSettings: function () {
      var markingSettings = {};

      if (this._shouldSuppressMarking()) {
        markingSettings = {
          _canShowMarking: false,
          _canShowModelAnswer: false
        };
      } else {
        var questionConfig = this.getConfig()._questions;

        if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowModelAnswer')) {
          markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;
        }

        if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowMarking')) {
          markingSettings._canShowMarking = questionConfig._canShowMarking;
        }
      }

      return markingSettings;
    },
    _overrideMarkingSettings: function () {
      var newMarkingSettings = this._getMarkingSettings();

      var questionComponents = this._getAllQuestionComponents();

      questionComponents.forEach(function (model) {
        return model.set(newMarkingSettings, {
          pluginName: '_assessment'
        });
      });
    },
    _refreshQuestions: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      questionComponents.forEach(function (model) {
        return model.refresh();
      });
    },
    _shouldSuppressMarking: function () {
      return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();
    },
    _isMarkingSuppressionEnabled: function () {
      var assessmentConfig = this.getConfig();
      return assessmentConfig._suppressMarking;
    },
    _isAttemptsLeft: function () {
      if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;
      if (this.get('_attemptsLeft') === 0) return false;
      return true;
    },
    _spendAttempt: function () {
      if (!this._isAttemptsLeft()) return false;
      var attemptsSpent = this.get('_attemptsSpent');
      this.set('_attemptsSpent', ++attemptsSpent);
      if (this.get('_attempts') === 'infinite') return true;
      var attemptsLeft = this.get('_attemptsLeft');
      this.set('_attemptsLeft', --attemptsLeft);
      return true;
    },
    _getScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var score = questionComponents.reduce(function (score, model) {
        return score += model.score || 0;
      }, 0);
      return score;
    },
    _getMaxScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var maxScore = questionComponents.reduce(function (maxScore, model) {
        return maxScore += model.maxScore || 0;
      }, 0);
      return maxScore;
    },
    _getMinScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var minScore = questionComponents.reduce(function (minScore, model) {
        return minScore += model.minScore || 0;
      }, 0);
      return minScore;
    },
    _getScoreAsPercent: function () {
      var minScore = this._getMinScore();

      var maxScore = this._getMaxScore();

      var score = this._getScore();

      var range = maxScore - minScore;
      return range === 0 ? 0 : Math.round((score - minScore) / range * 100);
    },
    _getCorrectCount: function () {
      return this._getCurrentQuestionComponents().reduce(function (count, model) {
        return count += model.get('_isCorrect') ? 1 : 0;
      }, 0);
    },
    _getQuestionCount: function () {
      return this._getCurrentQuestionComponents().length;
    },
    _getCorrectAsPercent: function () {
      var questionCount = this._getQuestionCount();

      return questionCount === 0 ? 0 : Math.round(this._getCorrectCount() / questionCount * 100);
    },
    _getLastAttemptScoreAsPercent: function () {
      return this.get('_lastAttemptScoreAsPercent');
    },
    _checkReloadPage: function () {
      if (!this.canResetInPage()) return false;
      var parentId = this.getParent().get('_id');
      var currentLocation = Adapt.location._currentId;
      if (currentLocation !== parentId) return false;
      if (!this.get('_isReady')) return false;
      return true;
    },
    _reloadPage: function (callback) {
      var _this3 = this;

      var assessmentConfig = this.getConfig();
      this._forceResetOnRevisit = true;
      this.listenToOnce(Adapt, 'pageView:ready', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!assessmentConfig._scrollToOnReset) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return Adapt.navigateToElement(_this3.get('_id'));

              case 3:
                callback();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));

      _.delay(function () {
        Backbone.history.navigate('#/id/' + Adapt.location._currentId, {
          replace: true,
          trigger: true
        });
      }, 250);
    },
    _resetQuestions: function () {
      var assessmentConfig = this.getConfig();

      var questionModels = this._getCurrentQuestionComponents();

      questionModels.forEach(function (model) {
        return model.reset(assessmentConfig._questions._resetType, true);
      });
    },
    _onRemove: function () {
      this._removeQuestionListeners();
    },
    _setCompletionStatus: function () {
      this.set({
        _isComplete: true,
        _isInteractionComplete: true
      });
    },
    _checkIfQuestionsWereRestored: function () {
      if (this.get('_assessmentCompleteInSession')) return;
      if (!this.get('_isAssessmentComplete')) return;
      var wereQuestionsRestored = true;
      var questions = this.get('_questions');

      var _iterator3 = _createForOfIteratorHelper(questions),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var question = _step3.value;
          var questionModel = Adapt.findById(question._id);

          if (questionModel.get('_isAvailable') && !questionModel.get('_isSubmitted')) {
            wereQuestionsRestored = false;
            break;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (!wereQuestionsRestored) {
        this.set('_assessmentCompleteInSession', true);
        return true;
      }

      return false;
    },
    isAssessmentEnabled: function () {
      var _this$get;

      if ((_this$get = this.get('_assessment')) !== null && _this$get !== void 0 && _this$get._isEnabled) return true;
      return false;
    },
    canResetInPage: function () {
      var assessmentConfig = this.getConfig();
      if (assessmentConfig._reloadPageOnReset === false) return false;
      return true;
    },
    reset: function (force, callback) {
      var assessmentConfig = this.getConfig();
      force = this._forceResetOnRevisit || force === true;
      this._forceResetOnRevisit = false;

      var isPageReload = this._checkReloadPage();

      if (this.get('_assessmentCompleteInSession') && !assessmentConfig._isResetOnRevisit && !isPageReload && !force) {
        if (typeof callback === 'function') callback(false);
        return false;
      }

      var wereQuestionsRestored = this._checkIfQuestionsWereRestored();

      force = force || wereQuestionsRestored;

      if (force && !this._isAttemptsLeft()) {
        this.set({
          _attemptsLeft: this.get('_attempts'),
          _attemptsSpent: 0
        });
      }

      var allowResetIfPassed = this.get('_assessment')._allowResetIfPassed;

      if (!this._isAttemptsLeft() && !force && !allowResetIfPassed) {
        if (typeof callback === 'function') callback(false);
        return false;
      }

      if (!isPageReload) {
        this._setupAssessmentData(force);

        if (typeof callback === 'function') callback(true);
      } else {
        this._reloadPage(function () {
          if (typeof callback === 'function') callback(true);
        });
      }

      return true;
    },
    getSaveState: function () {
      var _cfg$_banks, _cfg$_randomisation;

      var state = this.getState();
      var blocks;
      var cfg = this.getConfig();
      var banksActive = ((_cfg$_banks = cfg._banks) === null || _cfg$_banks === void 0 ? void 0 : _cfg$_banks._isEnabled) && cfg._banks._split.length > 1;
      var randomisationActive = (_cfg$_randomisation = cfg._randomisation) === null || _cfg$_randomisation === void 0 ? void 0 : _cfg$_randomisation._isEnabled;

      if (!banksActive && !randomisationActive) {
        blocks = this.findDescendantModels('block');
      } else {
        blocks = state.questions.map(function (question) {
          return Adapt.findById(question._id).getParent();
        });
      }

      blocks = _toConsumableArray(new Set(blocks)).filter(function (block) {
        return block.trackingPosition;
      });
      var blockTrackingPositions = blocks.map(function (block) {
        return block.trackingPosition;
      });
      var blockCompletion = blocks.map(function (block) {
        var questions = block.findDescendantModels('question');
        return questions.map(function (question) {
          return question.get('_isCorrect') || false;
        });
      });
      var blockData = [blockTrackingPositions, blockCompletion];
      var saveState = [state.isComplete ? 1 : 0, state.attemptsSpent, state.maxScore || 0, state.score, state.attemptInProgress ? 1 : 0, state.minScore || 0, state.correctAsPercent || 0, state.correctCount || 0, state.questionCount || 0];
      var dataPackage = [saveState, blockData];
      return dataPackage;
    },
    setRestoreState: function (dataPackage) {
      var restoreState = dataPackage[0];
      var blockData = dataPackage[1];

      var _isAssessmentComplete = restoreState[0] === 1;

      var attempts = this.get('_attempts');
      var _attemptsSpent = restoreState[1];
      var maxScore = restoreState[2];
      var score = restoreState[3];

      var _scoreAsPercent = score ? Math.round(score / maxScore * 100) : 0;

      var _attemptInProgress = restoreState[4] === 1;

      var minScore = restoreState[5];
      var correctAsPercent = restoreState[6];
      var correctCount = restoreState[7];
      var questionCount = restoreState[8];
      var blocks = blockData[0].map(function (trackingPosition) {
        if (typeof trackingPosition === 'number') {
          return Adapt.data.findWhere({
            _trackingId: trackingPosition
          });
        }

        return Adapt.data.findByTrackingPosition(trackingPosition);
      });

      if (blocks.length) {
        var nonBlockChildren = this.getChildren().models.filter(function (model) {
          return !model.isTypeGroup('block');
        });
        this.getChildren().models = blocks.concat(nonBlockChildren);
      }

      var _questions = [];
      blocks.forEach(function (block, blockIndex) {
        var blockQuestions = block.findDescendantModels('question');
        blockQuestions.forEach(function (question, questionIndex) {
          _questions.push({
            _id: question.get('_id'),
            _isCorrect: blockData[1][blockIndex][questionIndex]
          });
        });
      });
      this.set({
        _isAssessmentComplete: _isAssessmentComplete,
        _assessmentCompleteInSession: false,
        _attemptsSpent: _attemptsSpent,
        _attemptInProgress: _attemptInProgress,
        _attemptsLeft: attempts === 'infinite' ? attempts : attempts - _attemptsSpent,
        _maxScore: maxScore || this._getMaxScore(),
        _minScore: minScore || this._getMinScore(),
        _score: score || 0,
        _scoreAsPercent: _scoreAsPercent,
        _correctAsPercent: correctAsPercent || 0,
        _correctCount: correctCount || 0,
        _questions: _questions,
        _questionCount: questionCount || 0,
        _lastAttemptScoreAsPercent: _scoreAsPercent
      });
      if (_isAssessmentComplete) this._checkIsPass();
      Adapt.trigger('assessments:restored', this.getState(), this);
    },
    getState: function () {
      var assessmentConfig = this.getConfig();
      var state = {
        id: assessmentConfig._id,
        type: 'article-assessment',
        pageId: this.getParent().get('_id'),
        articleId: this.get('_id'),
        isEnabled: assessmentConfig._isEnabled,
        isComplete: this.get('_isAssessmentComplete'),
        isPercentageBased: assessmentConfig._isPercentageBased,
        scoreToPass: assessmentConfig._scoreToPass,
        score: this.get('_score'),
        scoreAsPercent: this.get('_scoreAsPercent'),
        maxScore: this.get('_maxScore'),
        minScore: this.get('_minScore'),
        correctCount: this.get('_correctCount'),
        correctAsPercent: this.get('_correctAsPercent'),
        correctToPass: assessmentConfig._correctToPass,
        questionCount: this.get('_questionCount'),
        isPass: this.get('_isPass'),
        includeInTotalScore: assessmentConfig._includeInTotalScore,
        assessmentWeight: assessmentConfig._assessmentWeight,
        attempts: this.get('_attempts'),
        attemptsSpent: this.get('_attemptsSpent'),
        attemptsLeft: this.get('_attemptsLeft'),
        attemptInProgress: this.get('_attemptInProgress'),
        lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),
        questions: this.get('_questions'),
        resetType: assessmentConfig._questions._resetType,
        allowResetIfPassed: assessmentConfig._allowResetIfPassed,
        questionModels: new Backbone.Collection(this._getCurrentQuestionComponents())
      };
      return state;
    },
    getConfig: function () {
      var assessmentConfig = this.get('_assessment');

      if (!assessmentConfig) {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);
      } else {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);
      }

      if (assessmentConfig._id === undefined) {
        assessmentConfig._id = 'givenId' + givenIdCount++;
      }

      this.set('_assessment', assessmentConfig);
      return assessmentConfig;
    }
  };
  var AdaptAssessmentArticleModel = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel", AssessmentModel);

  var assessmentsConfigDefaults = {
    _isPercentageBased: true,
    _scoreToPass: 100,
    _isDefaultsLoaded: true
  };

  var Assessment = function (_Backbone$Controller) {
    _inherits(Assessment, _Backbone$Controller);

    var _super = _createSuper(Assessment);

    function Assessment() {
      _classCallCheck(this, Assessment);

      return _super.apply(this, arguments);
    }

    _createClass(Assessment, [{
      key: "initialize",
      value: function initialize() {
        this._assessments = Object.assign([], {
          _byPageId: {},
          _byAssessmentId: {}
        });
        this.listenTo(Adapt, {
          'assessments:complete': this._onAssessmentsComplete,
          'router:location': this._checkResetAssessmentsOnRevisit,
          'router:plugin': this._handleRoute,
          'app:dataReady': this._onDataReady
        });
      }
    }, {
      key: "_onAssessmentsComplete",
      value: function _onAssessmentsComplete(state) {
        var assessmentId = state.id;
        state.isComplete = true;
        if (assessmentId === undefined) return;

        if (!this._getStateByAssessmentId(assessmentId)) {
          Adapt.log.warn('assessments: state was not registered when assessment was created');
        }

        this.saveState();

        this._setPageProgress();

        this._checkAssessmentsComplete();
      }
    }, {
      key: "_restoreModelState",
      value: function _restoreModelState(assessmentModel) {
        if (!this._saveStateModel) {
          this._saveStateModel = Adapt.offlineStorage.get('a');
        }

        if (this._saveStateModel) {
          var state = assessmentModel.getState();

          if (this._saveStateModel[state.id]) {
            assessmentModel.setRestoreState(Adapt.offlineStorage.deserialize(this._saveStateModel[state.id]));
          }
        }
      }
    }, {
      key: "_handleRoute",
      value: function _handleRoute(plugin, id) {
        if (plugin !== 'assessment' && plugin !== 'article-assessment' || id === undefined) {
          return;
        }

        if (!Adapt.findById(id)) {
          var assessment = Adapt.assessment._assessments._byAssessmentId[id];

          if (assessment) {
            id = assessment.get('_id');
          } else {
            Adapt.log.warn('Assessment not found with _id: ' + id);
            return;
          }
        }

        _.defer(function () {
          Backbone.history.navigate('#/id/' + id, {
            trigger: true,
            replace: true
          });
        });
      }
    }, {
      key: "_checkResetAssessmentsOnRevisit",
      value: function _checkResetAssessmentsOnRevisit(toObject) {
        if (toObject._contentType !== 'page') return;

        var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);

        if (pageAssessmentModels === undefined) return;
        Adapt.wait["for"](function resetAllAssessments(allAssessmentHaveReset) {
          var numberOfAssessments = pageAssessmentModels.length;
          var numberOfResetAssessments = 0;
          var forceAssessmentReset = false;
          pageAssessmentModels.forEach(function (model) {
            model.reset(forceAssessmentReset, function () {
              numberOfResetAssessments++;
              var haveAllModelsReset = numberOfResetAssessments === numberOfAssessments;

              if (!haveAllModelsReset) {
                return;
              }

              allAssessmentHaveReset();
            });
          });
        });

        this._setPageProgress();
      }
    }, {
      key: "_onDataReady",
      value: function _onDataReady() {
        this._assessments = Object.assign([], {
          _byPageId: {},
          _byAssessmentId: {}
        });
        this._restoredCount = 0;
      }
    }, {
      key: "_checkAssessmentsComplete",
      value: function _checkAssessmentsComplete() {
        var _this = this;

        var allAssessmentsComplete = true;
        var assessmentToPostBack = 0;

        var states = this._getStatesByAssessmentId();

        var assessmentStates = [];

        for (var id in states) {
          var state = states[id];
          if (!state.includeInTotalScore) continue;

          if (!state.isComplete) {
            allAssessmentsComplete = false;
            break;
          }

          assessmentToPostBack++;
          assessmentStates.push(state);
        }

        if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;

        if (assessmentToPostBack === 1) {
          this._setupSingleAssessmentConfiguration(assessmentStates[0]);
        }

        _.defer(function () {
          return Adapt.trigger('assessment:complete', _this.getState());
        });

        return true;
      }
    }, {
      key: "_setupSingleAssessmentConfiguration",
      value: function _setupSingleAssessmentConfiguration(assessmentState) {
        var assessmentsConfig = Adapt.course.get('_assessment');
        $.extend(true, assessmentsConfig, {
          _isPercentageBased: assessmentState.isPercentageBased,
          _scoreToPass: assessmentState.scoreToPass
        });
        Adapt.course.set('_assessment', assessmentsConfig);
      }
    }, {
      key: "_getAssessmentByPageId",
      value: function _getAssessmentByPageId(pageId) {
        return this._assessments._byPageId[pageId];
      }
    }, {
      key: "_getStateByAssessmentId",
      value: function _getStateByAssessmentId(assessmentId) {
        if (assessmentId === undefined) {
          return null;
        }

        return this._assessments._byAssessmentId[assessmentId].getState();
      }
    }, {
      key: "_getStatesByAssessmentId",
      value: function _getStatesByAssessmentId() {
        var states = {};

        var _iterator = _createForOfIteratorHelper(this._assessments),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var assessmentModel = _step.value;
            if (!assessmentModel.get('_isAvailable')) continue;
            var state = assessmentModel.getState();
            states[state.id] = state;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return states;
      }
    }, {
      key: "_setPageProgress",
      value: function _setPageProgress() {
        for (var _i = 0, _Object$entries = Object.entries(this._assessments._byPageId); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              id = _Object$entries$_i[0],
              assessments = _Object$entries$_i[1];

          var assessmentsTotal = assessments.length;
          var assessmentsPassed = 0;

          var _iterator2 = _createForOfIteratorHelper(assessments),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var assessment = _step2.value;
              var assessmentState = assessment.getState();
              if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;

              if (assessmentState.isComplete) {
                assessmentsPassed++;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var pageModel = Adapt.findById(id);
          pageModel === null || pageModel === void 0 ? void 0 : pageModel.set({
            _subProgressTotal: assessmentsTotal,
            _subProgressComplete: assessmentsPassed
          });
        }
      }
    }, {
      key: "_addToAssessmentIdMap",
      value: function _addToAssessmentIdMap(id, model) {
        if (id === undefined) {
          Adapt.log.warn('An assessment has been registered with an undefined value for "_id"');
          return;
        }

        if (id === '') {
          Adapt.log.warn('An assessment has been registered with an empty value for "_id"');
        }

        if (!this._assessments._byAssessmentId[id]) {
          this._assessments._byAssessmentId[id] = model;
        } else {
          Adapt.log.warn('An assessment with an _id of "' + id + '" already exists!');
        }
      }
    }, {
      key: "_setupQuestionNumbering",
      value: function _setupQuestionNumbering() {
        var getRelatedQuestions = function (data) {
          var currentAssessmentId = data._assessmentId;
          var currentAssessment = Adapt.assessment.get(currentAssessmentId);
          return currentAssessment.getState().questions;
        };

        Handlebars.registerHelper('questionNumber', function getQuestionNumber() {
          var _this$view;

          var data = ((_this$view = this.view) === null || _this$view === void 0 ? void 0 : _this$view.model.toJSON()) || this;
          if (!data._isPartOfAssessment) return;

          var related = _.pluck(getRelatedQuestions(data), '_id');

          return related.indexOf(data._id) + 1;
        });
        Handlebars.registerHelper('questionCount', function getTotalQuestions() {
          var data = this.view ? this.view.model.toJSON() : this;
          if (!data._isPartOfAssessment) return;
          return getRelatedQuestions(data).length;
        });
      }
    }, {
      key: "register",
      value: function register(assessmentModel) {
        var state = assessmentModel.getState();
        var assessmentId = state.id;
        var pageId = state.pageId;

        if (this._assessments._byPageId[pageId] === undefined) {
          this._assessments._byPageId[pageId] = [];
        }

        this._assessments._byPageId[pageId].push(assessmentModel);

        this._addToAssessmentIdMap(assessmentId, assessmentModel);

        this._assessments.push(assessmentModel);

        this._restoreModelState(assessmentModel);

        this._restoredCount++;
        Adapt.trigger('assessments:register', state, assessmentModel);

        this._setPageProgress();

        this._setupQuestionNumbering();

        if (this._restoredCount === this._assessments.length) {
          Adapt.trigger('assessment:restored', this.getState());
        }
      }
    }, {
      key: "get",
      value: function get(id) {
        return id === undefined ? this._assessments.slice(0) : this._assessments._byAssessmentId[id];
      }
    }, {
      key: "saveState",
      value: function saveState() {
        this._saveStateModel = {};

        var _iterator3 = _createForOfIteratorHelper(this._assessments),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var assessmentModel = _step3.value;
            var state = assessmentModel.getState();
            this._saveStateModel[state.id] = Adapt.offlineStorage.serialize(assessmentModel.getSaveState());
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        Adapt.offlineStorage.set('a', this._saveStateModel);
      }
    }, {
      key: "getConfig",
      value: function getConfig() {
        var _assessmentsConfig;

        var assessmentsConfig = Adapt.course.get('_assessment');

        if ((_assessmentsConfig = assessmentsConfig) !== null && _assessmentsConfig !== void 0 && _assessmentsConfig._isDefaultsLoaded) {
          return assessmentsConfig;
        }

        if (assessmentsConfig === undefined) {
          assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);
        } else {
          assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);
        }

        Adapt.course.set('_assessment', assessmentsConfig);
        return assessmentsConfig;
      }
    }, {
      key: "getState",
      value: function getState() {
        var assessmentsConfig = this.getConfig();
        var score = 0;
        var maxScore = 0;
        var minScore = 0;
        var correctCount = 0;
        var questionCount = 0;
        var assessments = 0;

        var states = this._getStatesByAssessmentId();

        var assessmentsComplete = 0;

        for (var id in states) {
          var state = states[id];
          if (!state.includeInTotalScore) continue;
          if (state.isComplete) assessmentsComplete++;
          assessments++;
          maxScore += state.maxScore / state.assessmentWeight;
          minScore += state.minScore / state.assessmentWeight;
          score += state.score / state.assessmentWeight;
          correctCount += state.correctCount / state.assessmentWeight;
          questionCount += state.questionCount / state.assessmentWeight;
        }

        var isComplete = assessmentsComplete === assessments;
        var scoreRange = maxScore - minScore;
        var scoreAsPercent = scoreRange === 0 ? 0 : Math.round((score - minScore) / scoreRange * 100);
        var correctAsPercent = questionCount === 0 ? 0 : Math.round(correctCount / questionCount * 100);

        if (assessmentsConfig._correctToPass === undefined) {
          Adapt.log.warnOnce('Assessment course config is missing _correctToPass');
        }

        var scoreToPass = assessmentsConfig._scoreToPass;
        var correctToPass = assessmentsConfig._correctToPass || scoreToPass;
        var isPercentageBased = assessmentsConfig._isPercentageBased;
        var isPass = isComplete && (isPercentageBased ? scoreAsPercent >= scoreToPass && correctAsPercent >= correctToPass : score >= scoreToPass && correctCount >= correctToPass);
        var canRetry = Object.values(states).some(function (state) {
          var isFailed = !state.isPass;
          var hasAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
          return isFailed && hasAttemptsLeft;
        });
        return {
          isComplete: isComplete,
          isPercentageBased: isPercentageBased,
          isPass: isPass,
          maxScore: maxScore,
          minScore: minScore,
          score: score,
          scoreToPass: scoreToPass,
          scoreAsPercent: scoreAsPercent,
          correctCount: correctCount,
          correctAsPercent: correctAsPercent,
          correctToPass: correctToPass,
          questionCount: questionCount,
          assessmentsComplete: assessmentsComplete,
          assessments: assessments,
          canRetry: canRetry
        };
      }
    }]);

    return Assessment;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-assessment/js/assessment", Adapt.assessment = new Assessment());

  var ArticleViewInitialize = ArticleView$1.prototype.initialize;

  ArticleView$1.prototype.initialize = function (options) {
    var _this$model$get;

    if (((_this$model$get = this.model.get('_assessment')) === null || _this$model$get === void 0 ? void 0 : _this$model$get._isEnabled) === true) {
      Object.assign(this, AdaptAssessmentArticleView);
    }

    return ArticleViewInitialize.apply(this, arguments);
  };

  var ArticleModelInitialize = ArticleModel$1.prototype.initialize;

  ArticleModel$1.prototype.initialize = function (options) {
    var _this$get;

    if (((_this$get = this.get('_assessment')) === null || _this$get === void 0 ? void 0 : _this$get._isEnabled) === true) {
      Object.assign(this, AdaptAssessmentArticleModel);
      var returnValue = ArticleModelInitialize.apply(this, arguments);

      this._postInitialize();

      return returnValue;
    }

    return ArticleModelInitialize.apply(this, arguments);
  };

  var Bookmarking = function (_Backbone$Controller) {
    _inherits(Bookmarking, _Backbone$Controller);

    var _super = _createSuper(Bookmarking);

    function Bookmarking() {
      _classCallCheck(this, Bookmarking);

      return _super.apply(this, arguments);
    }

    _createClass(Bookmarking, [{
      key: "initialize",
      value: function initialize() {
        this.bookmarkLevel = null;
        this.restoredLocationID = null;
        this.currentLocationID = null;
        this.listenToOnce(Adapt, 'router:location', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        if (!this.checkCourseIsEnabled()) return;
        this.setupEventListeners();
        this.checkRestoreLocation();
      }
    }, {
      key: "checkCourseIsEnabled",
      value: function checkCourseIsEnabled() {
        var courseBookmarkModel = Adapt.course.get('_bookmarking');
        if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;
        return true;
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this._onScroll = _.debounce(this.checkLocation.bind(this), 250);
        this.listenTo(Adapt, {
          'menuView:ready': this.setupMenu,
          'pageView:preRender': this.setupPage,
          'view:childAdded': this.checkLocation
        });
      }
    }, {
      key: "checkRestoreLocation",
      value: function checkRestoreLocation() {
        this.restoredLocationID = Adapt.offlineStorage.get('location');

        if (!this.restoredLocationID || this.restoredLocationID === 'undefined' || !Adapt.findById(this.restoredLocationID)) {
          return;
        }

        this.listenToOnce(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);
      }
    }, {
      key: "restoreLocation",
      value: function restoreLocation() {
        var _this = this;

        this.stopListening(Adapt, 'pageView:ready menuView:ready', this.restoreLocation);

        _.delay(function () {
          if (_this.isAlreadyOnScreen(_this.restoredLocationID)) {
            return;
          }

          if (Adapt.course.get('_bookmarking')._showPrompt === false) {
            _this.navigateToPrevious();

            return;
          }

          _this.showPrompt();
        }, 500);
      }
    }, {
      key: "isAlreadyOnScreen",
      value: function isAlreadyOnScreen(id) {
        if (id === Adapt.location._currentId) return true;
        var type = Adapt.findById(id).getTypeGroup();

        if (type === 'menu' || type === 'page') {
          return false;
        }

        var locationOnscreen = $('.' + id).onscreen();
        var isLocationOnscreen = locationOnscreen && locationOnscreen.percentInview > 0;
        var isLocationFullyInview = locationOnscreen && locationOnscreen.percentInview === 100;

        if (isLocationOnscreen && isLocationFullyInview) {
          return true;
        }

        return false;
      }
    }, {
      key: "showPrompt",
      value: function showPrompt() {
        var courseBookmarkModel = Adapt.course.get('_bookmarking');
        var buttons = courseBookmarkModel._buttons || {
          yes: 'Yes',
          no: 'No'
        };
        this.listenToOnce(Adapt, {
          'bookmarking:continue': this.navigateToPrevious,
          'bookmarking:cancel': this.navigateCancel
        });
        Adapt.notify.prompt({
          _classes: 'is-bookmarking',
          _showIcon: true,
          title: courseBookmarkModel.title,
          body: courseBookmarkModel.body,
          _prompts: [{
            promptText: buttons.yes || 'Yes',
            _callbackEvent: 'bookmarking:continue'
          }, {
            promptText: buttons.no || 'No',
            _callbackEvent: 'bookmarking:cancel'
          }]
        });
      }
    }, {
      key: "navigateToPrevious",
      value: function navigateToPrevious() {
        var _this2 = this;

        _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var isSinglePage;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  isSinglePage = Adapt.contentObjects.models.length === 1;
                  _context.prev = 1;
                  _context.next = 4;
                  return Adapt.router.navigateToElement(_this2.restoredLocationID, {
                    trigger: true,
                    replace: isSinglePage,
                    duration: 400
                  });

                case 4:
                  _context.next = 9;
                  break;

                case 6:
                  _context.prev = 6;
                  _context.t0 = _context["catch"](1);
                  logging.warn("Bookmarking cannot navigate to id: ".concat(_this2.restoredLocationID, "\n"), _context.t0);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 6]]);
        })));

        this.stopListening(Adapt, 'bookmarking:cancel');
      }
    }, {
      key: "navigateCancel",
      value: function navigateCancel() {
        this.stopListening(Adapt, 'bookmarking:continue');
      }
    }, {
      key: "resetLocationID",
      value: function resetLocationID() {
        this.setLocationID('');
      }
    }, {
      key: "setupMenu",
      value: function setupMenu(menuView) {
        var menuModel = menuView.model;

        if (!menuModel.get('_parentId')) {
          this.resetLocationID();
          return;
        }

        this.setLocationID(menuModel.get('_id'));
      }
    }, {
      key: "getBookmarkLevel",
      value: function getBookmarkLevel(pageModel) {
        var defaultLevel = Adapt.course.get('_bookmarking')._level || 'component';
        var bookmarkModel = pageModel.get('_bookmarking');
        var isInherit = !bookmarkModel || !bookmarkModel._level || bookmarkModel._level === 'inherit';
        return isInherit ? defaultLevel : bookmarkModel._level;
      }
    }, {
      key: "setupPage",
      value: function setupPage(pageView) {
        var pageBookmarkModel = pageView.model.get('_bookmarking');

        if ((pageBookmarkModel === null || pageBookmarkModel === void 0 ? void 0 : pageBookmarkModel._isEnabled) === false) {
          this.resetLocationID();
          return;
        }

        this.setLocationID(pageView.model.get('_id'));
        this.bookmarkLevel = this.getBookmarkLevel(pageView.model);

        if (this.bookmarkLevel === 'page') {
          return;
        }

        this.listenToOnce(Adapt, 'remove', this.releaseViews);
        $(window).on('scroll', this._onScroll);
      }
    }, {
      key: "setLocationID",
      value: function setLocationID(id) {
        if (this.currentLocationID === id) return;
        Adapt.offlineStorage.set('location', id);
        this.currentLocationID = id;
      }
    }, {
      key: "releaseViews",
      value: function releaseViews() {
        this.stopListening(Adapt, 'remove', this.releaseViews);
        $(window).off('scroll', this._onScroll);
      }
    }, {
      key: "checkLocation",
      value: function checkLocation() {
        var _Adapt$parentView, _Adapt$parentView$mod;

        var contentObjectBookmarkModel = (_Adapt$parentView = Adapt.parentView) === null || _Adapt$parentView === void 0 ? void 0 : (_Adapt$parentView$mod = _Adapt$parentView.model) === null || _Adapt$parentView$mod === void 0 ? void 0 : _Adapt$parentView$mod.get('_bookmarking');

        if ((contentObjectBookmarkModel === null || contentObjectBookmarkModel === void 0 ? void 0 : contentObjectBookmarkModel._isEnabled) === false) {
          this.resetLocationID();
          return;
        }

        var currentModel = Adapt.location._currentModel;
        if (!currentModel || !this.bookmarkLevel) return;
        var possibleViewIds = currentModel.findDescendantModels(this.bookmarkLevel).filter(function (desc) {
          return desc.get('_isTrackable') !== false;
        }).map(function (desc) {
          return desc.get('_id');
        });
        var highestOnscreen = 0;
        var highestOnscreenLocation = '';
        possibleViewIds.forEach(function (id) {
          var element = $("[data-adapt-id=".concat(id, "]"));
          if (!element.length) return;
          var measurements = element.onscreen();
          if (!measurements.onscreen) return;
          if (measurements.percentInview <= highestOnscreen) return;
          highestOnscreen = measurements.percentInview;
          highestOnscreenLocation = id;
        });
        if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);
      }
    }]);

    return Bookmarking;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking", new Bookmarking());

  var NavigationView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView", function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.template = 'languagePickerNavigation';
        this.setupHelpers();
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.template];
        this.$el.html(template({
          _config: this.model.get('_accessibility'),
          _accessibility: Adapt.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          return Adapt.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "setupHelpers",
      value: function setupHelpers() {
        Handlebars.registerHelper('a11y_aria_label', function (text) {
          return "<div class=\"aria-label\">".concat(text, "</div>");
        });
      }
    }]);

    return NavigationView;
  }(Backbone.View));

  var LanguagePickerView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerView", function (_Backbone$View) {
    _inherits(LanguagePickerView, _Backbone$View);

    var _super = _createSuper(LanguagePickerView);

    function LanguagePickerView() {
      _classCallCheck(this, LanguagePickerView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerView, [{
      key: "template",
      get: function () {
        return 'languagePickerView';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-languagepicker-btn-click': 'onLanguageClick'
        };
      }
    }, {
      key: "className",
      value: function className() {
        return 'languagepicker';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.initializeNavigation();
        $('html').addClass('in-languagepicker');
        this.listenTo(Adapt, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.template];
        this.$el.html(template(data));
        this.$el.addClass(data._classes);
        document.title = this.model.get('title') || '';

        _.defer(this.postRender.bind(this));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        $('.js-loading').hide();
      }
    }, {
      key: "onLanguageClick",
      value: function onLanguageClick(event) {
        this.destroyNavigation();
        var lang = event.currentTarget.value;
        this.model.setLanguage(lang);
      }
    }, {
      key: "initializeNavigation",
      value: function initializeNavigation() {
        this.navigationView = new NavigationView({
          model: this.model
        });
      }
    }, {
      key: "destroyNavigation",
      value: function destroyNavigation() {
        this.navigationView.remove();
      }
    }, {
      key: "remove",
      value: function remove() {
        $('html').removeClass('in-languagepicker');

        _get(_getPrototypeOf(LanguagePickerView.prototype), "remove", this).call(this);
      }
    }]);

    return LanguagePickerView;
  }(Backbone.View));

  var LanguagePickerDrawerView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView", function (_Backbone$View) {
    _inherits(LanguagePickerDrawerView, _Backbone$View);

    var _super = _createSuper(LanguagePickerDrawerView);

    function LanguagePickerDrawerView() {
      _classCallCheck(this, LanguagePickerDrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerDrawerView, [{
      key: "template",
      get: function () {
        return 'languagePickerDrawerView';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-languagepicker-item-btn': 'onButtonClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.template];
        this.$el.html(template(data));
      }
    }, {
      key: "onButtonClick",
      value: function onButtonClick(event) {
        var newLanguage = this.$(event.currentTarget).attr('data-language');
        this.model.set('newLanguage', newLanguage);
        this.promptObject = this.getPromptObject(newLanguage);
        this.listenToOnce(Adapt, 'drawer:closed', this.onDrawerClosed);
        Adapt.trigger('drawer:closeDrawer');
      }
    }, {
      key: "onDrawerClosed",
      value: function onDrawerClosed() {
        var _this = this;

        _.delay(function () {
          _this.listenToOnce(Adapt, {
            'popup:opened': _this.onPopupOpened,
            'languagepicker:changelanguage:yes': _this.onDoChangeLanguage,
            'languagepicker:changelanguage:no': _this.onDontChangeLanguage
          });

          Adapt.notify.prompt(_this.promptObject);
        }, 250);
      }
    }, {
      key: "onPopupOpened",
      value: function onPopupOpened() {
        this.$finishFocus = a11y.setPopupCloseTo($('#a11y-focuser'));
      }
    }, {
      key: "onDoChangeLanguage",
      value: function onDoChangeLanguage() {
        var newLanguage = this.model.get('newLanguage');
        this.model.setTrackedData();
        this.model.setLanguage(newLanguage);
        this.remove();
      }
    }, {
      key: "onDontChangeLanguage",
      value: function onDontChangeLanguage() {
        var _this2 = this;

        this.remove();

        _.delay(function () {
          return a11y.focusFirst(_this2.$finishFocus);
        }, 500);
      }
    }, {
      key: "getPromptObject",
      value: function getPromptObject(newLanguage) {
        var data = this.model.getLanguageDetails(newLanguage);
        return {
          _attributes: {
            lang: newLanguage
          },
          _classes: "is-lang-".concat(newLanguage, " ").concat(data._direction === 'rtl' ? 'is-rtl' : 'is-ltr'),
          title: data.warningTitle,
          body: data.warningMessage,
          _prompts: [{
            promptText: data._buttons.yes,
            _callbackEvent: 'languagepicker:changelanguage:yes'
          }, {
            promptText: data._buttons.no,
            _callbackEvent: 'languagepicker:changelanguage:no'
          }],
          _showIcon: true
        };
      }
    }]);

    return LanguagePickerDrawerView;
  }(Backbone.View));

  var LanguagePickerNavView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavView", function (_Backbone$View) {
    _inherits(LanguagePickerNavView, _Backbone$View);

    var _super = _createSuper(LanguagePickerNavView);

    function LanguagePickerNavView() {
      _classCallCheck(this, LanguagePickerNavView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerNavView, [{
      key: "tagName",
      value: function tagName() {
        return 'button';
      }
    }, {
      key: "className",
      value: function className() {
        var classNames = 'btn-icon nav__btn nav__languagepicker-btn js-languagepicker-nav-btn icon';
        var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';
        return "".concat(classNames, " ").concat(customClass);
      }
    }, {
      key: "events",
      value: function events() {
        return {
          click: 'onClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'remove', this.remove);
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView({
          model: this.model
        }).$el, false);
      }
    }]);

    return LanguagePickerNavView;
  }(Backbone.View));

  var LanguagePickerModel = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerModel", function (_Backbone$Model) {
    _inherits(LanguagePickerModel, _Backbone$Model);

    var _super = _createSuper(LanguagePickerModel);

    function LanguagePickerModel() {
      _classCallCheck(this, LanguagePickerModel);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerModel, [{
      key: "preinitialize",
      value: function preinitialize() {
        this.trackedData = {
          components: [],
          blocks: []
        };
        this.locationId = null;
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _isEnabled: false,
          displayTitle: '',
          body: '',
          _languages: []
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt.config, 'change:_activeLanguage', this.markLanguageAsSelected);
        this.listenTo(Adapt, 'app:dataLoaded', this.onDataLoaded);
      }
    }, {
      key: "getLanguageDetails",
      value: function getLanguageDetails(language) {
        return this.get('_languages').find(function (_ref) {
          var _language = _ref._language;
          return _language === language;
        });
      }
    }, {
      key: "setLanguage",
      value: function setLanguage(language) {
        Adapt.config.set({
          _activeLanguage: language,
          _defaultDirection: this.getLanguageDetails(language)._direction
        });
      }
    }, {
      key: "markLanguageAsSelected",
      value: function markLanguageAsSelected(model, language) {
        this.get('_languages').forEach(function (item) {
          item._isSelected = item._language === language;
        });
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        var _this = this;

        if (!this.get('_restoreStateOnLanguageChange')) {
          return;
        }

        _.defer(function () {
          _this.locationId = Adapt.offlineStorage.get('location') || null;

          _this.restoreState();
        });
      }
    }, {
      key: "restoreLocation",
      value: function restoreLocation() {
        var _this2 = this;

        if (!Adapt.findById(this.locationId)) return;

        _.defer(function () {
          return Adapt.navigateToElement('.' + _this2.locationId);
        });
      }
    }, {
      key: "restoreState",
      value: function restoreState() {
        var _this$trackedData$com, _this$trackedData$blo;

        if (this.isTrackedDataEmpty()) return;
        (_this$trackedData$com = this.trackedData.components) === null || _this$trackedData$com === void 0 ? void 0 : _this$trackedData$com.forEach(this.setTrackableState);
        (_this$trackedData$blo = this.trackedData.blocks) === null || _this$trackedData$blo === void 0 ? void 0 : _this$trackedData$blo.forEach(this.setTrackableState);
      }
    }, {
      key: "isTrackedDataEmpty",
      value: function isTrackedDataEmpty() {
        return _.isEqual(this.trackedData, {
          components: [],
          blocks: []
        });
      }
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        return {
          components: this.getState(Adapt.components.models).filter(Boolean),
          blocks: this.getState(Adapt.blocks.models).filter(Boolean)
        };
      }
    }, {
      key: "getState",
      value: function getState(models) {
        return models.map(function (model) {
          return model.get('_isComplete') && model.getTrackableState();
        });
      }
    }, {
      key: "setTrackedData",
      value: function setTrackedData() {
        if (!this.get('_restoreStateOnLanguageChange')) {
          return;
        }

        this.listenToOnce(Adapt, 'contentObjectView:ready', this.restoreLocation);
        this.trackedData = this.getTrackableState();
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(stateObject) {
        var restoreModel = Adapt.findById(stateObject._id);

        if (!restoreModel) {
          Adapt.log.warn('LanguagePicker unable to restore state for: ' + stateObject._id);
          return;
        }

        restoreModel.setTrackableState(stateObject);
      }
    }]);

    return LanguagePickerModel;
  }(Backbone.Model));

  var LanguagePicker = function (_Backbone$Controller) {
    _inherits(LanguagePicker, _Backbone$Controller);

    var _super = _createSuper(LanguagePicker);

    function LanguagePicker() {
      _classCallCheck(this, LanguagePicker);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePicker, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'configModel:dataLoaded', this.onConfigLoaded);
      }
    }, {
      key: "onConfigLoaded",
      value: function onConfigLoaded() {
        var config = Adapt.config.get('_languagePicker');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        this.languagePickerModel = new LanguagePickerModel(config);
        this.listenTo(Adapt, 'router:menu router:page', this.setupNavigationView);
        var params = new URLSearchParams(window.location.search);
        var paramLang = params.get('lang');
        if (paramLang && Adapt.build.get('availableLanguageNames').includes(paramLang)) return;
        Adapt.config.set('_canLoadData', false);

        if (Adapt.offlineStorage.ready) {
          this.onOfflineStorageReady();
          return;
        }

        this.listenToOnce(Adapt, 'offlineStorage:ready', this.onOfflineStorageReady);
      }
    }, {
      key: "onOfflineStorageReady",
      value: function onOfflineStorageReady() {
        var storedLanguage = Adapt.offlineStorage.get('lang');

        if (storedLanguage) {
          this.languagePickerModel.setLanguage(storedLanguage);
          return;
        }

        if (this.languagePickerModel.get('_showOnCourseLoad') === false) {
          this.languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));
          return;
        }

        this.showLanguagePickerView();
      }
    }, {
      key: "showLanguagePickerView",
      value: function showLanguagePickerView() {
        var languagePickerView = new LanguagePickerView({
          model: this.languagePickerModel
        });
        languagePickerView.$el.appendTo('#wrapper');
      }
    }, {
      key: "setupNavigationView",
      value: function setupNavigationView() {
        var courseGlobals = Adapt.course.get('_globals')._extensions;

        var navigationBarLabel = '';

        if (courseGlobals._languagePicker) {
          navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;
        }

        var languagePickerNavView = new LanguagePickerNavView({
          model: this.languagePickerModel,
          attributes: {
            'aria-label': navigationBarLabel
          }
        });
        languagePickerNavView.$el.appendTo('.nav__inner');
      }
    }]);

    return LanguagePicker;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-languagePicker/js/adapt-languagePicker", new LanguagePicker());

  var Completion = function (_Backbone$Controller) {
    _inherits(Completion, _Backbone$Controller);

    var _super = _createSuper(Completion);

    function Completion() {
      _classCallCheck(this, Completion);

      return _super.apply(this, arguments);
    }

    _createClass(Completion, [{
      key: "initialize",
      value: function initialize() {
        this.subProgressCompleted = 0;
        this.subProgressTotal = 0;
        this.nonAssessmentCompleted = 0;
        this.nonAssessmentTotal = 0;
        this.assessmentCompleted = 0;
        this.assessmentTotal = 0;
      }
    }, {
      key: "calculateCompletion",
      value: function calculateCompletion(contentObjectModel) {
        var _Adapt$course$get, _contentObjectModel$g;

        var completion = Adapt.completion;
        var viewType = contentObjectModel.get('_type');
        var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;
        var children;

        switch (viewType) {
          case 'page':
            children = contentObjectModel.getAllDescendantModels().filter(function (model) {
              return model.get('_isAvailable') && !model.get('_isOptional');
            });
            var availableChildren = this.filterAvailableChildren(children);
            var components = this.getPageLevelProgressEnabledModels(availableChildren);
            var nonAssessmentComponents = this.getNonAssessmentComponents(components);
            completion.nonAssessmentTotal = nonAssessmentComponents.length;
            completion.nonAssessmentCompleted = this.getComponentsCompleted(nonAssessmentComponents).length;
            var assessmentComponents = this.getAssessmentComponents(components);
            completion.assessmentTotal = assessmentComponents.length;
            completion.assessmentCompleted = this.getComponentsInteractionCompleted(assessmentComponents).length;

            if (contentObjectModel.get('_pageLevelProgress')._excludeAssessments !== true) {
              completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;
              completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;
            }

            var showPageCompletionCourse = ((_Adapt$course$get = Adapt.course.get('_pageLevelProgress')) === null || _Adapt$course$get === void 0 ? void 0 : _Adapt$course$get._showPageCompletion) !== false;
            var showPageCompletionPage = ((_contentObjectModel$g = contentObjectModel.get('_pageLevelProgress')) === null || _contentObjectModel$g === void 0 ? void 0 : _contentObjectModel$g._showPageCompletion) !== false;

            if (showPageCompletionCourse && showPageCompletionPage) {
              completion.nonAssessmentCompleted += isComplete;
              completion.nonAssessmentTotal += 1;
            }

            break;

          case 'menu':
          case 'course':
            children = contentObjectModel.get('_children').models;
            children.forEach(function (contentObject) {
              var completionObject = Adapt.completion.calculateCompletion(contentObject);
              completion.subProgressCompleted += completionObject.subProgressCompleted || 0;
              completion.subProgressTotal += completionObject.subProgressTotal || 0;
              completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;
              completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;
              completion.assessmentTotal += completionObject.assessmentTotal;
              completion.assessmentCompleted += completionObject.assessmentCompleted;
            });
            break;
        }

        return completion;
      }
    }, {
      key: "getNonAssessmentComponents",
      value: function getNonAssessmentComponents(models) {
        return models.filter(function (model) {
          return !model.get('_isPartOfAssessment');
        });
      }
    }, {
      key: "getAssessmentComponents",
      value: function getAssessmentComponents(models) {
        return models.filter(function (model) {
          return model.get('_isPartOfAssessment');
        });
      }
    }, {
      key: "getComponentsCompleted",
      value: function getComponentsCompleted(models) {
        return models.filter(function (item) {
          return item.get('_isComplete');
        });
      }
    }, {
      key: "getComponentsInteractionCompleted",
      value: function getComponentsInteractionCompleted(models) {
        return models.filter(function (item) {
          return item.get('_isComplete');
        });
      }
    }, {
      key: "getPageLevelProgressEnabledModels",
      value: function getPageLevelProgressEnabledModels(models) {
        return models.filter(function (model) {
          var config = model.get('_pageLevelProgress');
          return config === null || config === void 0 ? void 0 : config._isEnabled;
        });
      }
    }, {
      key: "unavailableInHierarchy",
      value: function unavailableInHierarchy(parents) {
        if (!parents) return;
        return parents.some(function (parent) {
          return !parent.get('_isAvailable');
        });
      }
    }, {
      key: "filterAvailableChildren",
      value: function filterAvailableChildren(children) {
        var availableChildren = [];

        for (var i = 0, count = children.length; i < count; i++) {
          var parents = children[i].getAncestorModels();
          if (this.unavailableInHierarchy(parents)) continue;
          availableChildren.push(children[i]);
        }

        return availableChildren;
      }
    }, {
      key: "calculatePercentageComplete",
      value: function calculatePercentageComplete(model) {
        var completionObject = this.calculateCompletion(model);
        var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;
        var total = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;
        var percentageComplete = Math.floor(completed / total * 100);
        return percentageComplete;
      }
    }]);

    return Completion;
  }(Backbone.Controller);

  var completionCalculations = __AMD("extensions/adapt-contrib-pageLevelProgress/js/completionCalculations", Adapt.completion = new Completion());

  var PageLevelProgressIndicatorView = function (_Backbone$View) {
    _inherits(PageLevelProgressIndicatorView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressIndicatorView);

    function PageLevelProgressIndicatorView() {
      _classCallCheck(this, PageLevelProgressIndicatorView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressIndicatorView, [{
      key: "initialize",
      value: function initialize(options) {
        options = options || {};
        this.parent = options.parent;
        this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;
        this.ariaLabel = options.ariaLabel || '';
        this.type = options.type || this.model.get('_type');
        this.addClasses();
        this.setUpEventListeners();
        this.setPercentageComplete();
        this.render();
        this.refresh();
      }
    }, {
      key: "addClasses",
      value: function addClasses() {
        this.$el.addClass(['pagelevelprogress__indicator', 'is-' + this.type].join(' '));
      }
    }, {
      key: "checkAria",
      value: function checkAria() {
        if (!this.ariaLabel) {
          this.$el.attr('aria-hidden', true);
          return;
        }

        var data = this.getRenderData();
        this.$('.js-indicator-aria-label').html(Handlebars.compile(this.ariaLabel)(data));
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        if (this.parent) {
          this.listenToOnce(this.parent, 'postRemove', this.remove);
        } else {
          this.listenTo(Adapt, 'remove', this.remove);
        }

        this.listenTo(this.model, 'change:_isComplete', this.refresh);
        if (!this.collection) return;
        this.listenTo(this.collection, 'change:_isComplete', this.refresh);
      }
    }, {
      key: "setPercentageComplete",
      value: function setPercentageComplete() {
        var percentage = this.calculatePercentage();
        this.model.set('percentageComplete', percentage);
        return percentage;
      }
    }, {
      key: "calculatePercentage",
      value: function calculatePercentage() {
        return this.model.get('_isComplete') ? 100 : 0;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.getRenderData();
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "getRenderData",
      value: function getRenderData() {
        var data = this.model.toJSON();
        data.ariaLabel = this.ariaLabel;
        data.type = this.type;
        return data;
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.checkCompletion();
        this.checkAria();
        this.$('.js-indicator-bar').css({
          width: this.calculatePercentage() + '%'
        });
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var percentage = this.setPercentageComplete();
        this.$el.toggleClass('is-complete', percentage === 100).toggleClass('is-incomplete', percentage !== 100);
      }
    }]);

    return PageLevelProgressIndicatorView;
  }(Backbone.View);

  PageLevelProgressIndicatorView.template = 'pageLevelProgressIndicator';
  var PageLevelProgressIndicatorView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView", PageLevelProgressIndicatorView);

  var PageLevelProgressItemView = function (_Backbone$View) {
    _inherits(PageLevelProgressItemView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressItemView);

    function PageLevelProgressItemView() {
      _classCallCheck(this, PageLevelProgressItemView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressItemView, [{
      key: "className",
      value: function className() {
        return ['pagelevelprogress__item drawer__item', this.model.get('_type') + '__indicator'].join(' ');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'listitem'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'remove', this.remove);
        this.render();
        this.addIndicator();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "addIndicator",
      value: function addIndicator() {
        if (this.model.get('_isOptional')) return;
        var item = new PageLevelProgressIndicatorView$1({
          model: this.model
        });
        this.$('.js-indicator').append(item.$el);
      }
    }]);

    return PageLevelProgressItemView;
  }(Backbone.View);

  PageLevelProgressItemView.template = 'pageLevelProgressItem';
  var PageLevelProgressItemView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView", PageLevelProgressItemView);

  var PageLevelProgressView = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView", function (_Backbone$View) {
    _inherits(PageLevelProgressView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressView);

    function PageLevelProgressView() {
      _classCallCheck(this, PageLevelProgressView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressView, [{
      key: "className",
      value: function className() {
        return 'pagelevelprogress';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-pagelevelprogress-item-click': 'scrollToPageElement'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'remove', this.remove);
        this.render();
        this.addChildren();
      }
    }, {
      key: "scrollToPageElement",
      value: function () {
        var _scrollToPageElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
          var $target, id, model, currentComponentSelector;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (event && event.preventDefault) event.preventDefault();
                  $target = $(event.currentTarget);

                  if (!$target.is('.is-disabled')) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt("return");

                case 4:
                  id = $target.attr('data-pagelevelprogress-id');
                  model = Adapt.findById(id);

                  if (model.get('_isRendered')) {
                    _context.next = 15;
                    break;
                  }

                  _context.prev = 7;
                  _context.next = 10;
                  return Adapt.parentView.renderTo(id);

                case 10:
                  _context.next = 15;
                  break;

                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](7);
                  return _context.abrupt("return");

                case 15:
                  currentComponentSelector = ".".concat(id);
                  Adapt.once('drawer:closed', function () {
                    Adapt.scrollTo(currentComponentSelector, {
                      duration: 400
                    });
                  }).trigger('drawer:closeDrawer', $(currentComponentSelector));

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[7, 12]]);
        }));

        function scrollToPageElement(_x) {
          return _scrollToPageElement.apply(this, arguments);
        }

        return scrollToPageElement;
      }()
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.pageLevelProgress;
        this.$el.html(template({}));
      }
    }, {
      key: "addChildren",
      value: function addChildren() {
        var $children = this.$('.js-children');
        this.collection.each(function (model) {
          $children.append(new PageLevelProgressItemView$1({
            model: model
          }).$el);
        });
      }
    }]);

    return PageLevelProgressView;
  }(Backbone.View));

  var PageLevelProgressNavigationView = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView", function (_Backbone$View) {
    _inherits(PageLevelProgressNavigationView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressNavigationView);

    function PageLevelProgressNavigationView() {
      _classCallCheck(this, PageLevelProgressNavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressNavigationView, [{
      key: "tagName",
      value: function tagName() {
        return 'button';
      }
    }, {
      key: "className",
      value: function className() {
        return 'btn-icon nav__btn nav__pagelevelprogress-btn pagelevelprogress__nav-btn';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          click: 'onProgressClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'updateProgressBar');

        this.setUpEventListeners();
        this.render();
        this.addIndicator();
        this.deferredUpdate();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt, {
          remove: this.remove,
          'router:location': this.updateProgressBar,
          'view:childAdded pageLevelProgress:update': this.refreshProgressBar
        });
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.pageLevelProgressNavigation;
        this.$el.html(template({}));
      }
    }, {
      key: "addIndicator",
      value: function addIndicator() {
        this.indicatorView = new PageLevelProgressIndicatorView$1({
          model: this.model,
          collection: this.collection,
          calculatePercentage: this._getPageCompletionPercentage,
          ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar
        });
        this.$el.prepend(this.indicatorView.$el);
      }
    }, {
      key: "_getPageCompletionPercentage",
      value: function _getPageCompletionPercentage() {
        return completionCalculations.calculatePercentageComplete(this.model);
      }
    }, {
      key: "deferredUpdate",
      value: function deferredUpdate() {
        _.defer(this.updateProgressBar);
      }
    }, {
      key: "updateProgressBar",
      value: function updateProgressBar() {
        this.indicatorView.refresh();
      }
    }, {
      key: "refreshProgressBar",
      value: function refreshProgressBar() {
        this.collection.repopulate();
        this.updateProgressBar();
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        if (event && event.preventDefault) event.preventDefault();
        Adapt.drawer.triggerCustomView(new PageLevelProgressView({
          collection: this.collection
        }).$el, false);
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(PageLevelProgressNavigationView.prototype), "remove", this).call(this);

        this.collection.reset();
      }
    }]);

    return PageLevelProgressNavigationView;
  }(Backbone.View));

  var PageLevelProgressCollection = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection", function (_Backbone$Collection) {
    _inherits(PageLevelProgressCollection, _Backbone$Collection);

    var _super = _createSuper(PageLevelProgressCollection);

    function PageLevelProgressCollection() {
      _classCallCheck(this, PageLevelProgressCollection);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.listenTo(Adapt, 'remove', this.reset);
        if (!(options !== null && options !== void 0 && options.pageModel)) return;
        this._pageModel = options.pageModel;
        this.repopulate();
      }
    }, {
      key: "repopulate",
      value: function repopulate() {
        this.reset();
        if (!this._pageModel) return;

        var allDescendants = this._pageModel.getAllDescendantModels(true);

        var currentPageItems = allDescendants.filter(function (item) {
          return item.get('_isAvailable') === true;
        });
        var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);
        var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);
        this.add(enabledProgressItems);
      }
    }]);

    return PageLevelProgressCollection;
  }(Backbone.Collection));

  var PageLevelProgress = function (_Backbone$Controller) {
    _inherits(PageLevelProgress, _Backbone$Controller);

    var _super = _createSuper(PageLevelProgress);

    function PageLevelProgress() {
      _classCallCheck(this, PageLevelProgress);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgress, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, {
          'app:dataReady': this.onDataReady,
          'app:languageChanged': this.onLanguageChange
        });
      }
    }, {
      key: "getCourseConfig",
      value: function getCourseConfig() {
        return Adapt.course.get('_pageLevelProgress');
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        var coursePLPConfig = this.getCourseConfig();
        if (!(coursePLPConfig !== null && coursePLPConfig !== void 0 && coursePLPConfig._isEnabled)) return;
        this.setUpEventListeners();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange() {
        this.stopListening();
        this.initialize();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var headerIndicatorTypes = ['menu', 'menuItem', 'page', 'article', 'block', 'component'];
        var headerIndicatorEventNames = headerIndicatorTypes.concat(['']).join('View:render ');
        this.listenTo(Adapt, headerIndicatorEventNames, this.renderHeaderIndicatorView);
        this.listenTo(Adapt, {
          'menuItemView:postRender': this.renderMenuItemIndicatorView,
          'router:page': this.renderNavigationView
        });
        this.listenTo(Adapt.course, 'bubble:change:_isComplete', this.onCompletionChange);
      }
    }, {
      key: "onCompletionChange",
      value: function onCompletionChange(event) {
        if (!Adapt.location._currentId) return;
        var currentModel = Adapt.findById(Adapt.location._currentId);
        var completionState = {
          currentLocation: completionCalculations.calculatePercentageComplete(currentModel),
          course: completionCalculations.calculatePercentageComplete(Adapt.course)
        };
        var hasChanged = !_.isMatch(this._previousCompletionState, completionState);
        if (!hasChanged) return;
        this._previousCompletionState = completionState;
        Adapt.trigger('pageLevelProgress:percentageCompleteChange', completionState);
      }
    }, {
      key: "renderHeaderIndicatorView",
      value: function renderHeaderIndicatorView(view) {
        var model = view.model;
        var config = model.get('_pageLevelProgress');
        if (!(config !== null && config !== void 0 && config._isEnabled) || !(config !== null && config !== void 0 && config._isCompletionIndicatorEnabled)) return;
        var pageModel = model.findAncestor('contentObjects');
        var pageConfig = pageModel && pageModel.get('_pageLevelProgress');
        if (!(pageConfig !== null && pageConfig !== void 0 && pageConfig._isEnabled)) return;
        var $headings = view.$('.js-heading');
        $headings.each(function (index, el) {
          var $el = $(el);
          var indicatorView = new PageLevelProgressIndicatorView$1({
            parent: view,
            model: model
          });
          indicatorView.$el.insertAfter($el);
        });
      }
    }, {
      key: "renderMenuItemIndicatorView",
      value: function renderMenuItemIndicatorView(view) {
        if (view.model.get('_id') === Adapt.location._currentId) return;
        var viewType = view.model.get('_type');
        if (viewType === 'course') return;
        var pageLevelProgress = view.model.get('_pageLevelProgress');
        if (!(pageLevelProgress !== null && pageLevelProgress !== void 0 && pageLevelProgress._isEnabled)) return;
        view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView$1({
          parent: view,
          model: view.model,
          type: 'menu-item',
          calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),
          ariaLabel: Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar
        }).$el);
      }
    }, {
      key: "_getMenuItemCompletionPercentage",
      value: function _getMenuItemCompletionPercentage() {
        return completionCalculations.calculatePercentageComplete(this.model);
      }
    }, {
      key: "renderNavigationView",
      value: function renderNavigationView(pageModel) {
        var coursePLPConfig = this.getCourseConfig();
        if ((coursePLPConfig === null || coursePLPConfig === void 0 ? void 0 : coursePLPConfig._isShownInNavigationBar) === false) return;
        var pagePLPConfig = pageModel.get('_pageLevelProgress');
        if (!(pagePLPConfig !== null && pagePLPConfig !== void 0 && pagePLPConfig._isEnabled)) return;
        var collection = new PageLevelProgressCollection(null, {
          pageModel: pageModel
        });
        if (collection.length === 0) return;
        $('.nav__drawer-btn').after(new PageLevelProgressNavigationView({
          model: pageModel,
          collection: collection
        }).$el);
      }
    }]);

    return PageLevelProgress;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress", Adapt.pageLevelProgress = new PageLevelProgress());

  var ResourcesView = __AMD("extensions/adapt-contrib-resources/js/ResourcesView", function (_Backbone$View) {
    _inherits(ResourcesView, _Backbone$View);

    var _super = _createSuper(ResourcesView);

    function ResourcesView() {
      _classCallCheck(this, ResourcesView);

      return _super.apply(this, arguments);
    }

    _createClass(ResourcesView, [{
      key: "className",
      value: function className() {
        return 'resources';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-resources-filter-btn-click': 'onFilterClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        this.$el.html(Handlebars.templates.resources({
          model: this.model.toJSON(),
          resources: this.collection.toJSON()
        }));

        _.defer(function () {
          _this.listenTo(Adapt, 'drawer:triggerCustomView', _this.remove);
        });

        return this;
      }
    }, {
      key: "onFilterClicked",
      value: function onFilterClicked(e) {
        if (e && e.preventDefault) e.preventDefault();
        this.$('.js-resources-filter-btn-click').removeClass('is-selected');
        var items;
        var filter = $(e.currentTarget).addClass('is-selected').attr('data-filter');

        if (filter === 'all') {
          items = this.$('.js-resources-item').removeClass('u-display-none');
        } else {
          this.$('.js-resources-item').removeClass('u-display-none').not('.is-' + filter).addClass('u-display-none');
          items = this.$('.js-resources-item.is-' + filter);
        }

        if (items.length < 0) return;
        Adapt.a11y.focusFirst($(items[0]));
      }
    }]);

    return ResourcesView;
  }(Backbone.View));

  var helpers = {
    resources_has_type: function (resources, type, block) {
      var hasType = resources.some(_.matcher({
        _type: type
      }));
      return hasType ? block.fn(this) : block.inverse(this);
    },
    resources_has_multiple_types: function (resources, block) {
      if (resources.length === 1) return block.inverse(this);
      var allSameType = resources.every(_.matcher({
        _type: resources[0]._type
      }));
      return allSameType ? block.inverse(this) : block.fn(this);
    },
    resources_get_column_count: function (resources) {
      return _.uniq(_.pluck(resources, '_type')).length + 1;
    },
    resources_force_download: function (resource, block) {
      if (Adapt.device.browser === 'internet explorer' || Adapt.device.OS === 'ios') {
        return block.inverse(this);
      }

      return resource._forceDownload || resource.filename ? block.fn(this) : block.inverse(this);
    }
  };

  for (var name in helpers) {
    Handlebars__default['default'].registerHelper(name, helpers[name]);
  }

  __AMD("extensions/adapt-contrib-resources/js/ResourcesHelpers", helpers);

  var Resources = function (_Backbone$Controller) {
    _inherits(Resources, _Backbone$Controller);

    var _super = _createSuper(Resources);

    function Resources() {
      _classCallCheck(this, Resources);

      return _super.apply(this, arguments);
    }

    _createClass(Resources, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'adapt:start', this.initResources);
      }
    }, {
      key: "initResources",
      value: function initResources() {
        var courseResources = Adapt.course.get('_resources');
        if (!courseResources || courseResources._isEnabled === false) return;
        var drawerObject = {
          title: courseResources.title,
          description: courseResources.description,
          className: 'is-resources',
          drawerOrder: courseResources._drawerOrder || 0
        };
        Adapt.drawer.addItem(drawerObject, 'resources:showResources');
        this.setupResources(courseResources);
      }
    }, {
      key: "setupResources",
      value: function setupResources(resourcesData) {
        var model = new Backbone.Model(resourcesData);
        var collection = new Backbone.Collection(model.get('_resourcesItems'));
        this.listenTo(Adapt, 'resources:showResources', function () {
          Adapt.drawer.triggerCustomView(new ResourcesView({
            model: model,
            collection: collection
          }).$el);
        });
      }
    }]);

    return Resources;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-resources/js/adapt-contrib-resources", new Resources());

  var Logger = function () {
    function Logger() {
      _classCallCheck(this, Logger);

      this.logArr = [];
      this.registeredViews = [];
    }

    _createClass(Logger, [{
      key: "getEntries",
      value: function getEntries() {
        return this.logArr;
      }
    }, {
      key: "getLastEntry",
      value: function getLastEntry() {
        return this.logArr[this.logArr.length - 1];
      }
    }, {
      key: "info",
      value: function info(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_INFO,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "warn",
      value: function warn(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_WARN,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "error",
      value: function error(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_ERROR,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "debug",
      value: function debug(str) {
        this.logArr[this.logArr.length] = {
          str: str,
          type: Logger.LOG_TYPE_DEBUG,
          time: Date.now()
        };
        this.updateViews();
      }
    }, {
      key: "registerView",
      value: function registerView(_view) {
        this.registeredViews[this.registeredViews.length] = _view;
      }
    }, {
      key: "unregisterView",
      value: function unregisterView(_view) {
        for (var i = 0, l = this.registeredViews.length; i < l; i++) {
          if (this.registeredViews[i] !== _view) continue;
          this.registeredViews.splice(i, 1);
          i--;
        }
      }
    }, {
      key: "updateViews",
      value: function updateViews() {
        for (var i = 0, l = this.registeredViews.length; i < l; i++) {
          if (!this.registeredViews[i]) continue;
          this.registeredViews[i].update(this);
        }
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (Logger.instance === null) {
          Logger.instance = new Logger();
        }

        return Logger.instance;
      }
    }]);

    return Logger;
  }();

  Logger.instance = null;
  Logger.LOG_TYPE_INFO = 0;
  Logger.LOG_TYPE_WARN = 1;
  Logger.LOG_TYPE_ERROR = 2;
  Logger.LOG_TYPE_DEBUG = 3;
  var Logger$1 = __AMD("extensions/adapt-contrib-spoor/js/scorm/logger", window.Logger = Logger);

  var ScormError = function ScormError(name) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ScormError);

    this.name = name;
    this.data = data;
  };

  ScormError.CLIENT_COULD_NOT_CONNECT = 'CLIENT_COULD_NOT_CONNECT';
  ScormError.SERVER_STATUS_UNSUPPORTED = 'SERVER_STATUS_UNSUPPORTED';
  ScormError.CLIENT_STATUS_UNSUPPORTED = 'CLIENT_STATUS_UNSUPPORTED';
  ScormError.CLIENT_COULD_NOT_COMMIT = 'CLIENT_COULD_NOT_COMMIT';
  ScormError.CLIENT_NOT_CONNECTED = 'CLIENT_NOT_CONNECTED';
  ScormError.CLIENT_COULD_NOT_FINISH = 'CLIENT_COULD_NOT_FINISH';
  ScormError.CLIENT_COULD_NOT_GET_PROPERTY = 'CLIENT_COULD_NOT_GET_PROPERTY';
  ScormError.CLIENT_COULD_NOT_SET_PROPERTY = 'CLIENT_COULD_NOT_SET_PROPERTY';
  ScormError.CLIENT_INVALID_CHOICE_VALUE = 'CLIENT_INVALID_CHOICE_VALUE';
  ScormError.defaultMessages = {
    title: 'An error has occurred',
    pressOk: 'Press \'OK\' to view detailed debug information to send to technical support.',
    CLIENT_COULD_NOT_CONNECT: 'The course could not connect to the Learning Management System',
    SERVER_STATUS_UNSUPPORTED: 'An invalid lesson status of \'{{{status}}}\' was received from Learning Management System',
    CLIENT_STATUS_UNSUPPORTED: 'The status \'{{{status}}}\' is not supported.',
    CLIENT_COULD_NOT_COMMIT: 'There was a problem saving data to the Learning Management System\n\nError: {{errorCode}} - {{{errorInfo}}}\nLMS Error Info: {{{diagnosticInfo}}}',
    CLIENT_NOT_CONNECTED: 'The course is not connected to the Learning Management System',
    CLIENT_COULD_NOT_FINISH: 'The course was unable to terminate the learning session\n\nError: {{errorCode}} - {{{errorInfo}}}\nLMS Error Info: {{{diagnosticInfo}}}',
    CLIENT_COULD_NOT_GET_PROPERTY: 'Unable to get the value of {{property}} from the Learning Management System\n\nError: {{errorCode}} - {{{errorInfo}}}\nLMS Error Info: {{{diagnosticInfo}}}',
    CLIENT_COULD_NOT_SET_PROPERTY: 'Unable to set {{property}} to: \'{{{value}}}\'\n\nError: {{errorCode}} - {{{errorInfo}}}\nLMS Error Info: {{{diagnosticInfo}}}',
    CLIENT_INVALID_CHOICE_VALUE: 'Numeric choice/matching response elements must use a value from 0 to 35 in SCORM 1.2'
  };
  var ScormError$1 = __AMD("extensions/adapt-contrib-spoor/js/scorm/error", ScormError);

  var CLIENT_COULD_NOT_CONNECT = ScormError$1.CLIENT_COULD_NOT_CONNECT,
      SERVER_STATUS_UNSUPPORTED = ScormError$1.SERVER_STATUS_UNSUPPORTED,
      CLIENT_STATUS_UNSUPPORTED = ScormError$1.CLIENT_STATUS_UNSUPPORTED,
      CLIENT_COULD_NOT_COMMIT = ScormError$1.CLIENT_COULD_NOT_COMMIT,
      CLIENT_NOT_CONNECTED = ScormError$1.CLIENT_NOT_CONNECTED,
      CLIENT_COULD_NOT_FINISH = ScormError$1.CLIENT_COULD_NOT_FINISH,
      CLIENT_COULD_NOT_GET_PROPERTY = ScormError$1.CLIENT_COULD_NOT_GET_PROPERTY,
      CLIENT_COULD_NOT_SET_PROPERTY = ScormError$1.CLIENT_COULD_NOT_SET_PROPERTY,
      CLIENT_INVALID_CHOICE_VALUE = ScormError$1.CLIENT_INVALID_CHOICE_VALUE;

  var ScormWrapper = function () {
    function ScormWrapper() {
      var _window$API, _window, _window$API_1484_;

      _classCallCheck(this, ScormWrapper);

      this.setCompletedWhenFailed = true;
      this.commitOnStatusChange = true;
      this.commitOnAnyChange = false;
      this.timedCommitFrequency = 10;
      this.maxCommitRetries = 5;
      this.commitRetryDelay = 1000;
      this.commitRetryPending = false;
      this.commitRetries = 0;
      this.lastCommitSuccessTime = null;
      this.exitStateIfIncomplete = 'auto';
      this.exitStateIfComplete = 'auto';
      this.timedCommitIntervalID = null;
      this.retryCommitTimeoutID = null;
      this.logOutputWin = null;
      this.startTime = null;
      this.endTime = null;
      this.lmsConnected = false;
      this.finishCalled = false;
      this.logger = Logger$1.getInstance();
      this.scorm = pipwerks__default['default'].SCORM;
      this.scorm.handleExitMode = false;
      this.suppressErrors = false;
      this.debouncedCommit = _.debounce(this.commit.bind(this), 100);

      if (window.__debug) {
        this.showDebugWindow();
      }

      if (!((_window$API = window.API) !== null && _window$API !== void 0 && _window$API.__offlineAPIWrapper && (_window = window) !== null && _window !== void 0 && (_window$API_1484_ = _window.API_1484_11) !== null && _window$API_1484_ !== void 0 && _window$API_1484_.__offlineAPIWrapper)) return;
      this.logger.error('Offline SCORM API is being used. No data will be reported to the LMS!');
    }

    _createClass(ScormWrapper, [{
      key: "getVersion",
      value: function getVersion() {
        return this.scorm.version;
      }
    }, {
      key: "setVersion",
      value: function setVersion(value) {
        this.logger.debug("ScormWrapper::setVersion: ".concat(value));
        this.scorm.version = value;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.logger.debug('ScormWrapper::initialize');
        this.lmsConnected = this.scorm.init();

        if (!this.lmsConnected) {
          this.handleError(new ScormError$1(CLIENT_COULD_NOT_CONNECT));
          return this.lmsConnected;
        }

        this.startTime = new Date();
        this.initTimedCommit();
        return this.lmsConnected;
      }
    }, {
      key: "isFirstSession",
      value: function isFirstSession() {
        return this.getValue(this.isSCORM2004() ? 'cmi.entry' : 'cmi.core.entry') === 'ab-initio';
      }
    }, {
      key: "setIncomplete",
      value: function setIncomplete() {
        this.setValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status', 'incomplete');
        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setCompleted",
      value: function setCompleted() {
        this.setValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status', 'completed');
        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setPassed",
      value: function setPassed() {
        if (this.isSCORM2004()) {
          this.setValue('cmi.completion_status', 'completed');
          this.setValue('cmi.success_status', 'passed');
        } else {
          this.setValue('cmi.core.lesson_status', 'passed');
        }

        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "setFailed",
      value: function setFailed() {
        if (this.isSCORM2004()) {
          this.setValue('cmi.success_status', 'failed');

          if (this.setCompletedWhenFailed) {
            this.setValue('cmi.completion_status', 'completed');
          }
        } else {
          this.setValue('cmi.core.lesson_status', 'failed');
        }

        if (this.commitOnStatusChange && !this.commitOnAnyChange) this.commit();
      }
    }, {
      key: "getStatus",
      value: function getStatus() {
        var status = this.getValue(this.isSCORM2004() ? 'cmi.completion_status' : 'cmi.core.lesson_status');

        switch (status.toLowerCase()) {
          case 'passed':
          case 'completed':
          case 'incomplete':
          case 'failed':
          case 'browsed':
          case 'not attempted':
          case 'not_attempted':
          case 'unknown':
            return status;

          default:
            this.handleError(new ScormError$1(SERVER_STATUS_UNSUPPORTED, {
              status: status
            }));
            return null;
        }
      }
    }, {
      key: "setStatus",
      value: function setStatus(status) {
        switch (status.toLowerCase()) {
          case 'incomplete':
            this.setIncomplete();
            break;

          case 'completed':
            this.setCompleted();
            break;

          case 'passed':
            this.setPassed();
            break;

          case 'failed':
            this.setFailed();
            break;

          default:
            this.handleError(new ScormError$1(CLIENT_STATUS_UNSUPPORTED, {
              status: status
            }));
        }
      }
    }, {
      key: "getScore",
      value: function getScore() {
        return this.getValue(this.isSCORM2004() ? 'cmi.score.raw' : 'cmi.core.score.raw');
      }
    }, {
      key: "setScore",
      value: function setScore(score) {
        var minScore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var maxScore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;

        if (this.isSCORM2004()) {
          this.setValue('cmi.score.raw', score);
          this.setValue('cmi.score.min', minScore);
          this.setValue('cmi.score.max', maxScore);
          var range = maxScore - minScore;
          var scaledScore = ((score - minScore) / range).toFixed(7);
          this.setValue('cmi.score.scaled', scaledScore);
          return;
        }

        this.setValue('cmi.core.score.raw', score);
        if (this.isSupported('cmi.core.score.min')) this.setValue('cmi.core.score.min', minScore);
        if (this.isSupported('cmi.core.score.max')) this.setValue('cmi.core.score.max', maxScore);
      }
    }, {
      key: "getLessonLocation",
      value: function getLessonLocation() {
        return this.getValue(this.isSCORM2004() ? 'cmi.location' : 'cmi.core.lesson_location');
      }
    }, {
      key: "setLessonLocation",
      value: function setLessonLocation(location) {
        this.setValue(this.isSCORM2004() ? 'cmi.location' : 'cmi.core.lesson_location', location);
      }
    }, {
      key: "getSuspendData",
      value: function getSuspendData() {
        return this.getValue('cmi.suspend_data');
      }
    }, {
      key: "setSuspendData",
      value: function setSuspendData(data) {
        this.setValue('cmi.suspend_data', data);
      }
    }, {
      key: "getStudentName",
      value: function getStudentName() {
        return this.getValue(this.isSCORM2004() ? 'cmi.learner_name' : 'cmi.core.student_name');
      }
    }, {
      key: "getStudentId",
      value: function getStudentId() {
        return this.getValue(this.isSCORM2004() ? 'cmi.learner_id' : 'cmi.core.student_id');
      }
    }, {
      key: "setLanguage",
      value: function setLanguage(lang) {
        if (this.isSCORM2004()) {
          this.setValue('cmi.learner_preference.language', lang);
          return;
        }

        if (!this.isSupported('cmi.student_preference.language')) return;
        this.setValue('cmi.student_preference.language', lang);
      }
    }, {
      key: "commit",
      value: function commit() {
        this.logger.debug('ScormWrapper::commit');

        if (!this.lmsConnected) {
          this.handleError(new ScormError$1(ScormError$1.CLIENT_NOT_CONNECTED));
          return;
        }

        if (this.commitRetryPending) {
          this.logger.debug('ScormWrapper::commit: skipping this commit call as one is already pending.');
          return;
        }

        if (this.scorm.save()) {
          this.commitRetries = 0;
          this.lastCommitSuccessTime = new Date();
          Adapt.trigger('spoor:commit', this);
          return;
        }

        if (this.commitRetries < this.maxCommitRetries && !this.finishCalled) {
          this.commitRetries++;
          this.initRetryCommit();
          return;
        }

        var errorCode = this.scorm.debug.getCode();
        this.handleError(new ScormError$1(CLIENT_COULD_NOT_COMMIT, {
          errorCode: errorCode,
          errorInfo: this.scorm.debug.getInfo(errorCode),
          diagnosticInfo: this.scorm.debug.getDiagnosticInfo(errorCode)
        }));
      }
    }, {
      key: "finish",
      value: function finish() {
        this.logger.debug('ScormWrapper::finish');

        if (!this.lmsConnected || this.finishCalled) {
          this.handleError(new ScormError$1(CLIENT_NOT_CONNECTED));
          return;
        }

        this.finishCalled = true;

        if (this.timedCommitIntervalID !== null) {
          window.clearInterval(this.timedCommitIntervalID);
        }

        if (this.commitRetryPending) {
          window.clearTimeout(this.retryCommitTimeoutID);
          this.commitRetryPending = false;
        }

        if (this.logOutputWin && !this.logOutputWin.closed) {
          this.logOutputWin.close();
        }

        this.endTime = new Date();

        if (this.isSCORM2004()) {
          this.scorm.set('cmi.session_time', this.convertToSCORM2004Time(this.endTime.getTime() - this.startTime.getTime()));
          this.scorm.set('cmi.exit', this.getExitState());
        } else {
          this.scorm.set('cmi.core.session_time', this.convertToSCORM12Time(this.endTime.getTime() - this.startTime.getTime()));
          this.scorm.set('cmi.core.exit', this.getExitState());
        }

        this.lmsConnected = false;
        if (this.scorm.quit()) return;
        var errorCode = this.scorm.debug.getCode();
        this.handleError(new ScormError$1(CLIENT_COULD_NOT_FINISH, {
          errorCode: errorCode,
          errorInfo: this.scorm.debug.getInfo(errorCode),
          diagnosticInfo: this.scorm.debug.getDiagnosticInfo(errorCode)
        }));
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction(id, response, correct, latency, type) {
        if (!this.isSupported('cmi.interactions._count')) {
          this.logger.info('ScormWrapper::recordInteraction: cmi.interactions are not supported by this LMS...');
          return;
        }

        switch (type) {
          case 'choice':
            this.recordInteractionMultipleChoice.apply(this, arguments);
            break;

          case 'matching':
            this.recordInteractionMatching.apply(this, arguments);
            break;

          case 'numeric':
            this.isSCORM2004() ? this.recordInteractionScorm2004.apply(this, arguments) : this.recordInteractionScorm12.apply(this, arguments);
            break;

          case 'fill-in':
            this.recordInteractionFillIn.apply(this, arguments);
            break;

          default:
            console.error("ScormWrapper.recordInteraction: unknown interaction type of '".concat(type, "' encountered..."));
        }
      }
    }, {
      key: "getValue",
      value: function getValue(property) {
        this.logger.debug("ScormWrapper::getValue: _property=".concat(property));

        if (this.finishCalled) {
          this.logger.debug('ScormWrapper::getValue: ignoring request as \'finish\' has been called');
          return;
        }

        if (!this.lmsConnected) {
          this.handleError(new ScormError$1(CLIENT_NOT_CONNECTED));
          return;
        }

        var value = this.scorm.get(property);
        var errorCode = this.scorm.debug.getCode();

        switch (errorCode) {
          case 0:
            break;

          case 403:
            this.logger.warn('ScormWrapper::getValue: data model element not initialized');
            break;

          default:
            this.handleError(new ScormError$1(CLIENT_COULD_NOT_GET_PROPERTY, {
              property: property,
              errorCode: errorCode,
              errorInfo: this.scorm.debug.getInfo(errorCode),
              diagnosticInfo: this.scorm.debug.getDiagnosticInfo(errorCode)
            }));
        }

        this.logger.debug("ScormWrapper::getValue: returning ".concat(value));
        return value + '';
      }
    }, {
      key: "setValue",
      value: function setValue(property, value) {
        this.logger.debug("ScormWrapper::setValue: _property=".concat(property, " _value=").concat(value));

        if (this.finishCalled) {
          this.logger.debug('ScormWrapper::setValue: ignoring request as \'finish\' has been called');
          return;
        }

        if (!this.lmsConnected) {
          this.handleError(new ScormError$1(CLIENT_NOT_CONNECTED));
          return;
        }

        var success = this.scorm.set(property, value);

        if (!success) {
          var errorCode = this.scorm.debug.getCode();

          if (errorCode !== 0) {
            this.handleError(new ScormError$1(CLIENT_COULD_NOT_SET_PROPERTY, {
              property: property,
              value: value,
              errorCode: errorCode,
              errorInfo: this.scorm.debug.getInfo(errorCode),
              diagnosticInfo: this.scorm.debug.getDiagnosticInfo(errorCode)
            }));
            return success;
          }

          this.logger.warn('ScormWrapper::setValue: LMS reported that the \'set\' call failed but then said there was no error!');
        }

        if (this.commitOnAnyChange) this.debouncedCommit();
        return success;
      }
    }, {
      key: "isSupported",
      value: function isSupported(property) {
        this.logger.debug("ScormWrapper::isSupported: _property=".concat(property));

        if (this.finishCalled) {
          this.logger.debug('ScormWrapper::isSupported: ignoring request as \'finish\' has been called');
          return;
        }

        if (!this.lmsConnected) {
          this.handleError(new ScormError$1(CLIENT_NOT_CONNECTED));
          return false;
        }

        this.scorm.get(property);
        return this.scorm.debug.getCode() !== 401;
      }
    }, {
      key: "initTimedCommit",
      value: function initTimedCommit() {
        this.logger.debug('ScormWrapper::initTimedCommit');

        if (!this.commitOnAnyChange && this.timedCommitFrequency > 0) {
          var delay = this.timedCommitFrequency * (60 * 1000);
          this.timedCommitIntervalID = window.setInterval(this.commit.bind(this), delay);
        }
      }
    }, {
      key: "initRetryCommit",
      value: function initRetryCommit() {
        this.logger.debug("ScormWrapper::initRetryCommit ".concat(this.commitRetries, " out of ").concat(this.maxCommitRetries));
        this.commitRetryPending = true;
        this.retryCommitTimeoutID = window.setTimeout(this.doRetryCommit.bind(this), this.commitRetryDelay);
      }
    }, {
      key: "doRetryCommit",
      value: function doRetryCommit() {
        this.logger.debug('ScormWrapper::doRetryCommit');
        this.commitRetryPending = false;
        this.commit();
      }
    }, {
      key: "handleError",
      value: function handleError(error) {
        if (!Adapt.get('_isStarted')) {
          Adapt.once('contentObjectView:ready', this.handleError.bind(this, error));
          return;
        }

        if ('value' in error.data) {
          if (error.data.value.length && error.data.value.length > 80) error.data.value = error.data.value.slice(0, 80) + '...';
          if (error.data.value === '') error.data.value = '\'\'';
        }

        var config = Adapt.course.get('_spoor');
        var messages = Object.assign({}, ScormError$1.defaultMessages, config && config._messages);
        var message = Handlebars.compile(messages[error.name])(error.data);

        switch (error.name) {
          case CLIENT_COULD_NOT_CONNECT:
            Adapt.notify.popup({
              _isCancellable: false,
              title: messages.title,
              body: message
            });
            return;
        }

        this.logger.error(message);

        if (!this.suppressErrors && (!this.logOutputWin || this.logOutputWin.closed) && confirm("".concat(messages.title, ":\n\n").concat(message, "\n\n").concat(messages.pressOk))) {
          this.showDebugWindow();
        }
      }
    }, {
      key: "getInteractionCount",
      value: function getInteractionCount() {
        var count = this.getValue('cmi.interactions._count');
        return count === '' ? 0 : count;
      }
    }, {
      key: "recordInteractionScorm12",
      value: function recordInteractionScorm12(id, response, correct, latency, type) {
        id = id.trim();
        var cmiPrefix = "cmi.interactions.".concat(this.getInteractionCount());
        this.setValue("".concat(cmiPrefix, ".id"), id);
        this.setValue("".concat(cmiPrefix, ".type"), type);
        this.setValue("".concat(cmiPrefix, ".student_response"), response);
        this.setValue("".concat(cmiPrefix, ".result"), correct ? 'correct' : 'wrong');
        if (latency !== null && latency !== undefined) this.setValue("".concat(cmiPrefix, ".latency"), this.convertToSCORM12Time(latency));
        this.setValue("".concat(cmiPrefix, ".time"), this.getCMITime());
      }
    }, {
      key: "recordInteractionScorm2004",
      value: function recordInteractionScorm2004(id, response, correct, latency, type) {
        id = id.trim();
        var cmiPrefix = "cmi.interactions.".concat(this.getInteractionCount());
        this.setValue("".concat(cmiPrefix, ".id"), id);
        this.setValue("".concat(cmiPrefix, ".type"), type);
        this.setValue("".concat(cmiPrefix, ".learner_response"), response);
        this.setValue("".concat(cmiPrefix, ".result"), correct ? 'correct' : 'incorrect');
        if (latency !== null && latency !== undefined) this.setValue("".concat(cmiPrefix, ".latency"), this.convertToSCORM2004Time(latency));
        this.setValue("".concat(cmiPrefix, ".timestamp"), this.getISO8601Timestamp());
      }
    }, {
      key: "recordInteractionMultipleChoice",
      value: function recordInteractionMultipleChoice(id, response, correct, latency, type) {
        if (this.isSCORM2004()) {
          response = response.replace(/,|#/g, '[,]');
        } else {
          response = response.replace(/#/g, ',');
          response = this.checkResponse(response, 'choice');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "recordInteractionMatching",
      value: function recordInteractionMatching(id, response, correct, latency, type) {
        response = response.replace(/#/g, ',');

        if (this.isSCORM2004()) {
          response = response.replace(/,/g, '[,]');
          response = response.replace(/\./g, '[.]');
        } else {
          response = this.checkResponse(response, 'matching');
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "recordInteractionFillIn",
      value: function recordInteractionFillIn(id, response, correct, latency, type) {
        var maxLength = this.isSCORM2004() ? 250 : 255;

        if (response.length > maxLength) {
          response = response.substr(0, maxLength);
          this.logger.warn("ScormWrapper::recordInteractionFillIn: response data for ".concat(id, " is longer than the maximum allowed length of ").concat(maxLength, " characters; data will be truncated to avoid an error."));
        }

        var scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;
        scormRecordInteraction.call(this, id, response, correct, latency, type);
      }
    }, {
      key: "showDebugWindow",
      value: function showDebugWindow() {
        if (this.logOutputWin && !this.logOutputWin.closed) {
          this.logOutputWin.close();
        }

        this.logOutputWin = window.open('log_output.html', 'Log', 'width=600,height=300,status=no,scrollbars=yes,resizable=yes,menubar=yes,toolbar=yes,location=yes,top=0,left=0');
        if (!this.logOutputWin) return;
        this.logOutputWin.focus();
      }
    }, {
      key: "convertToSCORM12Time",
      value: function convertToSCORM12Time(msConvert) {
        var msPerSec = 1000;
        var msPerMin = msPerSec * 60;
        var msPerHour = msPerMin * 60;
        var ms = msConvert % msPerSec;
        msConvert = msConvert - ms;
        var secs = msConvert % msPerMin;
        msConvert = msConvert - secs;
        secs = secs / msPerSec;
        var mins = msConvert % msPerHour;
        msConvert = msConvert - mins;
        mins = mins / msPerMin;
        var hrs = msConvert / msPerHour;

        if (hrs > 9999) {
          return '9999:99:99.99';
        }

        var str = [this.padWithZeroes(hrs, 4), this.padWithZeroes(mins, 2), this.padWithZeroes(secs, 2)].join(':');
        return "".concat(str, ".").concat(Math.floor(ms / 10));
      }
    }, {
      key: "convertToSCORM2004Time",
      value: function convertToSCORM2004Time(msConvert) {
        var csConvert = Math.floor(msConvert / 10);
        var csPerSec = 100;
        var csPerMin = csPerSec * 60;
        var csPerHour = csPerMin * 60;
        var csPerDay = csPerHour * 24;
        var days = Math.floor(csConvert / csPerDay);
        csConvert -= days * csPerDay;
        days = days ? days + 'D' : '';
        var hours = Math.floor(csConvert / csPerHour);
        csConvert -= hours * csPerHour;
        hours = hours ? hours + 'H' : '';
        var mins = Math.floor(csConvert / csPerMin);
        csConvert -= mins * csPerMin;
        mins = mins ? mins + 'M' : '';
        var secs = Math.floor(csConvert / csPerSec);
        csConvert -= secs * csPerSec;
        secs = secs || '0';
        var cs = csConvert;
        cs = cs ? '.' + cs : '';
        var seconds = secs + cs + 'S';
        var hms = [hours, mins, seconds].join('');
        return 'P' + days + 'T' + hms;
      }
    }, {
      key: "getCMITime",
      value: function getCMITime() {
        var date = new Date();
        var hours = this.padWithZeroes(date.getHours(), 2);
        var min = this.padWithZeroes(date.getMinutes(), 2);
        var sec = this.padWithZeroes(date.getSeconds(), 2);
        return [hours, min, sec].join(':');
      }
    }, {
      key: "getISO8601Timestamp",
      value: function getISO8601Timestamp() {
        var date = new Date().toISOString();
        return date.replace(/.\d\d\dZ/, '');
      }
    }, {
      key: "padWithZeroes",
      value: function padWithZeroes(numToPad, padBy) {
        var len = padBy;

        while (--len) {
          numToPad = '0' + numToPad;
        }

        return numToPad.slice(-padBy);
      }
    }, {
      key: "isSCORM2004",
      value: function isSCORM2004() {
        return this.scorm.version === '2004';
      }
    }, {
      key: "checkResponse",
      value: function checkResponse(response, responseType) {
        if (!response) return response;
        if (responseType !== 'choice' && responseType !== 'matching') return response;
        response = response.split(/,|#/);
        var self = this;

        if (responseType === 'choice') {
          response = response.map(checkIdentifier);
        } else {
          response = response.map(function (r) {
            var identifiers = r.split('.');
            return checkIdentifier(identifiers[0]) + '.' + checkIdentifier(identifiers[1]);
          });
        }

        function checkIdentifier(r) {
          if (r.length === 1 && r >= '0' && r <= '9') return r;
          if (r.length === 1 && r >= 'a' && r <= 'z') return r;
          var i = parseInt(r);

          if (isNaN(i) || i < 10 || i > 35) {
            self.handleError(new ScormError$1(CLIENT_INVALID_CHOICE_VALUE));
          }

          return Number(i).toString(36);
        }

        return response.join(',');
      }
    }, {
      key: "getExitState",
      value: function getExitState() {
        var completionStatus = this.scorm.data.completionStatus;
        var isIncomplete = completionStatus === 'incomplete' || completionStatus === 'not attempted';
        var exitState = isIncomplete ? this.exitStateIfIncomplete : this.exitStateIfComplete;
        if (exitState !== 'auto') return exitState;
        if (this.isSCORM2004()) return isIncomplete ? 'suspend' : 'normal';
        return '';
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (ScormWrapper.instance === null) {
          ScormWrapper.instance = new ScormWrapper();
        }

        return ScormWrapper.instance;
      }
    }]);

    return ScormWrapper;
  }();

  ScormWrapper.instance = null;
  var ScormWrapper$1 = __AMD("extensions/adapt-contrib-spoor/js/scorm/wrapper", ScormWrapper);

  var LZMAWorker = window.LZMAFactory('./libraries/lzma_worker-min.js');
  var ZeroString = {};

  function makeZeroString(length) {
    ZeroString[length] = ZeroString[length] || new Array(length + 1).join('0');
    return ZeroString[length];
  }

  for (var i$1 = 1, l = 64; i$1 <= l; i$1++) {
    makeZeroString(i$1);
  }

  function zeroPadRightToLength(string, length) {
    var padLength = length - string.length;

    if (padLength > 0) {
      string += makeZeroString(padLength);
    }

    return string;
  }

  function zeroPadLeftToLength(string, length) {
    var padLength = length - string.length;

    if (padLength > 0) {
      string = makeZeroString(padLength) + string;
    }

    return string;
  }

  function zeroPadRightToMultiple(string, multiple) {
    var padLength = multiple - string.length % multiple;

    if (padLength !== multiple) {
      string += makeZeroString(padLength);
    }

    return string;
  }

  function binaryToUnsignedInteger(binary, binaryLength) {
    if (binaryLength === 0) {
      return 0;
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var integer = parseInt(binary.slice(0, binaryLength), 2);
    return integer;
  }

  function shiftUnsignedIntegerFromBinary(binary, binaryLength) {
    if (binaryLength === 0) {
      return [0, binary];
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var integer = parseInt(binary.slice(0, binaryLength), 2);
    binary = binary.slice(binaryLength);
    return [integer, binary];
  }

  function shiftBinary(binary, binaryLength) {
    if (binaryLength === 0) {
      return ['', binary];
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    var shifted = binary.slice(0, binaryLength);
    binary = binary.slice(binaryLength);
    return [shifted, binary];
  }

  function unsignedIntegerToBinary(integer, binaryLength) {
    if (binaryLength === 0) {
      return '';
    }

    var binary = Math.abs(integer).toString(2);

    if (typeof binaryLength === 'undefined') {
      return binary;
    }

    var length = binary.length;

    if (length > binaryLength) {
      throw new Error("Integer too big for specified binary length. integer: ".concat(integer, " binarylen: ").concat(binaryLength));
    }

    binary = zeroPadLeftToLength(binary, binaryLength);
    return binary;
  }

  function byteArrayToString(array) {
    var arrayLength = array.length;
    var string = new Array(arrayLength);

    for (var _i = 0, _l = arrayLength; _i < _l; _i++) {
      string[_i] = String.fromCharCode(array[_i]);
    }

    string = string.join('');
    return string;
  }

  function stringToByteArray(string) {
    var stringLength = string.length;
    var array = new Array(stringLength);

    for (var _i2 = 0, _l2 = stringLength; _i2 < _l2; _i2++) {
      array[_i2] = string.charCodeAt(_i2);
    }

    return array;
  }

  var BYTE_BIT_LENGTH = 8;

  function binaryToBase64(binary) {
    binary = ___default['default'].flatten(binary).join('');
    binary = zeroPadRightToMultiple(binary, BYTE_BIT_LENGTH);
    var bytesCount = binary.length / BYTE_BIT_LENGTH;
    var charCodes = new Array(bytesCount);

    for (var _i3 = 0, _l3 = bytesCount; _i3 < _l3; _i3++) {
      var _shiftUnsignedInteger = shiftUnsignedIntegerFromBinary(binary, BYTE_BIT_LENGTH);

      var _shiftUnsignedInteger2 = _slicedToArray(_shiftUnsignedInteger, 2);

      charCodes[_i3] = _shiftUnsignedInteger2[0];
      binary = _shiftUnsignedInteger2[1];
    }

    var base64 = btoa(byteArrayToString(charCodes));
    base64 = base64.replace(/=/g, '');
    base64 = base64.replace(/\+/g, '-');
    return base64;
  }

  function base64ToBinary(base64) {
    base64 = base64.replace(/-/g, '+');
    var charCodes = stringToByteArray(atob(base64));
    var bytesCount = charCodes.length;
    var binary = new Array(bytesCount);

    for (var _i4 = 0, _l4 = bytesCount; _i4 < _l4; _i4++) {
      binary[_i4] = unsignedIntegerToBinary(charCodes[_i4], BYTE_BIT_LENGTH);
    }

    binary = binary.join('');
    return binary;
  }

  var logs = {
    usedTypes: {},
    typeLengths: {},
    binarySamples: {}
  };

  var AbstractValueType = function () {
    function AbstractValueType(options) {
      _classCallCheck(this, AbstractValueType);

      Object.assign(this, options);
      this.binaryTypeLength = this.binaryType.length;
    }

    _createClass(AbstractValueType, [{
      key: "log",
      value: function log(binary) {
        var name = this.name;
        logs.usedTypes[name] = logs.usedTypes[name] || 0;
        logs.usedTypes[name]++;
        logs.binarySamples[name] = logs.binarySamples[name] || [];
        logs.binarySamples[name].push(binary);
      }
    }]);

    return AbstractValueType;
  }();

  var FixedIntegerType = function (_AbstractValueType) {
    _inherits(FixedIntegerType, _AbstractValueType);

    var _super = _createSuper(FixedIntegerType);

    function FixedIntegerType(options) {
      var _this;

      _classCallCheck(this, FixedIntegerType);

      _this = _super.call(this, options);
      _this.esType = 'number';

      if (!_this.valueBinaryLength) {
        return _possibleConstructorReturn(_this);
      }

      _this.minValue = options.minValue || 0;
      _this.maxValue = options.maxValue || Math.pow(2, _this.valueBinaryLength) - 1;
      return _this;
    }

    _createClass(FixedIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var binary = unsignedIntegerToBinary(integer, this.valueBinaryLength);

        if (logStats) {
          this.log(binary);
        }

        binary = [binary];
        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var integer;

        var _shiftUnsignedInteger3 = shiftUnsignedIntegerFromBinary(binary, this.valueBinaryLength);

        var _shiftUnsignedInteger4 = _slicedToArray(_shiftUnsignedInteger3, 2);

        integer = _shiftUnsignedInteger4[0];
        binary = _shiftUnsignedInteger4[1];
        return [integer, binary];
      }
    }]);

    return FixedIntegerType;
  }(AbstractValueType);

  var FixedBooleanType = function (_FixedIntegerType) {
    _inherits(FixedBooleanType, _FixedIntegerType);

    var _super2 = _createSuper(FixedBooleanType);

    function FixedBooleanType(options) {
      var _this2;

      _classCallCheck(this, FixedBooleanType);

      options.valueBinaryLength = 1;
      _this2 = _super2.call(this, options);
      _this2.esType = 'boolean';
      return _this2;
    }

    _createClass(FixedBooleanType, [{
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var bool = binary[0] === '1';
        binary = binary.slice(1);
        return [bool, binary];
      }
    }]);

    return FixedBooleanType;
  }(FixedIntegerType);

  var LengthAndValueBinary = function () {
    function LengthAndValueBinary(parent, name, bitSizes) {
      _classCallCheck(this, LengthAndValueBinary);

      this.parent = parent;
      this.name = name;
      this.bitSizes = bitSizes;
      this.maxValues = ___default['default'].flatten(this.bitSizes).map(function (value) {
        return Math.pow(2, value) - 1;
      });
      this.maxValue = this.maxValues[this.maxValues.length - 1];
      this.sizeBinaryLength = unsignedIntegerToBinary(this.bitSizes.length - 1).length;
    }

    _createClass(LengthAndValueBinary, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var parentName = this.parent.name;
        var sizeIndex = this.maxValues.findIndex(function (maxValue) {
          return integer <= maxValue;
        });

        if (sizeIndex === -1) {
          throw new Error("Value is too large for type: ".concat(parentName, " value: ").concat(integer, " max: ").concat(this.maxValue));
        }

        var sizeBinary = unsignedIntegerToBinary(sizeIndex, this.sizeBinaryLength);
        var valueLength = this.bitSizes[sizeIndex];
        var name = this.name;

        if (logStats) {
          logs.typeLengths[parentName] = logs.typeLengths[parentName] || {};
          logs.typeLengths[parentName][name] = logs.typeLengths[parentName][name] || {};
          logs.typeLengths[parentName][name][valueLength] = logs.typeLengths[parentName][name][valueLength] || 0;
          logs.typeLengths[parentName][name][valueLength]++;
        }

        var integerBinary = unsignedIntegerToBinary(integer, valueLength);
        var binary = [sizeBinary, integerBinary];
        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var sizeBinary;

        var _shiftBinary = shiftBinary(binary, this.sizeBinaryLength);

        var _shiftBinary2 = _slicedToArray(_shiftBinary, 2);

        sizeBinary = _shiftBinary2[0];
        binary = _shiftBinary2[1];
        var sizeIndex = binaryToUnsignedInteger(sizeBinary);
        var valueLength = this.bitSizes[sizeIndex];
        var integer;

        var _shiftUnsignedInteger5 = shiftUnsignedIntegerFromBinary(binary, valueLength);

        var _shiftUnsignedInteger6 = _slicedToArray(_shiftUnsignedInteger5, 2);

        integer = _shiftUnsignedInteger6[0];
        binary = _shiftUnsignedInteger6[1];
        return [integer, binary];
      }
    }]);

    return LengthAndValueBinary;
  }();

  var VariableIntegerType = function (_FixedIntegerType2) {
    _inherits(VariableIntegerType, _FixedIntegerType2);

    var _super3 = _createSuper(VariableIntegerType);

    function VariableIntegerType(options) {
      var _this3;

      _classCallCheck(this, VariableIntegerType);

      _this3 = _super3.call(this, options);
      _this3.isNegative = _this3.minValue < 0 && _this3.maxValue === 0;
      _this3.integer = new LengthAndValueBinary(_assertThisInitialized(_this3), 'integer', options.integerBitSizes);
      return _this3;
    }

    _createClass(VariableIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        integer = integer.toFixed(0);
        var binary = this.integer.valueToBinary(Math.abs(integer), logStats);

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var integer;

        var _this$integer$shiftVa = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa2 = _slicedToArray(_this$integer$shiftVa, 2);

        integer = _this$integer$shiftVa2[0];
        binary = _this$integer$shiftVa2[1];

        if (this.isNegative) {
          integer = -integer;
        }

        return [integer, binary];
      }
    }]);

    return VariableIntegerType;
  }(FixedIntegerType);

  var VariableArrayType = function (_VariableIntegerType) {
    _inherits(VariableArrayType, _VariableIntegerType);

    var _super4 = _createSuper(VariableArrayType);

    function VariableArrayType(options) {
      var _this4;

      _classCallCheck(this, VariableArrayType);

      _this4 = _super4.call(this, options);
      _this4.esType = 'array';
      return _this4;
    }

    _createClass(VariableArrayType, [{
      key: "valueToBinary",
      value: function valueToBinary(array) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var arrayLength = array.length;

        var binary = _get(_getPrototypeOf(VariableArrayType.prototype), "valueToBinary", this).call(this, arrayLength);

        if (arrayLength) {
          var valueType = findValueTypeFromValues(array);
          binary.push(valueType.binaryType);
          binary.type = valueType.name;
          binary.push(array.map(function (value) {
            return valueType.valueToBinary(value, logStats);
          }));
        }

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var arrayLength;

        var _get$call = _get(_getPrototypeOf(VariableArrayType.prototype), "shiftValueFromBinary", this).call(this, binary);

        var _get$call2 = _slicedToArray(_get$call, 2);

        arrayLength = _get$call2[0];
        binary = _get$call2[1];
        var value = new Array(arrayLength);

        if (arrayLength) {
          var valueType;

          var _shiftValueTypeFromBi = shiftValueTypeFromBinary(binary);

          var _shiftValueTypeFromBi2 = _slicedToArray(_shiftValueTypeFromBi, 2);

          valueType = _shiftValueTypeFromBi2[0];
          binary = _shiftValueTypeFromBi2[1];

          for (var _i5 = 0, _l5 = arrayLength; _i5 < _l5; _i5++) {
            var _valueType$shiftValue = valueType.shiftValueFromBinary(binary);

            var _valueType$shiftValue2 = _slicedToArray(_valueType$shiftValue, 2);

            value[_i5] = _valueType$shiftValue2[0];
            binary = _valueType$shiftValue2[1];
          }
        }

        return [value, binary];
      }
    }]);

    return VariableArrayType;
  }(VariableIntegerType);

  var VariableSignedIntegerType = function (_VariableIntegerType2) {
    _inherits(VariableSignedIntegerType, _VariableIntegerType2);

    var _super5 = _createSuper(VariableSignedIntegerType);

    function VariableSignedIntegerType() {
      _classCallCheck(this, VariableSignedIntegerType);

      return _super5.apply(this, arguments);
    }

    _createClass(VariableSignedIntegerType, [{
      key: "valueToBinary",
      value: function valueToBinary(integer) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        integer = integer.toFixed(0);
        var isNegative = integer < 0;
        var signBinary = isNegative ? '1' : '0';
        var integerBinary = this.integer.valueToBinary(Math.abs(integer), logStats);
        var binary = [signBinary, integerBinary];

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var isNegative;

        var _shiftUnsignedInteger7 = shiftUnsignedIntegerFromBinary(binary, 1);

        var _shiftUnsignedInteger8 = _slicedToArray(_shiftUnsignedInteger7, 2);

        isNegative = _shiftUnsignedInteger8[0];
        binary = _shiftUnsignedInteger8[1];
        var integer;

        var _this$integer$shiftVa3 = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa4 = _slicedToArray(_this$integer$shiftVa3, 2);

        integer = _this$integer$shiftVa4[0];
        binary = _this$integer$shiftVa4[1];

        if (isNegative) {
          integer = -integer;
        }

        return [integer, binary];
      }
    }]);

    return VariableSignedIntegerType;
  }(VariableIntegerType);

  var VariableDecimalType = function (_VariableIntegerType3) {
    _inherits(VariableDecimalType, _VariableIntegerType3);

    var _super6 = _createSuper(VariableDecimalType);

    function VariableDecimalType(options) {
      var _this5;

      _classCallCheck(this, VariableDecimalType);

      _this5 = _super6.call(this, options);
      _this5.isFloat = true;
      _this5.decimal = new LengthAndValueBinary(_assertThisInitialized(_this5), 'decimal', options.decimalBitSizes);
      return _this5;
    }

    _createClass(VariableDecimalType, [{
      key: "valueToBinary",
      value: function valueToBinary(_float) {
        var logStats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        _float = _float.toFixed(2);
        var isNegative = _float < 0;
        _float = Math.abs(_float);
        var parts = String(_float).split('.');
        var higherInteger = parseInt(parts[0]);
        var lowerInteger = parseInt(zeroPadRightToLength(parts[1] || 0, 2));
        var signBinary = isNegative ? '1' : '0';
        var integerValueBinary = this.integer.valueToBinary(higherInteger, logStats);
        var decimalValueBinary = this.decimal.valueToBinary(lowerInteger, logStats);
        var binary = [signBinary, integerValueBinary, decimalValueBinary];

        if (logStats) {
          this.log(binary);
        }

        return binary;
      }
    }, {
      key: "shiftValueFromBinary",
      value: function shiftValueFromBinary(binary) {
        var isNegative;

        var _shiftUnsignedInteger9 = shiftUnsignedIntegerFromBinary(binary, 1);

        var _shiftUnsignedInteger10 = _slicedToArray(_shiftUnsignedInteger9, 2);

        isNegative = _shiftUnsignedInteger10[0];
        binary = _shiftUnsignedInteger10[1];
        var higherInteger;

        var _this$integer$shiftVa5 = this.integer.shiftValueFromBinary(binary);

        var _this$integer$shiftVa6 = _slicedToArray(_this$integer$shiftVa5, 2);

        higherInteger = _this$integer$shiftVa6[0];
        binary = _this$integer$shiftVa6[1];
        var lowerInteger;

        var _this$decimal$shiftVa = this.decimal.shiftValueFromBinary(binary);

        var _this$decimal$shiftVa2 = _slicedToArray(_this$decimal$shiftVa, 2);

        lowerInteger = _this$decimal$shiftVa2[0];
        binary = _this$decimal$shiftVa2[1];
        lowerInteger = zeroPadLeftToLength(String(lowerInteger), 2);

        var _float2 = parseFloat(higherInteger + '.' + lowerInteger);

        if (isNegative) {
          _float2 = -_float2;
        }

        return [_float2, binary];
      }
    }]);

    return VariableDecimalType;
  }(VariableIntegerType);

  var arrayType = new VariableArrayType({
    name: 'array',
    binaryType: '10',
    integerBitSizes: [4, 16]
  });
  var booleanType = new FixedBooleanType({
    name: 'boolean',
    binaryType: '0'
  });
  var integerTypes = [new FixedIntegerType({
    name: 'uint3',
    binaryType: '1110',
    valueBinaryLength: 3
  }), new VariableIntegerType({
    name: 'vint8+',
    binaryType: '110',
    minValue: 0,
    maxValue: 255,
    integerBitSizes: [2, 8]
  }), new VariableIntegerType({
    name: 'vint8-',
    binaryType: '111100',
    minValue: -255,
    maxValue: 0,
    integerBitSizes: [2, 8]
  }), new VariableSignedIntegerType({
    name: 'sint32',
    binaryType: '111110',
    minValue: -4294967295,
    maxValue: 4294967295,
    integerBitSizes: [2, 4, 16, 32]
  })];
  var decimalTypes = [new VariableDecimalType({
    name: 'sdec15',
    binaryType: '111101',
    minValue: -255.99,
    maxValue: 255.99,
    integerBitSizes: [2, 8],
    decimalBitSizes: [0, 7]
  }), new VariableDecimalType({
    name: 'sdec39',
    binaryType: '111111',
    minValue: -4294967295.99,
    maxValue: 4294967295.99,
    integerBitSizes: [2, 4, 16, 32],
    decimalBitSizes: [0, 7]
  })];
  var ValueTypes = [booleanType, arrayType].concat(integerTypes).concat(decimalTypes);
  ValueTypes.nameIndex = {};
  ValueTypes.forEach(function (valueType) {
    return ValueTypes.nameIndex[valueType.name] = valueType;
  });

  function esTypeOf(value) {
    if (Array.isArray(value)) {
      return 'array';
    }

    if (value === null) {
      return 'null';
    }

    return _typeof(value);
  }

  function findValueTypeFromName(name) {
    return ValueTypes.nameIndex[name.toLowerCase()];
  }

  function findValueTypeFromValue(value) {
    var esType = esTypeOf(value);

    switch (esType) {
      case 'array':
        return arrayType;

      case 'boolean':
        return booleanType;
    }

    value = value.toFixed(2);
    var isFloat = !Number.isInteger(value);

    var isValueInValueTypeRange = function (valueType) {
      return value >= valueType.minValue && value <= valueType.maxValue;
    };

    var valueType = isFloat ? decimalTypes.find(isValueInValueTypeRange) : integerTypes.find(isValueInValueTypeRange);

    if (!valueType) {
      throw new Error("Cannot find type from value: ".concat(value));
    }

    return valueType;
  }

  function findValueTypeFromValues(values) {
    if (!values.length) {
      return;
    }

    var minValue = 0;
    var maxValue = 0;
    var isFloat = false;
    var esTypes = values.map(function (value) {
      var valueType = findValueTypeFromValue(value);

      if (valueType.esType === 'number') {
        minValue = Math.min(value, minValue);
        maxValue = Math.max(value, maxValue);
        isFloat = isFloat || !Number.isInteger(value);
      }

      return valueType.esType;
    });

    var uniqESTypes = _toConsumableArray(new Set(esTypes));

    if (uniqESTypes.length > 1) {
      throw new Error("Cannot resolve array to one type: ".concat(uniqESTypes.join()));
    }

    var esType = uniqESTypes[0];

    switch (esType) {
      case 'array':
        return arrayType;

      case 'boolean':
        return booleanType;
    }

    var isRangeInValueTypeRange = function (valueType) {
      return minValue >= valueType.minValue && maxValue <= valueType.maxValue;
    };

    var valueType = isFloat ? decimalTypes.find(isRangeInValueTypeRange) : integerTypes.find(isRangeInValueTypeRange);

    if (!valueType) {
      throw new Error("Cannot find type from value. min: ".concat(minValue, " max: ").concat(maxValue, " isfloat: ").concat(isFloat));
    }

    return valueType;
  }

  function shiftValueTypeFromBinary(binary) {
    var valueType = ValueTypes.find(function (valueType) {
      var binaryType = binary.slice(0, valueType.binaryTypeLength);
      return binaryType === valueType.binaryType;
    });

    if (!valueType) {
      throw new Error("Cannot find type from binary: ".concat(binary.slice(0, 6), "..."));
    }

    binary = binary.slice(valueType.binaryTypeLength);
    return [valueType, binary];
  }

  function convertValuesToNumbers(value) {
    var esType = esTypeOf(value);

    switch (esType) {
      case 'array':
        return value.map(convertValuesToNumbers);

      case 'undefined':
      case 'null':
        return value ? 1 : 0;

      case 'boolean':
      case 'number':
        return value;
    }

    throw new Error("Cannot convert ".concat(esType, " to number"));
  }

  var Converter = function () {
    function Converter() {
      _classCallCheck(this, Converter);
    }

    _createClass(Converter, [{
      key: "getInvalidTypeError",
      value: function getInvalidTypeError(value) {
        try {
          value = convertValuesToNumbers(value);
          esTypeOf(value) === 'array' ? findValueTypeFromValues(value) : findValueTypeFromValue(value);
          return;
        } catch (err) {
          return err;
        }
      }
    }, {
      key: "valueToBinary",
      value: function valueToBinary(value) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var logStats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        this.clearLog();
        var hasInitialType = typeof typeName === 'string';
        value = convertValuesToNumbers(value);
        var valueType = hasInitialType ? findValueTypeFromName(typeName) : findValueTypeFromValue(value);

        if (!valueType) {
          throw new Error("Could not find value type from ".concat(hasInitialType ? "name ".concat(typeName) : "value ".concat(value), " accepts: ").concat(Object.keys(ValueTypes.nameIndex), ". Leave typeName empty for auto-detect."));
        }

        var binary = valueType.valueToBinary(value, logStats);

        if (!hasInitialType) {
          binary.unshift(valueType.binaryType);
        }

        if (logStats) {
          this.printLog();
        }

        return binary;
      }
    }, {
      key: "valueFromBinary",
      value: function valueFromBinary(binary) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        binary = ___default['default'].flatten(binary).join('');
        var hasInitialType = typeof typeName === 'string';
        var valueType;

        if (hasInitialType) {
          valueType = findValueTypeFromName(typeName);
        } else {
          var _shiftValueTypeFromBi3 = shiftValueTypeFromBinary(binary);

          var _shiftValueTypeFromBi4 = _slicedToArray(_shiftValueTypeFromBi3, 2);

          valueType = _shiftValueTypeFromBi4[0];
          binary = _shiftValueTypeFromBi4[1];
        }

        if (!valueType || !(valueType instanceof AbstractValueType)) {
          throw new Error("Could not find value type from ".concat(hasInitialType ? "name \"".concat(typeName, "\"") : "binary \"".concat(binary.slice(0, 8), "\"..."), " accepts: ").concat(Object.keys(ValueTypes.nameIndex), ". Leave typeName empty for auto-detect."));
        }

        var _valueType$shiftValue3 = valueType.shiftValueFromBinary(binary),
            _valueType$shiftValue4 = _slicedToArray(_valueType$shiftValue3, 1),
            value = _valueType$shiftValue4[0];

        return value;
      }
    }, {
      key: "clearLog",
      value: function clearLog() {
        logs.usedTypes = {};
        logs.typeLengths = {};
        logs.binarySamples = {};
      }
    }, {
      key: "printLog",
      value: function printLog() {
        console.log('Types used count:', logs.usedTypes);
        console.log('Type lengths used count:', logs.typeLengths);
        console.log('Type binary samples:', logs.binarySamples);
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var logStats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var binary = this.valueToBinary(value, typeName, logStats);
        var base64 = binaryToBase64(binary);
        return base64;
      }
    }, {
      key: "serializeAsync",
      value: function () {
        var _serializeAsync = _asyncToGenerator(regeneratorRuntime.mark(function _callee(value) {
          var binary,
              base64,
              isLargeArray;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  binary = this.valueToBinary(value, null, null);
                  base64 = binaryToBase64(binary);
                  isLargeArray = Array.isArray(value) && value.length > 10;

                  if (!isLargeArray) {
                    _context.next = 7;
                    break;
                  }

                  return _context.abrupt("return", new Promise(function (resolve) {
                    LZMAWorker.compress(JSON.stringify(value), 1, function (data) {
                      var compressedBase64 = "#".concat(window.btoa(data.map(function (i) {
                        return String.fromCharCode(i + 128);
                      }).join('')).replace(/=/g, ''));
                      var isCompressedSmaller = compressedBase64.length < base64.length;
                      if (isCompressedSmaller) return resolve(compressedBase64);
                      return resolve(base64);
                    });
                  }));

                case 7:
                  return _context.abrupt("return", base64);

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function serializeAsync(_x) {
          return _serializeAsync.apply(this, arguments);
        }

        return serializeAsync;
      }()
    }, {
      key: "deserialize",
      value: function deserialize(base64) {
        var typeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var isLZMACompressed = base64[0] === '#';
        if (isLZMACompressed) return JSON.parse(window.LZMA.decompress(window.atob(base64.slice(1)).split('').map(function (c) {
          return c.charCodeAt(0) - 128;
        })));
        var binary = base64ToBinary(base64);
        var value = this.valueFromBinary(binary, typeName);
        return value;
      }
    }]);

    return Converter;
  }();

  var SCORMSuspendData = __AMD("extensions/adapt-contrib-spoor/js/serializers/SCORMSuspendData", window.SCORMSuspendData = new Converter());

  var ComponentSerializer = __AMD("extensions/adapt-contrib-spoor/js/serializers/ComponentSerializer", function (_Backbone$Controller) {
    _inherits(ComponentSerializer, _Backbone$Controller);

    var _super = _createSuper(ComponentSerializer);

    function ComponentSerializer() {
      _classCallCheck(this, ComponentSerializer);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentSerializer, [{
      key: "initialize",
      value: function initialize(trackingIdType, shouldCompress) {
        this.trackingIdType = trackingIdType;
        this.shouldCompress = shouldCompress;
      }
    }, {
      key: "serialize",
      value: function () {
        var _serialize = _asyncToGenerator(regeneratorRuntime.mark(function _callee(shouldStoreResponses, shouldStoreAttempts) {
          var _this = this;

          var states;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (shouldStoreAttempts && !shouldStoreResponses) {
                    logging.warnOnce('SPOOR configuration error, cannot use \'_shouldStoreAttempts\' without \'_shouldStoreResponses\'');
                  }

                  states = [];
                  Adapt.data.each(function (model) {
                    if (model.get('_type') !== _this.trackingIdType) {
                      return;
                    }

                    var trackingId = model.get('_trackingId');

                    if (typeof trackingId === 'undefined') {
                      return;
                    }

                    var isContainer = model.hasManagedChildren;
                    var components = isContainer ? model.findDescendantModels('component') : [model];
                    components.forEach(function (component, index) {
                      if (component.get('_isTrackable') === false) {
                        return;
                      }

                      if (!shouldStoreResponses) {
                        var _state = [[trackingId, index], [component.get('_isComplete')]];
                        states.push(_state);
                        return;
                      }

                      var modelState = null;

                      if (!component.getAttemptState) {
                        modelState = component.get('_isQuestionType') ? [[component.get('_score') || 0, component.get('_attemptsLeft') || 0], [component.get('_isComplete') || false, component.get('_isInteractionComplete') || false, component.get('_isSubmitted') || false, component.get('_isCorrect') || false], [component.get('_userAnswer')]] : [[], [component.get('_isComplete') || false, component.get('_isInteractionComplete') || false], [component.get('_userAnswer')]];
                      } else {
                        modelState = component.getAttemptState();
                      }

                      var userAnswer = modelState[2][0];
                      var hasUserAnswer = typeof userAnswer !== 'undefined' && userAnswer !== null;
                      var isUserAnswerArray = Array.isArray(userAnswer);

                      if (!hasUserAnswer) {
                        modelState[2][0] = [];
                      } else if (!isUserAnswerArray) {
                        modelState[2][0] = [modelState[2][0]];
                      }

                      var attemptStates = component.get('_attemptStates');
                      var hasAttemptStates = shouldStoreAttempts && Array.isArray(attemptStates);

                      if (hasAttemptStates) {
                        modelState[2][1] = attemptStates;
                      }

                      var state = [[trackingId, index], [hasUserAnswer, isUserAnswerArray, hasAttemptStates], modelState];
                      states.push(state);
                    });
                  });

                  if (!this.shouldCompress) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 6;
                  return SCORMSuspendData.serializeAsync(states);

                case 6:
                  return _context.abrupt("return", _context.sent);

                case 7:
                  return _context.abrupt("return", SCORMSuspendData.serialize(states));

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function serialize(_x, _x2) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "deserialize",
      value: function deserialize(binary) {
        var trackingIdMap = Adapt.data.toArray().reduce(function (trackingIdMap, model) {
          var trackingId = model.get('_trackingId');
          if (typeof trackingId === 'undefined') return trackingIdMap;
          trackingIdMap[trackingId] = model;
          return trackingIdMap;
        }, {});
        var states = SCORMSuspendData.deserialize(binary);
        var shouldStoreResponses = states[0].length > 2;
        states.forEach(function (state) {
          var _state$ = _slicedToArray(state[0], 2),
              trackingId = _state$[0],
              index = _state$[1];

          var model = trackingIdMap[trackingId];

          if (!model) {
            return;
          }

          var isContainer = model.hasManagedChildren;
          var components = isContainer ? model.findDescendantModels('component') : [model];
          var component = components[index];

          if (!component) {
            logging.warn("SPOOR could not restore tracking id: ".concat(trackingId, ", index: ").concat(index));
            return;
          }

          if (!shouldStoreResponses) {
            var isComplete = state[1][0];
            component.set('_isComplete', isComplete);
            return;
          }

          var _state$2 = _slicedToArray(state[1], 3),
              hasUserAnswer = _state$2[0],
              isUserAnswerArray = _state$2[1],
              hasAttemptStates = _state$2[2];

          var modelState = state[2];

          if (!hasUserAnswer) {
            modelState[2][0] = null;
          } else if (!isUserAnswerArray) {
            modelState[2][0] = modelState[2][0][0];
          }

          if (!hasAttemptStates) {
            modelState[2][1] = null;
          }

          if (component.setAttemptObject) {
            component.set('_attemptStates', modelState[2][1]);
            var attemptObject = component.getAttemptObject(modelState);
            component.setAttemptObject(attemptObject, false);
            return;
          }

          component.get('_isQuestionType') ? component.set({
            _score: modelState[0][0],
            _attemptsLeft: modelState[0][1],
            _isComplete: modelState[1][0],
            _isInteractionComplete: modelState[1][1],
            _isSubmitted: modelState[1][2],
            _isCorrect: modelState[1][3],
            _userAnswer: modelState[2][0],
            _attemptStates: modelState[2][1]
          }) : component.set({
            _isComplete: modelState[1][0],
            _isInteractionComplete: modelState[1][1],
            _userAnswer: modelState[2][0],
            _attemptStates: modelState[2][1]
          });
        });
      }
    }]);

    return ComponentSerializer;
  }(Backbone.Controller));

  var StatefulSession = __AMD("extensions/adapt-contrib-spoor/js/adapt-stateful-session", function (_Backbone$Controller) {
    _inherits(StatefulSession, _Backbone$Controller);

    var _super = _createSuper(StatefulSession);

    function StatefulSession() {
      _classCallCheck(this, StatefulSession);

      return _super.apply(this, arguments);
    }

    _createClass(StatefulSession, [{
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'beginSession', 'onVisibilityChange', 'endSession');

        this.scorm = ScormWrapper$1.getInstance();
        this._trackingIdType = 'block';
        this._componentSerializer = null;
        this._shouldCompress = false;
        this._shouldStoreResponses = true;
        this._shouldStoreAttempts = false;
        this._shouldRecordInteractions = true;
        this.beginSession();
      }
    }, {
      key: "beginSession",
      value: function beginSession() {
        this.listenTo(Adapt, 'app:dataReady', this.restoreSession);
        this._trackingIdType = Adapt.build.get('trackingIdType') || 'block';

        if (window.location.search.indexOf('nolmserrors') !== -1) {
          this.scorm.suppressErrors = true;
        }

        var config = Adapt.spoor.config;
        if (!config) return;
        var tracking = config._tracking;
        this._shouldStoreResponses = tracking && tracking._shouldStoreResponses || false;
        this._shouldStoreAttempts = tracking && tracking._shouldStoreAttempts || false;
        this._shouldCompress = tracking && tracking._shouldCompress || false;
        this._componentSerializer = new ComponentSerializer(this._trackingIdType, this._shouldCompress);

        if ((tracking === null || tracking === void 0 ? void 0 : tracking._shouldRecordInteractions) === false) {
          this._shouldRecordInteractions = false;
        }

        var settings = config._advancedSettings;

        if (!settings) {
          this.scorm.setVersion('1.2');
          this.scorm.initialize();
          return;
        }

        if (settings._showDebugWindow) {
          this.scorm.showDebugWindow();
        }

        this.scorm.setVersion(settings._scormVersion || '1.2');

        if (_.isBoolean(settings._suppressErrors)) {
          this.scorm.suppressErrors = settings._suppressErrors;
        }

        if (_.isBoolean(settings._commitOnStatusChange)) {
          this.scorm.commitOnStatusChange = settings._commitOnStatusChange;
        }

        if (_.isBoolean(settings._commitOnAnyChange)) {
          this.scorm.commitOnAnyChange = settings._commitOnAnyChange;
        }

        if (_.isFinite(settings._timedCommitFrequency)) {
          this.scorm.timedCommitFrequency = settings._timedCommitFrequency;
        }

        if (_.isFinite(settings._maxCommitRetries)) {
          this.scorm.maxCommitRetries = settings._maxCommitRetries;
        }

        if (_.isFinite(settings._commitRetryDelay)) {
          this.scorm.commitRetryDelay = settings._commitRetryDelay;
        }

        if ('_exitStateIfIncomplete' in settings) {
          this.scorm.exitStateIfIncomplete = settings._exitStateIfIncomplete;
        }

        if ('_exitStateIfComplete' in settings) {
          this.scorm.exitStateIfComplete = settings._exitStateIfComplete;
        }

        this.scorm.initialize();
      }
    }, {
      key: "restoreSession",
      value: function restoreSession() {
        this.setupLearnerInfo();
        this.restoreSessionState();

        _.defer(this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupLearnerInfo",
      value: function setupLearnerInfo() {
        var globals = Adapt.course.get('_globals');

        if (!globals._learnerInfo) {
          globals._learnerInfo = {};
        }

        Object.assign(globals._learnerInfo, Adapt.offlineStorage.get('learnerinfo'));
      }
    }, {
      key: "restoreSessionState",
      value: function restoreSessionState() {
        var _this$_componentSeria;

        var sessionPairs = Adapt.offlineStorage.get();
        var hasNoPairs = !Object.keys(sessionPairs).length;
        if (hasNoPairs) return;

        if (sessionPairs.c) {
          var _SCORMSuspendData$des = SCORMSuspendData.deserialize(sessionPairs.c),
              _SCORMSuspendData$des2 = _slicedToArray(_SCORMSuspendData$des, 2),
              _isComplete = _SCORMSuspendData$des2[0],
              _isAssessmentPassed = _SCORMSuspendData$des2[1];

          Adapt.course.set({
            _isComplete: _isComplete,
            _isAssessmentPassed: _isAssessmentPassed
          });
        }

        if (!sessionPairs.q) return;
        (_this$_componentSeria = this._componentSerializer) === null || _this$_componentSeria === void 0 ? void 0 : _this$_componentSeria.deserialize(sessionPairs.q);
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.debouncedSaveSession = _.debounce(this.saveSessionState.bind(this), 1);
        this.listenTo(Adapt.components, 'change:_isComplete', this.debouncedSaveSession);
        this.listenTo(Adapt.course, 'change:_isComplete', this.debouncedSaveSession);

        if (this._shouldStoreResponses) {
          this.listenTo(Adapt.data, 'change:_isSubmitted change:_userAnswer', this.debouncedSaveSession);
        }

        this.listenTo(Adapt, {
          'app:languageChanged': this.onLanguageChanged,
          'questionView:recordInteraction': this.onQuestionRecordInteraction,
          'tracking:complete': this.onTrackingComplete
        });
        var config = Adapt.spoor.config;
        var advancedSettings = config._advancedSettings;
        var shouldCommitOnVisibilityChange = !advancedSettings || advancedSettings._commitOnVisibilityChangeHidden !== false;

        if (shouldCommitOnVisibilityChange) {
          document.addEventListener('visibilitychange', this.onVisibilityChange);
        }

        $(window).on('beforeunload unload', this.endSession);
      }
    }, {
      key: "saveSessionState",
      value: function () {
        var _saveSessionState = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var _Adapt$parentView, _this$_componentSeria2;

          var isMidRender, courseState, componentStates, sessionPairs;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  isMidRender = !((_Adapt$parentView = Adapt.parentView) !== null && _Adapt$parentView !== void 0 && _Adapt$parentView.model.get('_isReady'));

                  if (!isMidRender) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return", this.debouncedSaveSession());

                case 3:
                  courseState = SCORMSuspendData.serialize([Boolean(Adapt.course.get('_isComplete')), Boolean(Adapt.course.get('_isAssessmentPassed'))]);
                  _context.next = 6;
                  return (_this$_componentSeria2 = this._componentSerializer) === null || _this$_componentSeria2 === void 0 ? void 0 : _this$_componentSeria2.serialize(this._shouldStoreResponses, this._shouldStoreAttempts);

                case 6:
                  componentStates = _context.sent;
                  sessionPairs = {
                    c: courseState,
                    q: componentStates
                  };
                  Adapt.offlineStorage.set(sessionPairs);
                  this.printCompletionInformation(sessionPairs);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function saveSessionState() {
          return _saveSessionState.apply(this, arguments);
        }

        return saveSessionState;
      }()
    }, {
      key: "printCompletionInformation",
      value: function printCompletionInformation(suspendData) {
        var _this = this;

        if (typeof suspendData === 'string') {
          suspendData = JSON.parse(suspendData);
        }

        var courseState = SCORMSuspendData.deserialize(suspendData.c);
        var courseComplete = courseState[0];
        var assessmentPassed = courseState[1];
        var trackingIdModels = Adapt.data.filter(function (model) {
          return model.get('_type') === _this._trackingIdType && model.has('_trackingId');
        });
        var trackingIds = trackingIdModels.map(function (model) {
          return model.get('_trackingId');
        });

        if (!trackingIds.length) {
          Adapt.log.info("course._isComplete: ".concat(courseComplete, ", course._isAssessmentPassed: ").concat(assessmentPassed, ", ").concat(this._trackingIdType, " completion: no tracking ids found"));
          return;
        }

        var data = SCORMSuspendData.deserialize(suspendData.q);
        var max = Math.max.apply(Math, _toConsumableArray(data.map(function (item) {
          return item[0][0];
        })));
        var shouldStoreResponses = data[0].length === 3;
        var completionString = data.reduce(function (markers, item) {
          var trackingId = item[0][0];
          var isComplete = shouldStoreResponses ? item[2][1][0] : item[1][0];
          var mark = isComplete ? '1' : '0';
          markers[trackingId] = markers[trackingId] === '-' || markers[trackingId] === '1' ? mark : '0';
          return markers;
        }, new Array(max + 1).join('-').split('')).join('');
        Adapt.log.info("course._isComplete: ".concat(courseComplete, ", course._isAssessmentPassed: ").concat(assessmentPassed, ", ").concat(this._trackingIdType, " completion: ").concat(completionString));
      }
    }, {
      key: "onLanguageChanged",
      value: function onLanguageChanged() {
        var _config$_reporting;

        var config = Adapt.spoor.config;
        this.removeEventListeners();
        this.setupEventListeners();
        this.saveSessionState();
        if ((config === null || config === void 0 ? void 0 : (_config$_reporting = config._reporting) === null || _config$_reporting === void 0 ? void 0 : _config$_reporting._resetStatusOnLanguageChange) !== true) return;
        Adapt.offlineStorage.set('status', 'incomplete');
      }
    }, {
      key: "onVisibilityChange",
      value: function onVisibilityChange() {
        if (document.visibilityState === 'hidden') this.scorm.commit();
      }
    }, {
      key: "onQuestionRecordInteraction",
      value: function onQuestionRecordInteraction(questionView) {
        if (!this._shouldRecordInteractions) return;
        var responseType = questionView.getResponseType();
        if (_.isEmpty(responseType)) return;
        var id = questionView.model.get('_id');
        var response = questionView.getResponse();
        var result = questionView.isCorrect();
        var latency = questionView.getLatency();
        Adapt.offlineStorage.set('interaction', id, response, result, latency, responseType);
      }
    }, {
      key: "onTrackingComplete",
      value: function onTrackingComplete(completionData) {
        var config = Adapt.spoor.config;
        this.saveSessionState();
        var completionStatus = completionData.status.asLowerCase;

        switch (completionData.status) {
          case COMPLETION_STATE$1.COMPLETED:
          case COMPLETION_STATE$1.PASSED:
            {
              var _config$_reporting2;

              if (!(config !== null && config !== void 0 && (_config$_reporting2 = config._reporting) !== null && _config$_reporting2 !== void 0 && _config$_reporting2._onTrackingCriteriaMet)) {
                Adapt.log.warn("No value defined for '_onTrackingCriteriaMet', so defaulting to '".concat(completionStatus, "'"));
              } else {
                completionStatus = config._reporting._onTrackingCriteriaMet;
              }

              break;
            }

          case COMPLETION_STATE$1.FAILED:
            {
              var _config$_reporting3;

              if (!(config !== null && config !== void 0 && (_config$_reporting3 = config._reporting) !== null && _config$_reporting3 !== void 0 && _config$_reporting3._onAssessmentFailure)) {
                Adapt.log.warn("No value defined for '_onAssessmentFailure', so defaulting to '".concat(completionStatus, "'"));
              } else {
                completionStatus = config._reporting._onAssessmentFailure;
              }
            }
        }

        Adapt.offlineStorage.set('status', completionStatus);
      }
    }, {
      key: "endSession",
      value: function endSession() {
        if (!this.scorm.finishCalled) {
          this.scorm.finish();
        }

        this.removeEventListeners();
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        $(window).off('beforeunload unload', this.endSession);
        document.removeEventListener('visibilitychange', this.onVisibilityChange);
        this.stopListening();
      }
    }]);

    return StatefulSession;
  }(Backbone.Controller));

  var OfflineStorage = __AMD("extensions/adapt-contrib-spoor/js/adapt-offlineStorage-scorm", function (_Backbone$Controller) {
    _inherits(OfflineStorageScorm, _Backbone$Controller);

    var _super = _createSuper(OfflineStorageScorm);

    function OfflineStorageScorm() {
      _classCallCheck(this, OfflineStorageScorm);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorageScorm, [{
      key: "initialize",
      value: function initialize(statefulSession) {
        this.offlineStorage = OfflineStorage$2;
        this.scorm = ScormWrapper$1.getInstance();
        this.statefulSession = statefulSession;
        this.temporaryStore = {};
        this.suspendDataStore = {};
        this.suspendDataRestored = false;
        Adapt.offlineStorage.initialize(this);
      }
    }, {
      key: "save",
      value: function save() {
        this.statefulSession.saveSessionState();
        this.scorm.commit();
      }
    }, {
      key: "serialize",
      value: function serialize() {
        return SCORMSuspendData.serialize.apply(SCORMSuspendData, arguments);
      }
    }, {
      key: "deserialize",
      value: function deserialize() {
        return SCORMSuspendData.deserialize.apply(SCORMSuspendData, arguments);
      }
    }, {
      key: "get",
      value: function get(name) {
        if (name === undefined) {
          if (this.useTemporaryStore()) return this.temporaryStore;
          this.suspendDataStore = this.getCustomStates();
          var data = Object.assign(_.clone(this.suspendDataStore), {
            location: this.scorm.getLessonLocation(),
            score: this.scorm.getScore(),
            status: this.scorm.getStatus(),
            student: this.scorm.getStudentName(),
            learnerInfo: this.getLearnerInfo()
          });
          this.suspendDataRestored = true;
          return data;
        }

        if (this.useTemporaryStore()) return this.temporaryStore[name];
        var courseState;

        switch (name.toLowerCase()) {
          case 'location':
            return this.scorm.getLessonLocation();

          case 'score':
            return this.scorm.getScore();

          case 'status':
            return this.scorm.getStatus();

          case 'student':
            return this.scorm.getStudentName();

          case 'learnerinfo':
            return this.getLearnerInfo();

          case 'coursestate':
            {
              courseState = this.getCustomState('c');
              var stateArray = courseState && SCORMSuspendData.deserialize(courseState) || [];
              return {
                _isCourseComplete: Boolean(stateArray.slice(0, 1).map(Number)[0]),
                _isAssessmentPassed: Boolean(stateArray.slice(1, 2).map(Number)[0]),
                completion: stateArray.slice(2).map(Number).map(String).join('') || ''
              };
            }

          case 'completion':
            courseState = this.getCustomState('c');
            return courseState && SCORMSuspendData.deserialize(courseState).slice(2).map(Number).map(String).join('') || '';

          case '_iscoursecomplete':
            courseState = this.getCustomState('c');
            return Boolean(courseState && SCORMSuspendData.deserialize(courseState).slice(0, 1).map(Number)[0]);

          case '_isassessmentpassed':
            courseState = this.getCustomState('c');
            return Boolean(courseState && SCORMSuspendData.deserialize(courseState).slice(1, 2).map(Number)[0]);

          case 'questions':
            {
              var questionsState = this.getCustomState('q');
              return questionsState || '';
            }

          default:
            return this.getCustomState(name);
        }
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _this$scorm, _this$scorm2, _this$scorm3, _this$scorm4;

        var args = Array.prototype.slice.call(arguments).slice(1);
        var isObject = _typeof(name) === 'object';

        if (isObject) {
          value = name;
          name = 'suspendData';
        }

        if (this.useTemporaryStore()) {
          if (isObject) {
            Object.assign(this.temporaryStore, value);
          } else {
            this.temporaryStore[name] = value;
          }

          return true;
        }

        switch (name.toLowerCase()) {
          case 'interaction':
            return (_this$scorm = this.scorm).recordInteraction.apply(_this$scorm, _toConsumableArray(args));

          case 'location':
            return (_this$scorm2 = this.scorm).setLessonLocation.apply(_this$scorm2, _toConsumableArray(args));

          case 'score':
            return (_this$scorm3 = this.scorm).setScore.apply(_this$scorm3, _toConsumableArray(args));

          case 'status':
            return (_this$scorm4 = this.scorm).setStatus.apply(_this$scorm4, _toConsumableArray(args));

          case 'student':
          case 'learnerinfo':
            return false;

          case 'lang':
            this.scorm.setLanguage(value);
            break;
        }

        if (isObject) {
          Object.assign(this.suspendDataStore, value);
        } else {
          this.suspendDataStore[name] = value;
        }

        var dataAsString = JSON.stringify(this.suspendDataStore);
        return this.suspendDataRestored ? this.scorm.setSuspendData(dataAsString) : false;
      }
    }, {
      key: "getCustomStates",
      value: function getCustomStates() {
        var isSuspendDataStoreEmpty = _.isEmpty(this.suspendDataStore);

        if (!isSuspendDataStoreEmpty && this.suspendDataRestored) {
          return _.clone(this.suspendDataStore);
        }

        var dataAsString = this.scorm.getSuspendData();

        if (dataAsString === '' || dataAsString === ' ' || dataAsString === undefined) {
          return {};
        }

        var dataAsJSON = JSON.parse(dataAsString);

        if (!isSuspendDataStoreEmpty && !this.suspendDataRestored) {
          Object.assign(dataAsJSON, this.suspendDataStore);
        }

        return dataAsJSON;
      }
    }, {
      key: "getCustomState",
      value: function getCustomState(name) {
        var dataAsJSON = this.getCustomStates();
        return dataAsJSON[name];
      }
    }, {
      key: "useTemporaryStore",
      value: function useTemporaryStore() {
        var cfg = Adapt.config.get('_spoor');
        if (!this.scorm.lmsConnected || (cfg === null || cfg === void 0 ? void 0 : cfg._isEnabled) === false) return true;
        return false;
      }
    }, {
      key: "getLearnerInfo",
      value: function getLearnerInfo() {
        var id = this.scorm.getStudentId();
        var name = this.scorm.getStudentName();
        var firstname = '';
        var lastname = '';
        var hasName = name && name !== 'undefined';
        var isNameCommaSeparated = hasName && name.includes(',');
        var isNameSpaceSeparated = hasName && name.includes(' ');
        hasName = hasName && (isNameCommaSeparated || isNameSpaceSeparated);

        if (!hasName) {
          console.log('SPOOR: LMS learner_name not in \'lastname, firstname\' or \'firstname lastname\' format');
          return {
            id: id,
            name: name,
            firstname: firstname,
            lastname: lastname
          };
        }

        var separator = isNameCommaSeparated ? ',' : ' ';
        var nameParts = name.split(separator);

        if (isNameCommaSeparated) {
          nameParts.reverse();
        }

        var _nameParts$map = nameParts.map(function (part) {
          return part.trim();
        });

        var _nameParts$map2 = _slicedToArray(_nameParts$map, 2);

        firstname = _nameParts$map2[0];
        lastname = _nameParts$map2[1];
        name = "".concat(firstname, " ").concat(lastname);
        return {
          id: id,
          name: name,
          firstname: firstname,
          lastname: lastname
        };
      }
    }]);

    return OfflineStorageScorm;
  }(Backbone.Controller));

  var Spoor = function (_Backbone$Controller) {
    _inherits(Spoor, _Backbone$Controller);

    var _super = _createSuper(Spoor);

    function Spoor() {
      _classCallCheck(this, Spoor);

      return _super.apply(this, arguments);
    }

    _createClass(Spoor, [{
      key: "initialize",
      value: function initialize() {
        this.config = null;
        this.scorm = ScormWrapper$1.getInstance();
        this.listenToOnce(Adapt, 'offlineStorage:prepare', this._prepare);
      }
    }, {
      key: "_prepare",
      value: function _prepare() {
        this.config = Adapt.config.get('_spoor');

        if (!this.isEnabled) {
          Adapt.offlineStorage.setReadyStatus();
          return;
        }

        this.statefulSession = new StatefulSession();
        this.offlineStorage = new OfflineStorage(this.statefulSession);
        Adapt.offlineStorage.get();
        Adapt.offlineStorage.setReadyStatus();

        require(['libraries/jquery.keycombo'], function () {
          $.onKeyCombo([68, 69, 86], function () {
            Adapt.spoor.scorm.showDebugWindow();
          });
        });
      }
    }, {
      key: "isEnabled",
      get: function () {
        return this.config && this.config._isEnabled;
      }
    }]);

    return Spoor;
  }(Backbone.Controller);

  Adapt.spoor = new Spoor();
  __AMD("extensions/adapt-contrib-spoor/js/adapt-contrib-spoor", Adapt.spoor);

  function _deepDefaults(original) {
    for (var _len = arguments.length, defaultObjects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      defaultObjects[_key - 1] = arguments[_key];
    }

    defaultObjects.reverse();
    defaultObjects.forEach(function (defaults) {
      var keyValuePairs = Object.entries(defaults);
      keyValuePairs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            defaultValue = _ref2[1];

        var isRecursiveObject = _typeof(defaultValue) === 'object' && !Array.isArray(defaultValue) && defaultValue !== null;

        if (isRecursiveObject) {
          original[key] = _deepDefaults(original[key] || {}, defaultValue);
          return;
        }

        var isValueAlreadySet = Object.prototype.hasOwnProperty.call(original, key);
        if (isValueAlreadySet) return;
        original[key] = defaultValue;
      });
    });
    return original;
  }
  var configDefaults = {
    _isEnabled: false,
    _isInherited: false,
    _autoScroll: true,
    _scrollTo: '@block +1',
    _onChildren: false,
    _button: {
      _isEnabled: true,
      _isFullWidth: true,
      _autoHide: false,
      _hasIcon: false,
      _styleBeforeCompletion: 'hidden',
      _styleAfterClick: 'hidden',
      _component: 'trickle-button',
      _className: '',
      text: 'Continue',
      ariaLabel: '',
      startText: '',
      startAriaLabel: '',
      finalText: '',
      finalAriaLabel: ''
    },
    _stepLocking: {
      _isEnabled: true,
      _isCompletionRequired: true,
      _isLockedOnRevisit: false
    }
  };
  function isModelArticleWithOnChildren(model) {
    var type = model.get('_type');
    var trickleConfig = model.get('_trickle');
    return type === 'article' && trickleConfig && trickleConfig._onChildren !== false;
  }
  function getModelConfigDefaults(model) {
    var type = model.get('_type');
    var config = {};

    _deepDefaults(config, configDefaults, {
      _onChildren: type === 'article'
    });

    if (config._onChildren) {
      var _config$_button$start, _config$_button$start2, _config$_button$final, _config$_button$final2;

      config._button.startText = (_config$_button$start = config._button.startText) !== null && _config$_button$start !== void 0 ? _config$_button$start : 'Begin';
      config._button.startAriaLabel = (_config$_button$start2 = config._button.startAriaLabel) !== null && _config$_button$start2 !== void 0 ? _config$_button$start2 : '';
      config._button.finalText = (_config$_button$final = config._button.finalText) !== null && _config$_button$final !== void 0 ? _config$_button$final : 'Finish';
      config._button.finalAriaLabel = (_config$_button$final2 = config._button.finalAriaLabel) !== null && _config$_button$final2 !== void 0 ? _config$_button$final2 : '';
    }

    if (config._button._isFullWidth) {
      config._stepLocking._isEnabled = true;
    }

    return config;
  }
  function getModelInheritanceChain(configModel) {
    if (!data.isReady) throw new Error('Trickle cannot resolve inheritance chains until data is ready');
    var type = configModel.get('_type');

    if (type === 'block') {
      var parentModel = configModel.getParent();
      var parentConfig = parentModel.get('_trickle');
      var blockConfig = configModel.get('_trickle');
      var isParentEnabledNotOnChildren = (parentConfig === null || parentConfig === void 0 ? void 0 : parentConfig._isEnabled) && parentConfig._onChildren === false;
      var isNoChildConfig = !(blockConfig !== null && blockConfig !== void 0 && blockConfig._isEnabled);

      if (isParentEnabledNotOnChildren && isNoChildConfig) {
        return null;
      }

      return [configModel, parentModel].filter(function (ancestor) {
        var config = ancestor.get('_trickle');
        return config && !config._isInherited;
      });
    }

    if (type === 'article') {
      return [configModel];
    }

    return null;
  }
  function getModelConfig(model) {
    var _$;

    var inheritance = getModelInheritanceChain(model);
    if (!(inheritance !== null && inheritance !== void 0 && inheritance.length) || isModelArticleWithOnChildren(model)) return null;

    var config = (_$ = $).extend.apply(_$, [true, {}].concat(_toConsumableArray(inheritance.reverse().map(function (inheritModel, index, arr) {
      var isLast = index === arr.length - 1;
      var defaults = isLast ? getModelConfigDefaults(inheritModel) : null;
      return $.extend(true, {}, defaults, inheritModel.get('_trickle'));
    }))));

    if (!config._isEnabled) return null;
    return config;
  }
  function getModelContainer(model) {
    var inheritance = getModelInheritanceChain(model);
    return inheritance === null || inheritance === void 0 ? void 0 : inheritance.find(function (inheritModel) {
      var defaults = getModelConfigDefaults(inheritModel);
      var config = $.extend(true, {}, defaults, inheritModel.get('_trickle'));
      return config._onChildren;
    });
  }
  function getCompletionAttribute() {
    var _Adapt$config$get;

    return ((_Adapt$config$get = Adapt.config.get('_trickle')) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._completionAttribute) || '_isComplete';
  }
  function checkApplyLocks(model) {
    var completionAttribute = getCompletionAttribute();
    if (!Object.prototype.hasOwnProperty.call(model.changed, completionAttribute)) return;
    debouncedApplyLocks();
  }
  function applyLocks() {
    if (!data.isReady) return;
    var completionAttribute = getCompletionAttribute();
    var locks = {};
    var modelsById = {};
    var TrickleButtonModel = Adapt.getModelClass('trickle-button');
    Adapt.course.getAllDescendantModels(true).filter(function (model) {
      return model.get('_isAvailable');
    }).forEach(function (siteModel) {
      var _trickleConfig$_stepL;

      var trickleConfig = getModelConfig(siteModel);
      if (!trickleConfig || !trickleConfig._isEnabled) return;
      var isStepLocked = Boolean(trickleConfig === null || trickleConfig === void 0 ? void 0 : (_trickleConfig$_stepL = trickleConfig._stepLocking) === null || _trickleConfig$_stepL === void 0 ? void 0 : _trickleConfig$_stepL._isEnabled);
      var isLocked = isStepLocked && !(siteModel !== null && siteModel !== void 0 && siteModel.get(completionAttribute)) && !(siteModel !== null && siteModel !== void 0 && siteModel.get('_isOptional'));
      var id = siteModel.get('_id');
      modelsById[id] = siteModel;
      locks[id] = locks[id] || false;

      var subsequentLockingModels = _getAncestorNextSiblings(siteModel);

      subsequentLockingModels.forEach(function (model, index) {
        var id = model.get('_id');
        var isButtonModel = model instanceof TrickleButtonModel;
        model.set('_isTrickled', !isButtonModel);
        modelsById[id] = model;
        locks[id] = locks[id] || isLocked;
        model.getAllDescendantModels().forEach(function (descendant) {
          var descendantId = descendant.get('_id');
          modelsById[descendantId] = descendant;
          locks[descendantId] = locks[id];
        });
      });
    });
    Object.entries(locks).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          id = _ref4[0],
          isLocked = _ref4[1];

      var model = modelsById[id];
      var wasLocked = model.get('_isLocked');
      if (wasLocked === isLocked) return;
      model.set('_isLocked', isLocked);
    });
    logTrickleState();
  }
  var debouncedApplyLocks = _.debounce(applyLocks, 1);
  function _getAncestorNextSiblings(fromModel) {
    if (!fromModel) return [];
    var allSiblings = fromModel.getParent().getAvailableChildModels();
    var subsequentSiblings = allSiblings.slice(allSiblings.findIndex(function (sibling) {
      return sibling === fromModel;
    }) + 1);
    var allAncestors = fromModel.getAncestorModels();
    var inPageAncestors = allAncestors.slice(0, allAncestors.findIndex(function (parent) {
      return parent instanceof ContentObjectModel;
    }) + 1);
    var subsequentInPageAncestors = [];
    inPageAncestors.slice(1).forEach(function (grandParent, previousIndex) {
      var parent = inPageAncestors[previousIndex];
      var allGrandParentChildren = grandParent.getAvailableChildModels();
      var subsequentAncestorSiblings = allGrandParentChildren.slice(allGrandParentChildren.findIndex(function (child) {
        return child === parent;
      }) + 1);
      subsequentInPageAncestors.push.apply(subsequentInPageAncestors, _toConsumableArray(subsequentAncestorSiblings));
    });
    var subsequentContentObjectDescendantModels = subsequentSiblings.concat(subsequentInPageAncestors);
    return subsequentContentObjectDescendantModels;
  }
  function addButtonComponents() {
    var TrickleButtonModel = Adapt.getModelClass('trickle-button');
    var uid = 0;
    data.forEach(function (buttonModelSite) {
      if (buttonModelSite instanceof CourseModel$1) return;
      var trickleConfig = getModelConfig(buttonModelSite);
      if (!trickleConfig || !(trickleConfig !== null && trickleConfig !== void 0 && trickleConfig._isEnabled) || buttonModelSite.get('_isTrickleSiteConfigured')) return;
      buttonModelSite.set('_isTrickleSiteConfigured', true);
      var parentId = buttonModelSite.get('_id');
      var trickleButtonModel = new TrickleButtonModel({
        _id: "trickle-".concat(uid++),
        _type: 'component',
        _component: 'trickle-button',
        _parentId: parentId,
        _isAvailable: true,
        _layout: 'full',
        _trickle: {
          _isEnabled: true
        },
        _renderPosition: 'outer-append',
        _isTrackable: false
      });
      trickleButtonModel.setupModel();
      buttonModelSite.getChildren().add(trickleButtonModel);
    });
  }
  function logTrickleState() {
    var _logging$_config, _Adapt$parentView, _Adapt$parentView$mod;

    if (((_logging$_config = logging._config) === null || _logging$_config === void 0 ? void 0 : _logging$_config._level) !== 'debug') return;

    if (!((_Adapt$parentView = Adapt.parentView) !== null && _Adapt$parentView !== void 0 && (_Adapt$parentView$mod = _Adapt$parentView.model) !== null && _Adapt$parentView$mod !== void 0 && _Adapt$parentView$mod.isTypeGroup('page'))) {
      logging.debug('TRICKLE GLOBAL STATE');
      Adapt.course.getAllDescendantModels(true).filter(function (model) {
        return model.get('_isAvailable');
      }).forEach(function (model) {
        var isLocked = model.get('_isLocked');
        var isTrickled = model.get('_isTrickled');
        logging.debug("".concat(' '.repeat(model.getAncestorModels().length)).concat(model.get('_type'), " ").concat(model.get('_id'), " isLocked: ").concat(isLocked, " isTrickled: ").concat(isTrickled));
      });
      return;
    }

    logging.debug('TRICKLE STATE');
    Adapt.parentView.model.getAllDescendantModels(true).filter(function (model) {
      return model.get('_isAvailable');
    }).forEach(function (model) {
      var isLocked = model.get('_isLocked');
      var isTrickled = model.get('_isTrickled');
      logging.debug("".concat(' '.repeat(model.getAncestorModels().length)).concat(model.get('_type'), " ").concat(model.get('_id'), " isLocked: ").concat(isLocked, " isTrickled: ").concat(isTrickled));
    });
  }
  __AMD("extensions/adapt-contrib-trickle/js/models", {
    _deepDefaults: _deepDefaults,
    configDefaults: configDefaults,
    getModelConfigDefaults: getModelConfigDefaults,
    getModelInheritanceChain: getModelInheritanceChain,
    getModelConfig: getModelConfig,
    getModelContainer: getModelContainer,
    getCompletionAttribute: getCompletionAttribute,
    checkApplyLocks: checkApplyLocks,
    applyLocks: applyLocks,
    debouncedApplyLocks: debouncedApplyLocks,
    _getAncestorNextSiblings: _getAncestorNextSiblings,
    addButtonComponents: addButtonComponents,
    logTrickleState: logTrickleState
  });

  var TrickleController = function (_Backbone$Controller) {
    _inherits(TrickleController, _Backbone$Controller);

    var _super = _createSuper(TrickleController);

    function TrickleController() {
      _classCallCheck(this, TrickleController);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleController, [{
      key: "initialize",
      value: function initialize() {
        this.checkIsFinished = _.debounce(this.checkIsFinished, 1);
        this.listenTo(data, {
          'ready': this.onDataReady,
          'change:_isInteractionComplete change:_isComplete change:_isAvailable add remove': checkApplyLocks,
          'change:_isLocked': this.checkIsFinished
        });
        this.listenTo(Adapt, {
          'assessments:reset': this.onAssessmentReset,
          'contentObjectView:preRender': this.reset,
          'view:addChild': this.onAddChildView,
          'trickle:kill': this.kill
        });
      }
    }, {
      key: "onAssessmentReset",
      value: function onAssessmentReset() {
        var _Adapt$parentView;

        var isMidRender = !((_Adapt$parentView = Adapt.parentView) !== null && _Adapt$parentView !== void 0 && _Adapt$parentView.model.get('_isReady'));
        if (isMidRender) return applyLocks();
        debouncedApplyLocks();
      }
    }, {
      key: "onDataReady",
      value: function () {
        var _onDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  Adapt.wait["for"](function (done) {
                    addButtonComponents();
                    applyLocks();
                    done();
                  });

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onDataReady() {
          return _onDataReady.apply(this, arguments);
        }

        return onDataReady;
      }()
    }, {
      key: "isStarted",
      get: function () {
        var _Adapt$parentView2;

        return Boolean((_Adapt$parentView2 = Adapt.parentView) === null || _Adapt$parentView2 === void 0 ? void 0 : _Adapt$parentView2.model.get('_isTrickleStarted'));
      },
      set: function (value) {
        if (!Adapt.parentView) return;
        Adapt.parentView.model.set('_isTrickleStarted', value);
        if (!value) return;
        Adapt.trigger('trickle:started');
      }
    }, {
      key: "onAddChildView",
      value: function onAddChildView(event) {
        if (this.isKilled) return;
        if (event.hasRequestChild) applyLocks();
        var isManagedByTrickleAndLocked = event.model.get('_isTrickled') && event.model.get('_isLocked');
        if (!isManagedByTrickleAndLocked) return;
        event.stop();
      }
    }, {
      key: "isTrickling",
      get: function () {
        var isTrickling = Adapt.parentView.model.getAllDescendantModels().some(function (model) {
          return model.get('_isAvailable') && model.get('_isTrickled') && model.get('_isLocked');
        });
        return isTrickling;
      }
    }, {
      key: "continue",
      value: function () {
        var _continue2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  applyLocks();
                  _context2.next = 3;
                  return Adapt.parentView.addChildren();

                case 3:
                  _context2.next = 5;
                  return Adapt.parentView.whenReady();

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function _continue() {
          return _continue2.apply(this, arguments);
        }

        return _continue;
      }()
    }, {
      key: "scroll",
      value: function () {
        var _scroll = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(fromModel) {
          var trickleConfig, isAutoScrollOff, hasTrickleButton, getScrollToId, scrollToId, isDescendant, model, contentObject, duration;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  trickleConfig = getModelConfig(fromModel);

                  if (trickleConfig !== null && trickleConfig !== void 0 && trickleConfig._isEnabled) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 3:
                  if (!isModelArticleWithOnChildren(fromModel)) {
                    _context3.next = 5;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 5:
                  isAutoScrollOff = !trickleConfig._autoScroll;
                  hasTrickleButton = trickleConfig._button._isEnabled;

                  if (!(isAutoScrollOff && !hasTrickleButton)) {
                    _context3.next = 9;
                    break;
                  }

                  return _context3.abrupt("return");

                case 9:
                  getScrollToId = function () {
                    var scrollTo = trickleConfig._scrollTo;
                    var firstCharacter = scrollTo.substr(0, 1);

                    switch (firstCharacter) {
                      case '@':
                        {
                          var relativeModel = fromModel.findRelativeModel(scrollTo, {
                            filter: function (model) {
                              return model.get('_isAvailable');
                            }
                          });
                          if (relativeModel === undefined) return;
                          return relativeModel.get('_id');
                        }

                      case '.':
                        return scrollTo.substr(1, scrollTo.length - 1);

                      default:
                        return scrollTo;
                    }
                  };

                  scrollToId = getScrollToId();

                  if (!(scrollToId === '')) {
                    _context3.next = 13;
                    break;
                  }

                  return _context3.abrupt("return");

                case 13:
                  isDescendant = Adapt.parentView.model.getAllDescendantModels().some(function (model) {
                    return model.get('_id') === scrollToId;
                  });

                  if (isDescendant) {
                    _context3.next = 24;
                    break;
                  }

                  applyLocks();
                  model = Adapt.findById(scrollToId);
                  contentObject = model.isTypeGroup('contentobject') ? model : model.findAncestor('contentobject');
                  _context3.next = 20;
                  return Adapt.navigateToElement(contentObject.get('_id'));

                case 20:
                  scrollToId = getScrollToId();
                  _context3.next = 23;
                  return Adapt.navigateToElement(scrollToId);

                case 23:
                  return _context3.abrupt("return");

                case 24:
                  _context3.next = 26;
                  return Adapt.parentView.renderTo(scrollToId);

                case 26:
                  if (hasTrickleButton) {
                    a11y.focusFirst($('.' + scrollToId), {
                      preventScroll: true
                    });
                  }

                  if (!isAutoScrollOff) {
                    _context3.next = 29;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 29:
                  duration = trickleConfig._scrollDuration || 500;
                  Adapt.scrollTo('.' + scrollToId, {
                    duration: duration
                  });

                case 31:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function scroll(_x) {
          return _scroll.apply(this, arguments);
        }

        return scroll;
      }()
    }, {
      key: "isFinished",
      get: function () {
        if (!Adapt.parentView) return false;
        return Boolean(!this.isStarted || Adapt.parentView.model.get('_isTrickleFinished') || this.isKilled);
      },
      set: function (value) {
        if (!Adapt.parentView) return;
        Adapt.parentView.model.set('_isTrickleFinished', value);
        if (!value) return;
        Adapt.trigger('trickle:finished');
      }
    }, {
      key: "checkIsFinished",
      value: function checkIsFinished() {
        if (!this.isStarted) return;
        if (this.isKilled || this.isFinished) return;
        if (this.isTrickling) return;
        this.isFinished = true;
      }
    }, {
      key: "kill",
      value: function () {
        var _kill = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var TrickleModel;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  TrickleModel = Adapt.getModelClass('trickle-button');
                  this.isKilled = true;
                  Adapt.parentView.model.getAllDescendantModels().forEach(function (model) {
                    var isButtonModel = model instanceof TrickleModel;

                    if (isButtonModel) {
                      model.setCompletionStatus();
                    }

                    if (!model.get('_isTrickled')) return;
                    model.set('_isLocked', false);
                  });
                  _context4.next = 5;
                  return this["continue"]();

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function kill() {
          return _kill.apply(this, arguments);
        }

        return kill;
      }()
    }, {
      key: "isKilled",
      get: function () {
        if (!Adapt.parentView) return false;
        return !this.isStarted || Adapt.parentView.model.get('_isTrickleKilled');
      },
      set: function (value) {
        if (!Adapt.parentView) return;
        Adapt.parentView.model.set('_isTrickleKilled', value);
        if (!value) return;
        Adapt.trigger('trickle:killed');
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isKilled = false;

        if (!this.isTrickling) {
          this.isStarted = false;
          this.isFinished = false;
          return;
        }

        this.isStarted = true;
        this.isFinished = false;
      }
    }]);

    return TrickleController;
  }(Backbone.Controller);

  var controller = __AMD("extensions/adapt-contrib-trickle/js/controller", new TrickleController());

  var TrickleButtonView = function (_ComponentView) {
    _inherits(TrickleButtonView, _ComponentView);

    var _super = _createSuper(TrickleButtonView);

    function TrickleButtonView() {
      _classCallCheck(this, TrickleButtonView);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleButtonView, [{
      key: "className",
      value: function className() {
        var config = getModelConfig(this.model.getParent());
        return ['trickle', this.model.get('_id'), config._button._component, config._button._isFullWidth && 'is-full-width', config._button._className].filter(Boolean).join(' ');
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-trickle-btn': 'onButtonClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.openPopupCount = 0;
        this.isAwaitingPopupClose = false;
        this.wasButtonClicked = false;
        this.model.calculateButtonText();
        this.calculateButtonState();
        this.setupEventListeners();
        this.render();

        if (!this.model.isEnabled()) {
          this.setCompletionStatus();
        }

        _.defer(this.setReadyStatus.bind(this));
      }
    }, {
      key: "calculateButtonState",
      value: function calculateButtonState() {
        var isDisabledByPopups = this.openPopupCount > 0;
        this.model.calculateButtonState(isDisabledByPopups, this.wasButtonClicked);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data._globals = Adapt.course.get('_globals');
        data._trickle = getModelConfig(this.model.getParent());
        this.$el.html(Handlebars.templates[TrickleButtonView.template](data));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _this$listenTo;

        this.tryButtonAutoHide = this.tryButtonAutoHide.bind(this);
        var onParentComplete = this.onParentComplete.bind(this);

        this.onParentComplete = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _.delay(function () {
            return onParentComplete.apply(void 0, args);
          }, 100);
        };

        this.listenTo(Adapt.parentView, 'postRemove', this.onRemove);
        this.listenTo(Adapt, 'trickle:killed', this.updateButtonState);

        if (this.model.isStepUnlocked() && this.model.isFinished()) {
          return;
        }

        this.$el.on('onscreen', this.tryButtonAutoHide);
        this.listenTo(Adapt, {
          'popup:opened': this.onPopupOpened,
          'popup:closed': this.onPopupClosed
        });
        var parentModel = this.model.getParent();
        var completionAttribute = getCompletionAttribute();
        this.listenTo(parentModel, (_this$listenTo = {
          'change:_requireCompletionOf': this.onStepUnlocked
        }, _defineProperty(_this$listenTo, "bubble:change:".concat(completionAttribute), this.onStepUnlocked), _defineProperty(_this$listenTo, "change:".concat(completionAttribute), this.onParentComplete), _this$listenTo));
      }
    }, {
      key: "onPopupOpened",
      value: function onPopupOpened() {
        this.openPopupCount++;
        var shouldUserInteractWithButton = this.model.isStepUnlocked() && !this.model.isFinished();
        if (!shouldUserInteractWithButton) return;
        this.updateButtonState();
      }
    }, {
      key: "onPopupClosed",
      value: function () {
        var _onPopupClosed = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var shouldUserInteractWithButton;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.openPopupCount--;

                  if (!this.openPopupCount) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  if (!this.isAwaitingPopupClose) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt("return", this.finish());

                case 5:
                  shouldUserInteractWithButton = this.model.isStepUnlocked() && !this.model.isFinished();

                  if (shouldUserInteractWithButton) {
                    _context.next = 8;
                    break;
                  }

                  return _context.abrupt("return");

                case 8:
                  this.updateButtonState();
                  _context.next = 11;
                  return Adapt.parentView.addChildren();

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function onPopupClosed() {
          return _onPopupClosed.apply(this, arguments);
        }

        return onPopupClosed;
      }()
    }, {
      key: "updateButtonState",
      value: function updateButtonState() {
        this.calculateButtonState();
        var isButtonHidden = !(this.model.get('_isButtonVisible') && !this.model.get('_isButtonAutoHidden'));
        this.$('.js-trickle-btn-container').toggleClass('u-display-none', isButtonHidden);
        var isButtonDisabled = this.model.get('_isButtonDisabled');
        var $button = this.$('.js-trickle-btn');
        var $ariaLabel = this.$('.aria-label');
        Adapt.a11y.toggleEnabled($button, !isButtonDisabled);

        if (!isButtonDisabled) {
          if (document.activeElement instanceof HTMLElement && document.activeElement.isSameNode($ariaLabel[0])) {
            a11y.focusNext($ariaLabel);
          }

          a11y.toggleAccessibleEnabled($ariaLabel, false);
        }

        var $buttonText = this.$('.js-trickle-btn-text');
        var text = this.model.get('buttonText');
        var ariaLabel = this.model.get('buttonAriaLabel');
        $buttonText.html(text);
        $button.attr('aria-label', ariaLabel);
      }
    }, {
      key: "onStepUnlocked",
      value: function () {
        var _onStepUnlocked = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(event) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(event.value === false)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _.defer(this.updateButtonState.bind(this));

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function onStepUnlocked(_x) {
          return _onStepUnlocked.apply(this, arguments);
        }

        return onStepUnlocked;
      }()
    }, {
      key: "onButtonClick",
      value: function () {
        var _onButtonClick = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var wasComplete, isStepLockingCompletionRequired;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  wasComplete = this.model.get('_isComplete');
                  this.model.setCompletionStatus();
                  this.wasButtonClicked = true;
                  isStepLockingCompletionRequired = this.model.isStepLockingCompletionRequired();

                  if (!(isStepLockingCompletionRequired && !wasComplete)) {
                    _context3.next = 6;
                    break;
                  }

                  return _context3.abrupt("return");

                case 6:
                  _context3.next = 8;
                  return this["continue"]();

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function onButtonClick() {
          return _onButtonClick.apply(this, arguments);
        }

        return onButtonClick;
      }()
    }, {
      key: "onParentComplete",
      value: function () {
        var _onParentComplete = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(model, value) {
          var _this$stopListening;

          var parentModel, completionAttribute;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (value) {
                    _context4.next = 2;
                    break;
                  }

                  return _context4.abrupt("return");

                case 2:
                  parentModel = this.model.getParent();
                  completionAttribute = getCompletionAttribute();
                  this.stopListening(parentModel, (_this$stopListening = {}, _defineProperty(_this$stopListening, "bubble:change:".concat(completionAttribute), this.onStepUnlocked), _defineProperty(_this$stopListening, "change:".concat(completionAttribute), this.onParentComplete), _this$stopListening));

                  if (!controller.isKilled) {
                    _context4.next = 7;
                    break;
                  }

                  return _context4.abrupt("return");

                case 7:
                  if (!(this.openPopupCount > 0)) {
                    _context4.next = 10;
                    break;
                  }

                  this.isAwaitingPopupClose = true;
                  return _context4.abrupt("return");

                case 10:
                  _context4.next = 12;
                  return this.finish();

                case 12:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function onParentComplete(_x2, _x3) {
          return _onParentComplete.apply(this, arguments);
        }

        return onParentComplete;
      }()
    }, {
      key: "finish",
      value: function () {
        var _finish = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var isStepLockingCompletionRequired;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.stopListening(Adapt, {
                    'popup:opened': this.onPopupOpened,
                    'popup:closed': this.onPopupClosed
                  });
                  this.updateButtonState();
                  isStepLockingCompletionRequired = this.model.isStepLockingCompletionRequired();

                  if (isStepLockingCompletionRequired) {
                    _context5.next = 5;
                    break;
                  }

                  return _context5.abrupt("return");

                case 5:
                  _context5.next = 7;
                  return this["continue"]();

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function finish() {
          return _finish.apply(this, arguments);
        }

        return finish;
      }()
    }, {
      key: "continue",
      value: function () {
        var _continue2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
          var parent;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  parent = this.model.getParent();
                  _context6.next = 3;
                  return controller["continue"]();

                case 3:
                  _context6.next = 5;
                  return controller.scroll(parent);

                case 5:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function _continue() {
          return _continue2.apply(this, arguments);
        }

        return _continue;
      }()
    }, {
      key: "tryButtonAutoHide",
      value: function tryButtonAutoHide() {
        if (!this.model.get('_isButtonVisible')) return;
        var trickleConfig = getModelConfig(this.model.getParent());

        if (!trickleConfig._button._autoHide) {
          this.model.set('_isButtonAutoHidden', false);
          return;
        }

        var measurements = this.$el.onscreen();
        var isJustOffscreen = measurements.bottom > -100;
        var isButtonAutoHidden = !measurements.onscreen && !isJustOffscreen;
        this.model.set('_isButtonAutoHidden', isButtonAutoHidden);
        this.updateButtonState();
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.$el.off('onscreen', this.tryButtonAutoHide);
        this.remove();
      }
    }]);

    return TrickleButtonView;
  }(ComponentView$1);

  TrickleButtonView.template = 'trickle-button';
  var TrickleButtonView$1 = __AMD("extensions/adapt-contrib-trickle/js/TrickleButtonView", TrickleButtonView);

  var TrickleButtonModel = __AMD("extensions/adapt-contrib-trickle/js/TrickleButtonModel", function (_ComponentModel) {
    _inherits(TrickleButtonModel, _ComponentModel);

    var _super = _createSuper(TrickleButtonModel);

    function TrickleButtonModel() {
      _classCallCheck(this, TrickleButtonModel);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleButtonModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(TrickleButtonModel.prototype), "init", this).call(this);

        if (!this.isStepComplete()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _trickleConfig$_butto;

        var trickleConfig = getModelConfig(this.getParent());
        var isEnabled = trickleConfig._isEnabled && ((_trickleConfig$_butto = trickleConfig._button) === null || _trickleConfig$_butto === void 0 ? void 0 : _trickleConfig$_butto._isEnabled);
        return isEnabled;
      }
    }, {
      key: "isStepLocking",
      value: function isStepLocking() {
        var _config$_stepLocking;

        var config = getModelConfig(this.getParent());
        var isStepLocking = (_config$_stepLocking = config._stepLocking) === null || _config$_stepLocking === void 0 ? void 0 : _config$_stepLocking._isEnabled;
        return isStepLocking;
      }
    }, {
      key: "isStepLockingCompletionRequired",
      value: function isStepLockingCompletionRequired() {
        var config = getModelConfig(this.getParent());
        var isStepLockingCompletionRequired = config._stepLocking && config._stepLocking._isEnabled && config._stepLocking._isCompletionRequired;
        return isStepLockingCompletionRequired;
      }
    }, {
      key: "isStepUnlocked",
      value: function isStepUnlocked() {
        var _this = this;

        var completionAttribute = getCompletionAttribute();
        var isCompletionBlocked = this.getParent().get('_requireCompletionOf') === Number.POSITIVE_INFINITY;
        if (isCompletionBlocked) return;
        return this.getSiblings().every(function (sibling) {
          if (sibling === _this) {
            return true;
          }

          return sibling.get(completionAttribute) || sibling.get('_isOptional') || !sibling.get('_isAvailable');
        });
      }
    }, {
      key: "isStepComplete",
      value: function isStepComplete() {
        var completionAttribute = getCompletionAttribute();
        var isParentComplete = this.getParent().get(completionAttribute);
        return isParentComplete;
      }
    }, {
      key: "isStepLockedOnRevisit",
      value: function isStepLockedOnRevisit() {
        var trickleConfig = getModelConfig(this.getParent());
        return Boolean(trickleConfig._stepLocking._isLockedOnRevisit);
      }
    }, {
      key: "isFinished",
      value: function isFinished() {
        var isStepUnlocked = this.isStepUnlocked();
        var isStepLockingCompletionRequired = this.isStepLockingCompletionRequired();
        var isButtonComplete = this.get('_isComplete');
        var isFinished = (isStepUnlocked || !isStepLockingCompletionRequired) && isButtonComplete;
        return isFinished;
      }
    }, {
      key: "isLastInContentObject",
      value: function isLastInContentObject() {
        var contentObject = this.findAncestor('contentobject');
        var allDescendants = contentObject.getAllDescendantModels(true);
        var lastDescendant = allDescendants[allDescendants.length - 1];
        return this === lastDescendant;
      }
    }, {
      key: "calculateButtonText",
      value: function calculateButtonText() {
        var parentModel = this.getParent();
        var trickleConfig = getModelConfig(parentModel);
        var isStart = false;
        var isFinal = false;

        if (trickleConfig._onChildren) {
          var parentId = parentModel.get('_id');
          var trickleParent = getModelContainer(parentModel);
          var trickleSiblings = trickleParent.getAllDescendantModels(true).filter(function (model) {
            return model.get('_isAvailable') && model.get('_isTrickled');
          });
          var index = trickleSiblings.findIndex(function (model) {
            return model.get('_id') === parentId;
          });
          isStart = index === 0;
          isFinal = index === trickleSiblings.length - 1 && !trickleParent.get('_canRequestChild');
        }

        var text = isStart && trickleConfig._button.startText ? trickleConfig._button.startText : isFinal && trickleConfig._button.finalText ? trickleConfig._button.finalText : trickleConfig._button.text;
        var ariaLabel = isStart && trickleConfig._button.startAriaLabel ? trickleConfig._button.startAriaLabel : isFinal && trickleConfig._button.finalAriaLabel ? trickleConfig._button.finalAriaLabel : trickleConfig._button.ariaLabel;
        this.set({
          buttonText: text,
          buttonAriaLabel: ariaLabel
        });
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        if (this.isStepUnlocked() && !this.isStepLockedOnRevisit()) return;
        this.set({
          _isComplete: false,
          _isInteractionComplete: false
        });
      }
    }, {
      key: "calculateButtonState",
      value: function calculateButtonState() {
        var isButtonDisableForced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var isButtonHiddenForced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.isEnabled()) {
          this.set({
            _isButtonVisible: false,
            _isButtonDisabled: !this.isStepUnlocked()
          });
          return;
        }
        var trickleConfig = getModelConfig(this.getParent());

        if (this.isLastInContentObject() && trickleConfig._button._showEndOfPage === false) {
          return this.set({
            _isButtonVisible: false,
            _isButtonDisabled: true
          });
        }

        var isTrickleKilled = controller.isKilled;
        var isStepUnlocked = this.isStepUnlocked() || isTrickleKilled;
        var isFinished = this.isFinished() || isTrickleKilled;
        var isButtonVisibleBeforeCompletion = trickleConfig._button._styleBeforeCompletion !== 'hidden';
        var isButtonVisibleAfterCompletion = trickleConfig._button._styleAfterClick !== 'hidden' && !trickleConfig._button._isFullWidth;
        var isStepLockingCompletionRequired = this.isStepLockingCompletionRequired();
        var isNoCompletionRequiredAndLockedVisible = !isStepLockingCompletionRequired && !isFinished && isButtonVisibleBeforeCompletion;
        var isNoCompletionRequiredAndUnlockedVisible = !isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isNoCompletionRequiredAndFinishedVisible = !isStepLockingCompletionRequired && isFinished && isButtonVisibleAfterCompletion;
        var isStepLockedAndVisibleBeforeCompletion = isStepLockingCompletionRequired && !isStepUnlocked && isButtonVisibleBeforeCompletion && !isButtonHiddenForced;
        var isFinishedAndVisibleAfterCompletion = isStepLockingCompletionRequired && isFinished && isButtonVisibleAfterCompletion;
        var isStepUnlockedAndButtonIncomplete = isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isButtonVisible = isNoCompletionRequiredAndLockedVisible || isNoCompletionRequiredAndUnlockedVisible || isNoCompletionRequiredAndFinishedVisible || isStepLockedAndVisibleBeforeCompletion || isFinishedAndVisibleAfterCompletion || isStepUnlockedAndButtonIncomplete;
        var isButtonEnabledBeforeCompletion = trickleConfig._button._styleBeforeCompletion !== 'disabled';
        var isButtonEnabledAfterCompletion = trickleConfig._button._styleAfterClick !== 'disabled';
        var isNoCompletionRequiredAndLockedEnabled = !isStepLockingCompletionRequired && !isFinished && isButtonEnabledBeforeCompletion;
        var isNoCompletionRequiredAndUnlockedEnabled = !isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isNoCompletionRequiredAndFinishedEnabled = !isStepLockingCompletionRequired && isFinished && isButtonEnabledAfterCompletion;
        var isStepUnlockedAndButtonIncompleteWithoutButtonDisabledForced = isStepLockingCompletionRequired && isStepUnlockedAndButtonIncomplete && !isButtonDisableForced;
        var isFinishedAndEnabledAfterCompletion = isStepLockingCompletionRequired && isFinished && isButtonEnabledAfterCompletion;
        var isButtonEnabled = isNoCompletionRequiredAndLockedEnabled || isNoCompletionRequiredAndUnlockedEnabled || isNoCompletionRequiredAndFinishedEnabled || isStepUnlockedAndButtonIncompleteWithoutButtonDisabledForced || isFinishedAndEnabledAfterCompletion || false;
        this.set({
          _isButtonVisible: isButtonVisible,
          _isButtonDisabled: !isButtonEnabled
        });
      }
    }]);

    return TrickleButtonModel;
  }(ComponentModel$1));

  __AMD("extensions/adapt-contrib-trickle/js/trickleButton", Adapt.register('trickle-button', {
    view: TrickleButtonView$1,
    model: TrickleButtonModel
  }));

  __AMD("extensions/adapt-contrib-trickle/js/adapt-contrib-trickle", Adapt.trickle = controller);

  var TUTOR_TYPE = ENUM(['NOTIFY', 'INLINE', 'OVERLAY', 'NONE']);
  var TUTOR_TYPE$1 = __AMD("extensions/adapt-contrib-tutor/js/TUTOR_TYPE", TUTOR_TYPE);

  var TutorModel = __AMD("extensions/adapt-contrib-tutor/js/TutorModel", function (_Backbone$Model) {
    _inherits(TutorModel, _Backbone$Model);

    var _super = _createSuper(TutorModel);

    function TutorModel() {
      _classCallCheck(this, TutorModel);

      return _super.apply(this, arguments);
    }

    _createClass(TutorModel, [{
      key: "defaults",
      value: function defaults() {
        return _objectSpread2({
          _type: TUTOR_TYPE$1.NOTIFY.asLowerCase,
          _classes: '',
          _hasNotifyBottomButton: false,
          _button: {
            text: '{{_globals._extensions._tutor.hideFeedback}}',
            ariaLabel: '{{_globals._extensions._tutor.hideFeedback}}'
          }
        }, Adapt.course.get('_tutor'));
      }
    }, {
      key: "initialize",
      value: function initialize(data, parentModel) {
        var _data;

        data = $.extend(true, this.defaults(), ((_data = data) === null || _data === void 0 ? void 0 : _data._isInherited) === true ? null : data, {
          _attributes: {
            'data-adapt-id': parentModel.get('_id')
          },
          title: parentModel.get('feedbackTitle'),
          body: parentModel.get('feedbackMessage')
        });
        data._classes += " tutor ".concat(this.getOriginClasses(parentModel));
        this.set(data);
      }
    }, {
      key: "getOriginClasses",
      value: function getOriginClasses(model) {
        var component = model.get('_component');
        var extension = model.get('_extension');
        return [model.get('_isCorrect') ? 'is-correct' : model.get('_isAtLeastOneCorrectSelection') ? 'is-partially-correct' : 'is-incorrect', component && "is-component is-".concat(component), extension && "is-extension is-".concat(extension)].filter(Boolean).join(' ');
      }
    }]);

    return TutorModel;
  }(Backbone.Model));

  var TutorNotify = __AMD("extensions/adapt-contrib-tutor/js/TutorNotify", function (_Backbone$Controller) {
    _inherits(TutorNotify, _Backbone$Controller);

    var _super = _createSuper(TutorNotify);

    function TutorNotify() {
      _classCallCheck(this, TutorNotify);

      return _super.apply(this, arguments);
    }

    _createClass(TutorNotify, [{
      key: "initialize",
      value: function initialize(options) {
        this.parentView = options.parentView;
        this.listenToOnce(Adapt, 'notify:closed', this.onNotifyClosed);
        this.triggerNotify();
      }
    }, {
      key: "triggerNotify",
      value: function triggerNotify() {
        var _this$model$toJSON = this.model.toJSON(),
            isButtonEnabled = _this$model$toJSON._hasNotifyBottomButton,
            promptText = _this$model$toJSON._button.text;

        this.notifyOptions = _objectSpread2(_objectSpread2({}, this.model.toJSON()), {}, {
          _prompts: isButtonEnabled && [{
            promptText: Handlebars.compile(promptText)({
              _globals: Adapt.course.get('_globals')
            })
          }],
          _type: isButtonEnabled ? 'prompt' : 'popup'
        });
        notify.create(this.notifyOptions);
        Adapt.trigger('tutor:opened', this.parentView, this.notifyOptions);
      }
    }, {
      key: "onNotifyClosed",
      value: function onNotifyClosed() {
        Adapt.trigger('tutor:closed', this.parentView, this.notifyOptions);
      }
    }]);

    return TutorNotify;
  }(Backbone.Controller));

  var TutorView = __AMD("extensions/adapt-contrib-tutor/js/TutorView", function (_Backbone$View) {
    _inherits(TutorView, _Backbone$View);

    var _super = _createSuper(TutorView);

    function TutorView() {
      _classCallCheck(this, TutorView);

      return _super.apply(this, arguments);
    }

    _createClass(TutorView, [{
      key: "className",
      value: function className() {
        return ['tutor', "tutor-type-".concat(this.model.get('_type')), this.model.get('_classes')].join(' ');
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-tutor-btn': 'onCloseClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(options) {
        this.parentView = options.parentView;
        this.buttonsView = this.parentView.buttonsView;
        this.listenTo(this.parentView, 'postRemove', this.onTutorClosed);
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonsStateUpdate);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(Handlebars.templates.tutor(this.model.toJSON()));

        _.defer(this.postRender.bind(this));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.toggleFeedback({
          shouldOpen: true
        });
      }
    }, {
      key: "toggleFeedback",
      value: function toggleFeedback() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            shouldOpen = _ref.shouldOpen,
            _ref$shouldManageFocu = _ref.shouldManageFocus,
            shouldManageFocus = _ref$shouldManageFocu === void 0 ? true : _ref$shouldManageFocu;

        var animation = this.model.get('_type') === 'inline' ? 'slide' : 'fade';
        var onAnimationEnd = shouldOpen ? this.onTutorOpened.bind(this, shouldManageFocus) : this.onTutorClosed.bind(this, shouldManageFocus);

        if (shouldManageFocus) {
          a11y.toggleEnabled(this.buttonsView.$('.js-btn-feedback'), !shouldOpen);
        }

        this.$('.tutor__inner').stop()["".concat(animation, "Toggle")](200, onAnimationEnd);
      }
    }, {
      key: "onCloseClick",
      value: function onCloseClick() {
        this.toggleFeedback({
          shouldOpen: false
        });
      }
    }, {
      key: "onTutorOpened",
      value: function onTutorOpened(shouldManageFocus) {
        if (shouldManageFocus) {
          a11y.focus(this.$('.tutor__inner'), {
            defer: true,
            preventScroll: true
          });
        }

        Adapt.trigger('tutor:opened', this.parentView, this.model.toJSON());
      }
    }, {
      key: "onTutorClosed",
      value: function onTutorClosed(shouldManageFocus) {
        if (shouldManageFocus) {
          var $showFeedbackButton = this.buttonsView.$('.js-btn-feedback');
          a11y.focus($showFeedbackButton, {
            defer: true,
            preventScroll: true
          });
        }

        Adapt.trigger('tutor:closed', this.parentView, this.model.toJSON());
        this.remove();
      }
    }, {
      key: "onButtonsStateUpdate",
      value: function onButtonsStateUpdate(state) {
        if (state !== BUTTON_STATE$1.RESET) return;
        this.toggleFeedback({
          shouldOpen: false,
          shouldManageFocus: false
        });
      }
    }]);

    return TutorView;
  }(Backbone.View));

  var Tutor = function (_Backbone$Controller) {
    _inherits(Tutor, _Backbone$Controller);

    var _super = _createSuper(Tutor);

    function Tutor() {
      _classCallCheck(this, Tutor);

      return _super.apply(this, arguments);
    }

    _createClass(Tutor, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'questionView:showFeedback', this.onQuestionViewShowFeedback);
      }
    }, {
      key: "onQuestionViewShowFeedback",
      value: function onQuestionViewShowFeedback(view) {
        var parentModel = view.model;
        var tutorModel = new TutorModel(parentModel.get('_tutor'), parentModel);
        var options = {
          model: tutorModel,
          parentView: view
        };

        switch (TUTOR_TYPE$1(tutorModel.get('_type').toUpperCase())) {
          case TUTOR_TYPE$1.NOTIFY:
            new TutorNotify(options);
            break;

          case TUTOR_TYPE$1.INLINE:
          case TUTOR_TYPE$1.OVERLAY:
            view.$('.component__inner').append(new TutorView(options).$el);
            break;

          case TUTOR_TYPE$1.NONE:
        }
      }
    }]);

    return Tutor;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-tutor/js/adapt-contrib-tutor", Adapt.tutor = new Tutor());

  var xAPI = Backbone.Model.extend({
    defaults: {
      lang: 'en-US',
      displayLang: 'en-US',
      generateIds: false,
      activityId: null,
      actor: null,
      shouldTrackState: true,
      shouldUseRegistration: false,
      componentBlacklist: 'blank,graphic',
      isInitialised: false,
      state: {}
    },
    startAttemptDuration: 0,
    startTimeStamp: null,
    courseName: '',
    courseDescription: '',
    defaultLang: 'en-US',
    isComplete: false,
    debug: false,
    coreEvents: {
      Adapt: {
        'router:page': false,
        'router:menu': false,
        'assessments:complete': true,
        'questionView:recordInteraction': true
      },
      contentObjects: {
        'change:_isComplete': false
      },
      articles: {
        'change:_isComplete': false
      },
      blocks: {
        'change:_isComplete': false
      },
      components: {
        'change:_isComplete': true
      }
    },
    coreObjects: {
      course: 'course',
      contentObjects: ['menu', 'page'],
      articles: 'article',
      blocks: 'block',
      components: 'component',
      offlineStorage: 'offlineStorage'
    },
    initialize: function () {
      if (!Adapt.config) {
        return;
      }

      this.config = Adapt.config.get('_xapi');

      if (!this.getConfig('_isEnabled')) {
        return this;
      }

      Adapt.wait.begin();
      this.initializeWrapper(_.bind(function (error) {
        if (error) {
          this.onInitialised(error);
          return this;
        }

        this.set({
          activityId: this.getLRSAttribute('activity_id') || this.getConfig('_activityID') || this.getBaseUrl(),
          displayLang: Adapt.config.get('_defaultLanguage'),
          lang: this.getConfig('_lang'),
          generateIds: this.getConfig('_generateIds'),
          shouldTrackState: this.getConfig('_shouldTrackState'),
          shouldUseRegistration: this.getConfig('_shouldUseRegistration') || false,
          componentBlacklist: this.getConfig('_componentBlacklist') || []
        });
        var componentBlacklist = this.get('componentBlacklist');

        if (!_.isArray(componentBlacklist)) {
          componentBlacklist = componentBlacklist.split(/,\s?/).map(function (component) {
            return component.toLowerCase();
          });
        }

        this.set('componentBlacklist', componentBlacklist);

        if (!this.validateProps()) {
          var error = new Error('Missing required properties');
          Adapt.log.error('adapt-contrib-xapi: xAPI Wrapper initialisation failed', error);
          this.onInitialised(error);
          return this;
        }

        this.startTimeStamp = new Date();
        this.courseName = Adapt.course.get('displayTitle') || Adapt.course.get('title');
        this.courseDescription = Adapt.course.get('description') || '';
        var statements = [this.getCourseStatement(ADL.verbs.launched), this.getCourseStatement(ADL.verbs.initialized)];
        this.sendStatements(statements, _.bind(function (error) {
          if (error) {
            this.onInitialised(error);
            return this;
          }

          if (['ios', 'android'].indexOf(Adapt.device.OS) > -1) {
            $(document).on('visibilitychange', this.onVisibilityChange.bind(this));
          } else {
            $(window).on('beforeunload unload', this.sendUnloadStatements.bind(this));
          }

          if (!this.get('shouldTrackState')) {
            this.onInitialised();
            return this;
          }

          this.getState(_.bind(function (error) {
            if (error) {
              this.onInitialised(error);
              return this;
            }

            if (_.isEmpty(this.get('state'))) {
              this.sendStatement(this.getCourseStatement(ADL.verbs.attempted));
            } else {
              this.sendStatement(this.getCourseStatement(ADL.verbs.resumed));
            }

            this.restoreState();
            this.onInitialised();
            return this;
          }, this));
        }, this));
      }, this));
    },
    getLearnerInfo: function () {
      var globals = Adapt.course.get('_globals');

      if (!globals._learnerInfo) {
        globals._learnerInfo = {};
      }

      _.extend(globals._learnerInfo, Adapt.offlineStorage.get('learnerinfo'));
    },
    initializeWrapper: function (callback) {
      if (!this.getConfig('_endpoint')) {
        this.xapiWrapper = window.xapiWrapper || ADL.XAPIWrapper;

        if (this.checkWrapperConfig()) {
          this.set({
            registration: this.getLRSAttribute('registration'),
            actor: this.getLRSAttribute('actor')
          });
          this.xapiWrapper.strictCallbacks = true;
          callback();
        } else {
          ADL.launch(_.bind(function (error, launchData, xapiWrapper) {
            if (error) {
              return callback(error);
            }

            this.xapiWrapper = xapiWrapper;
            this.set({
              actor: launchData.actor
            });
            this.xapiWrapper.strictCallbacks = true;
            callback();
          }, this), true, true);
        }
      } else {
        var uuidv4 = function () {
          return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
            return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
          });
        };

        var getDomain = function (url) {
          var domain = new URL(url).hostname;
          var elems = domain.split('.');
          var iMax = elems.length - 1;
          var isSecondLevel = elems.length >= 3 && (elems[iMax] + elems[iMax - 1]).length <= 5;
          var tld = elems.splice(isSecondLevel ? -3 : -2).join('.');

          if (tld != "localhost") {
            return "." + tld;
          }

          return tld;
        };

        var setCookie = function (cname, cvalue, exdays) {
          var d = new Date();
          d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
          var expires = "expires=" + d.toUTCString();
          document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;domain=" + getDomain(window.location);
        };

        var getCookie = function (cname) {
          var name = cname + "=";
          var decodedCookie = decodeURIComponent(document.cookie);
          var ca = decodedCookie.split(';');

          for (var i = 0; i < ca.length; i++) {
            var c = ca[i];

            while (c.charAt(0) == ' ') {
              c = c.substring(1);
            }

            if (c.indexOf(name) == 0) {
              return c.substring(name.length, c.length);
            }
          }

          return "";
        };

        this.xapiWrapper = window.xapiWrapper || ADL.XAPIWrapper;
        var configError;

        try {
          this.setWrapperConfig();
        } catch (error) {
          configError = error;
        }

        if (configError) {
          return callback(error);
        }

        if (this.debug) {
          console.log('xAPI: Checking Cookies for actor, or generating random actor');
        }

        if (getCookie('info.learndata.actor') !== "") {
          this.xapiWrapper.lrs.actor = "".concat(getCookie('info.learndata.actor'));

          if (this.debug) {
            console.log('xAPI: an actor exists in cookies and is:');
            console.log("".concat(getCookie('info.learndata.actor')));
          }

          this.set({
            registration: getCookie('info.learndata.registration'),
            actor: JSON.parse(getCookie('info.learndata.actor'))
          });
          this.xapiWrapper.strictCallbacks = true;
          callback();
        } else if (getCookie('info.learndata.actor') === "") {
          if (this.debug) {
            console.log('xAPI: actor does not exist in local storage');
          }

          var courseUser = "".concat(uuidv4());
          var actor = {
            "objectType": "Agent",
            "name": courseUser,
            "account": {
              "homePage": "https://theodi.org",
              "name": courseUser
            }
          };
          setCookie('info.learndata.actor', JSON.stringify(actor), 365);
          setCookie('registration', courseUser, 365);
          this.set({
            registration: courseUser,
            actor: actor
          });

          if (this.debug) {
            console.log('xAPI: Generated new actor');
            console.log(actor);
            console.log(getCookie('info.learndata.actor'));
          }

          this.xapiWrapper.strictCallbacks = true;
          callback();
        } else {
          if (this.debug) {
            console.log('xAPI: Failed to generate actor, looking for actor in config?');
          }

          this.set({
            registration: this.getLRSAttribute('registration'),
            actor: this.getLRSAttribute('actor')
          });
          this.xapiWrapper.strictCallbacks = true;
          callback();
        }
      }
    },
    onInitialised: function (error) {
      this.set({
        isInitialised: !!!error
      });
      Adapt.wait.end();

      _.defer(function () {
        if (error) {
          Adapt.trigger('xapi:lrs:initialize:error', error);
          return;
        }

        Adapt.trigger('xapi:lrs:initialize:success');
      });
    },
    onLanguageChanged: function (newLanguage) {
      this.set({
        displayLang: newLanguage
      });
      this.deleteState(function () {
        this.sendStatement(this.getCourseStatement(ADL.verbs.launched));
      });
    },
    onVisibilityChange: function () {
      if (document.visibilityState === 'visible') {
        this.isTerminated = false;
        return this.sendStatement(this.getCourseStatement(ADL.verbs.resumed));
      }

      this.sendUnloadStatements();
    },
    sendUnloadStatements: function () {
      if (this.isTerminated) {
        return;
      }

      var statements = [];

      if (!this.isComplete) {
        statements.push(this.getCourseStatement(ADL.verbs.suspended));
      }

      statements.push(this.getCourseStatement(ADL.verbs.terminated));
      this.sendStatementsSync(statements);
      this.isTerminated = true;
    },
    checkWrapperConfig: function () {
      if (this.xapiWrapper.lrs.endpoint && this.xapiWrapper.lrs.actor && this.xapiWrapper.lrs.auth && this.xapiWrapper.lrs.activity_id) {
        return true;
      } else {
        return false;
      }
    },
    setWrapperConfig: function () {
      var keys = ['endpoint', 'user', 'password'];
      var newConfig = {};

      _.each(keys, function (key) {
        var val = this.getConfig('_' + key);

        if (val) {
          if (key === 'endpoint') {
            val = val.replace(/\/?$/, '/');

            if (!/^https?:\/\//i.test(val)) {
              Adapt.log.warn('adapt-contrib-xapi: "_endpoint" value is missing protocol (defaulting to http://)');
              val = 'http://' + val;
            }
          }

          newConfig[key] = val;
        }
      }, this);

      if (!_.isEmpty(newConfig)) {
        this.xapiWrapper.changeConfig(newConfig);

        if (!this.xapiWrapper.testConfig()) {
          throw new Error('Incorrect xAPI configuration detected');
        }
      }
    },
    getBaseUrl: function () {
      var url = window.location.origin + window.location.pathname;
      Adapt.log.info('adapt-contrib-xapi: Using detected URL (' + url + ') as ActivityID');
      return url;
    },
    getAttemptDuration: function () {
      return this.startAttemptDuration + this.getSessionDuration();
    },
    getSessionDuration: function () {
      return Math.abs(new Date() - this.startTimeStamp);
    },
    convertMillisecondsToISO8601Duration: function (inputMilliseconds) {
      var hours;
      var minutes;
      var seconds;
      var i_inputMilliseconds = parseInt(inputMilliseconds, 10);
      var i_inputCentiseconds;
      var inputIsNegative = '';
      var rtnStr = '';
      i_inputCentiseconds = Math.round(i_inputMilliseconds / 10);

      if (i_inputCentiseconds < 0) {
        inputIsNegative = '-';
        i_inputCentiseconds = i_inputCentiseconds * -1;
      }

      hours = parseInt(i_inputCentiseconds / 360000, 10);
      minutes = parseInt(i_inputCentiseconds % 360000 / 6000, 10);
      seconds = i_inputCentiseconds % 360000 % 6000 / 100;
      rtnStr = inputIsNegative + 'PT';

      if (hours > 0) {
        rtnStr += hours + 'H';
      }

      if (minutes > 0) {
        rtnStr += minutes + 'M';
      }

      rtnStr += seconds + 'S';
      return rtnStr;
    },
    setupListeners: function () {
      if (!this.get('isInitialised')) {
        Adapt.log.warn('adapt-contrib-xapi: Unable to setup listeners for xAPI');
        return;
      }

      this.getLearnerInfo();
      this.listenTo(Adapt, 'app:languageChanged', this.onLanguageChanged);

      if (this.get('shouldTrackState')) {
        this.listenTo(Adapt, 'state:change', this.sendState);
      }

      this.coreEvents = _.extend(this.coreEvents, this.getConfig('_coreEvents'));
      this.listenTo(Adapt, 'tracking:complete', this.onTrackingComplete);

      if (this.coreEvents['Adapt']['router:menu']) {
        this.listenTo(Adapt, 'router:menu', this.onItemExperience);
      }

      if (this.coreEvents['Adapt']['router:page']) {
        this.listenTo(Adapt, 'router:page', this.onItemExperience);
      }

      if (this.coreEvents['Adapt']['questionView:recordInteraction']) {
        this.listenTo(Adapt, 'questionView:recordInteraction', this.onQuestionInteraction);
      }

      if (this.coreEvents['Adapt']['assessments:complete']) {
        this.listenTo(Adapt, 'assessments:complete', this.onAssessmentComplete);
      }

      _.each(_.keys(this.coreEvents), function (key) {
        if (key !== 'Adapt') {
          var val = this.coreEvents[key];

          if (_typeof(val) === 'object' && val['change:_isComplete'] === true) {
            this.listenTo(Adapt[key], 'change:_isComplete', this.onItemComplete);
          }
        }
      }, this);
    },
    getCourseActivity: function () {
      var object = new ADL.XAPIStatement.Activity(this.get('activityId'));
      var name = {};
      var description = {};
      name[this.get('displayLang')] = this.courseName;
      description[this.get('displayLang')] = this.courseDescription;
      object.definition = {
        type: ADL.activityTypes.course,
        name: name,
        description: description
      };
      return object;
    },
    getCourseStatement: function (verb, result) {
      if (typeof result === 'undefined') {
        result = {};
      }

      var object = this.getCourseActivity();

      switch (verb) {
        case ADL.verbs.launched:
        case ADL.verbs.initialized:
        case ADL.verbs.attempted:
          {
            result.duration = 'PT0S';
            break;
          }

        case ADL.verbs.failed:
        case ADL.verbs.passed:
        case ADL.verbs.suspended:
          {
            result.duration = this.convertMillisecondsToISO8601Duration(this.getAttemptDuration());
            break;
          }

        case ADL.verbs.terminated:
          {
            result.duration = this.convertMillisecondsToISO8601Duration(this.getSessionDuration());
            break;
          }
      }

      return this.getStatement(this.getVerb(verb), object, result);
    },
    getNameObject: function (model) {
      var name = {};
      name[this.get('displayLang')] = model.get('displayTitle') || model.get('title');
      return name;
    },
    getActivityType: function (model) {
      var type = '';

      switch (model.get('_type')) {
        case 'component':
          {
            type = model.get('_isQuestionType') ? ADL.activityTypes.interaction : ADL.activityTypes.media;
            break;
          }

        case 'block':
        case 'article':
          {
            type = ADL.activityTypes.interaction;
            break;
          }

        case 'course':
          {
            type = ADL.activityTypes.course;
            break;
          }

        case 'menu':
          {
            type = ADL.activityTypes.module;
            break;
          }

        case 'page':
          {
            type = ADL.activityTypes.lesson;
            break;
          }
      }

      return type;
    },
    onQuestionInteraction: function (view) {
      if (!view.model || view.model.get('_type') !== 'component' && !view.model.get('_isQuestionType')) {
        return;
      }

      if (this.isComponentOnBlacklist(view.model.get('_component'))) {
        return;
      }

      var object = new ADL.XAPIStatement.Activity(this.getUniqueIri(view.model));
      var isComplete = view.model.get('_isComplete');
      var lang = this.get('displayLang');
      var statement;
      var description = {};
      description[this.get('displayLang')] = this.stripHtml(view.model.get('body'));
      object.definition = {
        name: this.getNameObject(view.model),
        description: description,
        type: ADL.activityTypes.question,
        interactionType: view.getResponseType()
      };

      if (typeof view.getInteractionObject === 'function') {
        _.extend(object.definition, view.getInteractionObject());

        _.each(_.keys(object.definition), function (key) {
          if (_.isArray(object.definition[key]) && object.definition[key].length !== 0) {
            for (var i = 0; i < object.definition[key].length; i++) {
              if (!object.definition[key][i].hasOwnProperty('description')) {
                break;
              }

              if (typeof object.definition[key][i].description === 'string') {
                var description = {};
                description[lang] = object.definition[key][i].description;
                object.definition[key][i].description = description;
              }
            }
          }
        });
      }

      var result = {
        score: {
          raw: view.model.get('_score') || 0
        },
        success: view.model.get('_isCorrect'),
        completion: isComplete,
        response: this.processInteractionResponse(object.definition.interactionType, view.getResponse())
      };
      statement = this.getStatement(this.getVerb(ADL.verbs.answered), object, result);
      this.addGroupingActivity(view.model, statement);
      this.sendStatement(statement);
    },
    stripHtml: function (html) {
      var tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;
      return tempDiv.textContent || tempDiv.innerText || '';
    },
    processInteractionResponse: function (responseType, response) {
      switch (responseType) {
        case 'choice':
          {
            response = response.replace(/,|#/g, '[,]');
            break;
          }

        case 'matching':
          {
            response = response.split('#').map(function (val, i) {
              return i + 1 + '[.]' + val.replace('.', '_');
            }).join('[,]');
            break;
          }
      }

      return response;
    },
    onItemExperience: function (model) {
      if (model.get('_id') === 'course') {
        return;
      }

      var object = new ADL.XAPIStatement.Activity(this.getUniqueIri(model));
      var statement;
      object.definition = {
        name: this.getNameObject(model),
        type: this.getActivityType(model)
      };
      statement = this.getStatement(this.getVerb(ADL.verbs.experienced), object);
      this.addGroupingActivity(model, statement);
      this.sendStatement(statement);
    },
    isComponentOnBlacklist: function (component) {
      return this.get('componentBlacklist').indexOf(component) !== -1;
    },
    onItemComplete: function (model, isComplete) {
      if (isComplete === false) {
        return;
      }

      if (model.get('_type') === 'component' && model.get('_isQuestionType') === true && this.coreEvents['Adapt']['questionView:recordInteraction'] === true && this.coreEvents['components']['change:_isComplete'] === true) {
        return;
      }

      if (model.get('_type') === 'component' && this.isComponentOnBlacklist(model.get('_component'))) {
        return;
      }

      var result = {
        completion: true
      };
      var object = new ADL.XAPIStatement.Activity(this.getUniqueIri(model));
      var statement;
      object.definition = {
        name: this.getNameObject(model),
        type: this.getActivityType(model)
      };
      statement = this.getStatement(this.getVerb(ADL.verbs.completed), object, result);
      this.addGroupingActivity(model, statement);
      this.sendStatement(statement);
    },
    getLessonActivity: function (page) {
      var pageModel = typeof page === 'string' ? Adapt.findById(page) : page;
      var activity = new ADL.XAPIStatement.Activity(this.getUniqueIri(pageModel));
      var name = this.getNameObject(pageModel);
      activity.definition = {
        name: name,
        type: ADL.activityTypes.lesson
      };
      return activity;
    },
    addGroupingActivity: function (model, statement) {
      var type = model.get('_type');

      if (type !== 'course') {
        statement.addGroupingActivity(this.getCourseActivity());
      }

      if (['article', 'block', 'component'].indexOf(type) !== -1) {
        var pageModel = model.findAncestor('pages');
        statement.addGroupingActivity(this.getLessonActivity(pageModel));
      }

      if (type === 'component' && model.get('_isPartOfAssessment')) {
        var articleModel = model.findAncestor('articles');

        if (articleModel && articleModel.has('_assessment') && articleModel.get('_assessment')._isEnabled) {
          var assessment = {
            id: articleModel.get('_assessment')._id,
            articleId: articleModel.get('_id'),
            type: 'article-assessment',
            pageId: articleModel.get('_parentId')
          };
          statement.addParentActivity(this.getAssessmentObject(assessment));
        }
      }
    },
    getAssessmentResultObject: function (assessment) {
      var result = {
        score: {
          scaled: assessment.scoreAsPercent / 100,
          raw: assessment.score,
          min: 0,
          max: assessment.maxScore
        },
        success: assessment.isPass,
        completion: assessment.isComplete
      };
      return result;
    },
    getAssessmentObject: function (assessment) {
      var fakeModel = new Backbone.Model({
        _id: assessment.id || assessment.articleId,
        _type: assessment.type,
        pageId: assessment.pageId
      });
      var object = new ADL.XAPIStatement.Activity(this.getUniqueIri(fakeModel));
      var name = {};
      name[this.get('displayLang')] = assessment.id || 'Assessment';
      object.definition = {
        name: name,
        type: ADL.activityTypes.assessment
      };
      return object;
    },
    onAssessmentComplete: function (assessment) {
      var self = this;
      var object = this.getAssessmentObject(assessment);
      var result = this.getAssessmentResultObject(assessment);
      var statement;

      if (assessment.isPass) {
        statement = this.getStatement(this.getVerb(ADL.verbs.passed), object, result);
      } else {
        statement = this.getStatement(this.getVerb(ADL.verbs.failed), object, result);
      }

      statement.addGroupingActivity(this.getCourseActivity());
      statement.addGroupingActivity(this.getLessonActivity(assessment.pageId));

      _.delay(function () {
        self.sendStatement(statement);
      }, 500);
    },
    getVerb: function (verb) {
      if (typeof verb === 'string') {
        var key = verb.toLowerCase();
        verb = ADL.verbs[key];

        if (!verb) {
          Adapt.log.error('adapt-contrib-xapi: Verb "' + key + '" does not exist in ADL.verbs object');
        }
      }

      if (_typeof(verb) !== 'object') {
        throw new Error('Unrecognised verb: ' + verb);
      }

      var lang = this.get('lang') || this.defaultLang;
      var singleLanguageVerb = {
        id: verb.id,
        display: {}
      };
      var description = verb.display[lang];

      if (description) {
        singleLanguageVerb.display[lang] = description;
      } else {
        singleLanguageVerb.display[this.defaultLang] = verb.display[this.defaultLang];
      }

      return singleLanguageVerb;
    },
    getUniqueIri: function (model) {
      var iri = this.get('activityId');
      var type = model.get('_type');

      if (type !== 'course') {
        if (type === 'article-assessment') {
          iri = iri + ['#', 'assessment', model.get('_id')].join('/');
        } else {
          iri = iri + ['#/id', model.get('_id')].join('/');
        }
      }

      return iri;
    },
    onTrackingComplete: function (completionData) {
      var self = this;
      var result = {};
      var completionVerb;

      switch (completionData.status) {
        case COMPLETION_STATE$1.PASSED:
          {
            completionVerb = ADL.verbs.passed;
            break;
          }

        case COMPLETION_STATE$1.FAILED:
          {
            completionVerb = ADL.verbs.failed;
            break;
          }

        default:
          {
            completionVerb = ADL.verbs.completed;
          }
      }

      if (completionVerb === ADL.verbs.completed) {
        result = {
          completion: true
        };
      } else {
        result = this.getAssessmentResultObject(completionData.assessment);
      }

      this.isComplete = true;

      _.defer(function () {
        self.sendStatement(self.getCourseStatement(completionVerb, result));
      });
    },
    restoreState: function () {
      var state = this.get('state');

      if (_.isEmpty(state)) {
        return;
      }

      var Adapt = require('core/js/adapt');

      if (state.components) {
        _.each(state.components, function (stateObject) {
          var restoreModel = Adapt.findById(stateObject._id);

          if (restoreModel) {
            restoreModel.setTrackableState(stateObject);
          } else {
            Adapt.log.warn('adapt-contrib-xapi: Unable to restore state for component: ' + stateObject._id);
          }
        });
      }

      if (state.blocks) {
        _.each(state.blocks, function (stateObject) {
          var restoreModel = Adapt.findById(stateObject._id);

          if (restoreModel) {
            restoreModel.setTrackableState(stateObject);
          } else {
            Adapt.log.warn('adapt-contrib-xapi: Unable to restore state for block: ' + stateObject._id);
          }
        });
      }
    },
    getStatement: function (verb, object, result, context) {
      var statement = new ADL.XAPIStatement(new ADL.XAPIStatement.Agent(this.get('actor')), verb, object);

      if (result && !_.isEmpty(result)) {
        statement.result = result;
      }

      if (context) {
        statement.context = context;
      }

      if (this.get('_generateIds')) {
        statement.generateId();
      }

      return statement;
    },
    sendState: function (model, modelState) {
      if (this.get('shouldTrackState') !== true) {
        return;
      }

      var activityId = this.get('activityId');
      var actor = this.get('actor');
      var type = model.get('_type');
      var state = this.get('state');
      var registration = this.get('shouldUseRegistration') === true ? this.get('registration') : null;

      var collectionName = _.findKey(this.coreObjects, function (o) {
        return o === type || o.indexOf(type) > -1;
      });

      var stateCollection = _.isArray(state[collectionName]) ? state[collectionName] : [];
      var newState;

      if (collectionName !== 'course' && collectionName !== 'offlineStorage') {
        var index = _.findIndex(stateCollection, {
          _id: model.get('_id')
        });

        if (index !== -1) {
          stateCollection.splice(index, 1, modelState);
        } else {
          stateCollection.push(modelState);
        }

        newState = stateCollection;
      } else {
        newState = modelState;
      }

      state[collectionName] = newState;
      this.set({
        state: state
      });
      this.xapiWrapper.sendState(activityId, actor, collectionName, registration, newState, null, null, function (error, xhr) {
        if (error) {
          Adapt.trigger('xapi:lrs:sendState:error', error);
        }

        Adapt.trigger('xapi:lrs:sendState:success', newState);
      });
    },
    getState: function (callback) {
      callback = _.isFunction(callback) ? callback : function () {};
      var self = this;
      var activityId = this.get('activityId');
      var actor = this.get('actor');
      var registration = this.get('shouldUseRegistration') === true ? this.get('registration') : null;
      var state = {};
      Async__default['default'].each(_.keys(this.coreObjects), function (type, nextType) {
        self.xapiWrapper.getState(activityId, actor, type, registration, null, function (error, xhr) {
          _.defer(function () {
            if (error) {
              Adapt.log.warn('adapt-contrib-xapi: getState() failed for ' + activityId + ' (' + type + ')');
              return nextType(error);
            }

            if (!xhr) {
              Adapt.log.warn('adapt-contrib-xapi: getState() failed for ' + activityId + ' (' + type + ')');
              return nextType(new Error('\'xhr\' parameter is missing from callback'));
            }

            if (xhr.status === 404) {
              return nextType();
            }

            if (xhr.status !== 200) {
              Adapt.log.warn('adapt-contrib-xapi: getState() failed for ' + activityId + ' (' + type + ')');
              return nextType(new Error('Invalid status code ' + xhr.status + ' returned from getState() call'));
            }

            var response;
            var parseError;

            if (xhr.response === '') {
              return nextType();
            }

            try {
              response = JSON.parse(xhr.response);
            } catch (e) {
              parseError = e;
            }

            if (parseError) {
              return nextType(parseError);
            }

            if (!_.isEmpty(response)) {
              state[type] = response;
            }

            return nextType();
          });
        });
      }, function (error) {
        if (error) {
          Adapt.log.error('adapt-contrib-xapi:', error);
          return callback(error);
        }

        if (!_.isEmpty(state)) {
          self.set({
            state: state
          });
        }

        Adapt.trigger('xapi:stateLoaded');
        callback();
      });
    },
    deleteState: function (callback) {
      callback = _.isFunction(callback) ? callback : function () {};
      var self = this;
      var activityId = this.get('activityId');
      var actor = this.get('actor');
      var registration = this.get('shouldUseRegistration') === true ? this.get('registration') : null;
      Async__default['default'].each(_.keys(this.coreObjects), function (type, nextType) {
        self.xapiWrapper.deleteState(activityId, actor, type, registration, null, null, function (error, xhr) {
          if (error) {
            Adapt.log.warn('adapt-contrib-xapi: deleteState() failed for ' + activityId + ' (' + type + ')');
            return nextType(error);
          }

          if (!xhr) {
            Adapt.log.warn('adapt-contrib-xapi: deleteState() failed for ' + activityId + ' (' + type + ')');
            return nextType(new Error('\'xhr\' parameter is missing from callback'));
          }

          if (xhr.status !== 204) {
            Adapt.log.warn('adapt-contrib-xapi: deleteState() failed for ' + activityId + ' (' + type + ')');
            return nextType(new Error('Invalid status code ' + xhr.status + ' returned from getState() call'));
          }

          return nextType();
        });
      }, function (error) {
        if (error) {
          Adapt.log.error('adapt-contrib-xapi:', error);
          return callback(error);
        }

        callback();
      });
    },
    getConfig: function (key) {
      if (!this.config || key === '' || typeof this.config[key] === 'undefined') {
        return false;
      }

      return this.config[key];
    },
    getLRSAttribute: function (key) {
      if (!this.xapiWrapper || !this.xapiWrapper.lrs || undefined === this.xapiWrapper.lrs[key]) {
        return null;
      }

      try {
        switch (key) {
          case 'actor':
            {
              var actor = JSON.parse(this.xapiWrapper.lrs[key]);

              if (_.isArray(actor.name)) {
                actor.name = actor.name[0];
              }

              if (_.isArray(actor.mbox)) {
                actor.mbox = actor.mbox[0];
              }

              if (_.isArray(actor.account)) {
                var account = {};

                if (typeof actor.account[0].accountServiceHomePage !== 'undefined') {
                  account.homePage = actor.account[0].accountServiceHomePage;
                } else if (actor.account[0].homePage !== 'undefined') {
                  account.homePage = actor.account[0].homePage;
                }

                if (typeof actor.account[0].accountName !== 'undefined') {
                  account.name = actor.account[0].accountName;
                } else if (typeof actor.account[0].name !== 'undefined') {
                  account.name = actor.account[0].name;
                }

                delete actor.account;
                actor.account = account;
              }

              return actor;
            }

          default:
            return this.xapiWrapper.lrs[key];
        }
      } catch (e) {
        return null;
      }
    },
    getLRSExtendedAttribute: function (key) {
      var extended = this.getLRSAttribute('extended');

      if (extended == null) {
        return null;
      }

      try {
        if (key === 'definition') {
          return JSON.parse(extended.definition);
        }

        return extended[key];
      } catch (e) {
        return null;
      }
    },
    validateProps: function () {
      var errorCount = 0;

      if (!this.get('actor') || _typeof(this.get('actor')) !== 'object') {
        Adapt.log.warn('adapt-contrib-xapi: "actor" attribute not found!');
        errorCount++;
      }

      if (!this.get('activityId')) {
        Adapt.log.warn('adapt-contrib-xapi: "activityId" attribute not found!');
        errorCount++;
      }

      if (errorCount > 0) {
        return false;
      }

      return true;
    },
    sendStatement: function (statement, callback, attachments) {
      callback = _.isFunction(callback) ? callback : function () {};

      if (!statement) {
        return;
      }

      Adapt.trigger('xapi:preSendStatement', statement);

      if (_.isUndefined(attachments) && statement.attachments) {
        return this.processAttachments(statement, callback);
      } else {
        this.onStatementReady(statement, callback, attachments);
      }
    },
    sendStatementsSync: function (statements) {
      var lrs = ADL.XAPIWrapper.lrs;

      if (!window.fetch || this.isCORS(lrs.endpoint)) {
        return this.sendStatements(statements);
      }

      var url = lrs.endpoint + 'statements';
      var credentials = ADL.XAPIWrapper.withCredentials ? 'include' : 'omit';
      var headers = {
        'Content-Type': 'application/json',
        'Authorization': lrs.auth,
        'X-Experience-API-Version': ADL.XAPIWrapper.xapiVersion
      };

      var extended = _.map(lrs.extended, function (value, key) {
        return key + '=' + encodeURIComponent(value);
      });

      if (extended.length > 0) {
        url += (url.indexOf('?') > -1 ? '&' : '?') + extended.join('&');
      }

      fetch(url, {
        body: JSON.stringify(statements),
        cache: 'no-cache',
        credentials: credentials,
        headers: headers,
        mode: 'same-origin',
        keepalive: true,
        method: 'POST'
      }).then(function () {
        Adapt.trigger('xapi:lrs:sendStatement:success', statements);
      })["catch"](function (error) {
        Adapt.trigger('xapi:lrs:sendStatement:error', error);
      });
    },
    isCORS: function (url) {
      var urlparts = url.toLowerCase().match(/^(.+):\/\/([^:\/]*):?(\d+)?(\/.*)?$/);
      var isCORS = location.protocol.toLowerCase().replace(':', '') !== urlparts[1] || location.hostname.toLowerCase() !== urlparts[2];

      if (!isCORS) {
        var urlPort = urlparts[3] === null ? urlparts[1] === 'http' ? '80' : '443' : urlparts[3];
        isCORS = urlPort === location.port;
      }

      return isCORS;
    },
    onStatementReady: function (statement, callback, attachments) {
      this.xapiWrapper.sendStatement(statement, function (error) {
        if (error) {
          Adapt.trigger('xapi:lrs:sendStatement:error', error);
          return callback(error);
        }

        Adapt.trigger('xapi:lrs:sendStatement:success', statement);
        return callback();
      }, attachments);
    },
    processAttachments: function (statement, callback) {
      var attachments = statement.attachments;
      Async__default['default'].each(attachments, function (attachment, nextAttachment) {
        if (attachment.value) {
          nextAttachment();
        } else if (attachment.url) {
          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
              var reader = new FileReader();

              reader.onload = function () {
                attachment.value = reader.result;
                delete attachment.url;
                nextAttachment();
              };

              reader.readAsBinaryString(this.response);
            }
          };

          xhr.open('GET', attachment.url);
          xhr.responseType = 'blob';
          xhr.send();
        } else {
          Adapt.log.warn('Attachment object contained neither a value or url property.');
        }
      }, function () {
        delete statement.attachments;
        this.onStatementReady(statement, callback, attachments);
      }.bind(this));
    },
    sendStatements: function (statements, callback) {
      callback = _.isFunction(callback) ? callback : function () {};

      if (!statements || statements.length === 0) {
        return;
      }

      Adapt.trigger('xapi:preSendStatements', statements);
      Async__default['default'].each(statements, function (statement, nextStatement) {
        this.sendStatement(statement, nextStatement);
      }.bind(this), function (error) {
        if (error) {
          Adapt.log.error('adapt-contrib-xapi:', error);
          return callback(error);
        }

        callback();
      });
    },
    getGlobals: function () {
      return _.defaults(Adapt && Adapt.course && Adapt.course.get('_globals') && Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._xapi || {}, {
        'confirm': 'OK',
        'lrsConnectionErrorTitle': 'LRS not available',
        'lrsConnectionErrorMessage': 'We were unable to connect to your Learning Record Store (LRS). This means that your progress cannot be recorded.'
      });
    },
    showError: function () {
      if (this.getConfig('_lrsFailureBehaviour') === 'ignore') {
        return;
      }

      var notifyObject = {
        title: this.getGlobals().lrsConnectionErrorTitle,
        body: this.getGlobals().lrsConnectionErrorMessage,
        confirmText: this.getGlobals().confirm
      };
      Adapt.wait.begin();
      Adapt.trigger('notify:alert', notifyObject);
      $('.notify').css({
        position: 'relative',
        zIndex: 5001
      });
      Adapt.once('notify:closed', Adapt.wait.end);
    }
  });

  xAPI.getInstance = function () {
    if (!xAPI.instance) {
      xAPI.instance = new xAPI();
    }

    return xAPI.instance;
  };

  Adapt.once('app:dataLoaded', function () {
    var xapi = xAPI.getInstance();
    xapi.initialize();
    Adapt.on('adapt:initialize', function () {
      xapi.setupListeners();
    });
    Adapt.on('xapi:lrs:initialize:error', function (error) {
      Adapt.log.error('adapt-contrib-xapi: xAPI Wrapper initialisation failed', error);
      xapi.showError();
    });
    Adapt.on('xapi:lrs:sendStatement:error', function (error) {
      xapi.showError();
    });
    Adapt.on('xapi:lrs:sendState:error', function (error) {
      xapi.showError();
    });
  });
  var xapi = __AMD("extensions/adapt-contrib-xapi-odi-guid-0.8.3-cookies/js/adapt-contrib-xapi", xAPI.getInstance());

  var offlineStorage = {
    load: function () {
      var fakeModel = {
        get: function () {
          return 'offlineStorage';
        }
      };
      var store = new Backbone.Model();
      var isDataRestored = false;
      Adapt.offlineStorage.initialize({
        get: function (name) {
          if (!name) {
            return this.getAll();
          }

          if (!this.useTemporaryStore() && name.toLowerCase() === 'learnerinfo') {
            return this.getLearnerInfo();
          }

          return store.get(name);
        },
        getAll: function () {
          if (!isDataRestored) {
            var state = xapi.get('state') || {};
            store.set(state.offlineStorage);
            isDataRestored = true;
          }

          if (this.useTemporaryStore()) {
            return store.toJSON();
          }

          return _.extend(store.toJSON(), {
            learnerInfo: this.getLearnerInfo()
          });
        },
        set: function (name, value) {
          store.set(name, value);
          Adapt.trigger('state:change', fakeModel, store.toJSON());
        },
        useTemporaryStore: function () {
          return !xapi.get('isInitialised');
        },
        getLearnerInfo: function () {
          var actor = xapi.get('actor') || {};
          var name = actor.name || '';
          var lastname;
          var firstname;
          var matches = name.match(/(\S+)\s(.+)/);

          if (matches && matches.length > 2) {
            lastname = matches[2];
            firstname = matches[1];
          } else {
            console.log('xAPI: actor name not in "firstname lastname" format');
          }

          return {
            id: this.getLearnerId(actor),
            name: name,
            lastname: lastname,
            firstname: firstname
          };
        },
        getLearnerId: function (actor) {
          var name = actor.account && actor.account.name;

          if (name) {
            return name;
          }

          if (actor.openid) {
            return actor.openid;
          }

          if (typeof actor.mbox === 'string' && actor.mbox.length > 0) {
            return actor.mbox.replace('mailto:', '');
          }

          console.log('xAPI: could not determine the learner\'s ID');
          return null;
        }
      });
    }
  };
  var offlineStorage$1 = __AMD("extensions/adapt-contrib-xapi-odi-guid-0.8.3-cookies/js/adapt-offlineStorage-xapi", offlineStorage);

  Adapt.on('app:dataLoaded', initialise);

  function initialise() {
    var config = Adapt.config.get('_xapi') || {};

    if (!config._isEnabled) {
      return;
    }

    offlineStorage$1.load();
    var successEvent = config._shouldTrackState ? 'xapi:stateLoaded' : 'xapi:lrs:initialize:success';
    Adapt.once('xapi:lrs:initialize:error ' + successEvent, function () {
      Adapt.offlineStorage.get();
      Adapt.offlineStorage.setReadyStatus();
    });
  }

  var DevtoolsModel = Backbone.Model.extend({
    initialize: function () {
      var config = Adapt.config.has('_devtools') ? Adapt.config.get('_devtools') : this.getDefaultConfig();
      this.set(_.extend({
        '_trickleEnabled': false,
        '_hintingAvailable': true,
        '_hintingEnabled': false,
        '_toggleFeedbackAvailable': true,
        '_feedbackEnabled': true,
        '_autoCorrectAvailable': true,
        '_autoCorrectEnabled': false,
        '_altTextAvailable': true,
        '_altTextEnabled': false,
        '_tutorListener': null,
        '_unlockAvailable': true,
        '_unlocked': false,
        '_toggleBankingAvailable': true,
        '_traceFocusAvailable': true,
        '_traceFocusEnabled': false,
        '_extended': true
      }, config));
    },
    getDefaultConfig: function () {
      return {
        '_isEnabled': false,
        '_extended': true
      };
    },
    toggleFeedback: function () {
      this.set('_feedbackEnabled', !this.get('_feedbackEnabled'));
    },
    toggleHinting: function () {
      this.set('_hintingEnabled', !this.get('_hintingEnabled'));
    },
    toggleAutoCorrect: function () {
      this.set('_autoCorrectEnabled', !this.get('_autoCorrectEnabled'));
    },
    toggleAltText: function () {
      this.set('_altTextEnabled', !this.get('_altTextEnabled'));
    },
    toggleTraceFocus: function () {
      this.set('_traceFocusEnabled', !this.get('_traceFocusEnabled'));
    }
  });
  var DevtoolsModel$1 = __AMD("extensions/adapt-devtools/js/devtools-model", DevtoolsModel);

  var Hinting = _.extend({
    initialize: function () {
      this.listenTo(Adapt.devtools, 'change:_hintingEnabled', this.toggleHints);
    },
    toggleHints: function () {
      var contentObject = Adapt.findById(Adapt.location._currentId);
      var components = contentObject.findDescendantModels('components');

      var renderedQuestions = _.filter(components, function (m) {
        return m.get('_isQuestionType') === true && m.get('_isReady') === true;
      });

      _.each(renderedQuestions, function (model) {
        this.setHinting($('.' + model.get('_id')), model, Adapt.devtools.get('_hintingEnabled'));
      }, this);

      if (Adapt.devtools.get('_hintingEnabled')) this.listenTo(Adapt, 'componentView:postRender', this.onComponentRendered);else this.stopListening(Adapt, 'componentView:postRender');
    },
    onComponentRendered: function (view, hintingEnabled) {
      if (view.model.get('_isQuestionType')) this.setHinting(view.$el, view.model);
    },
    setHinting: function ($el, model, hintingEnabled) {
      switch (model.get('_component')) {
        case 'mcq':
          this.setMcqHinting($el, model, hintingEnabled !== false);
          break;

        case 'gmcq':
          this.setGmcqHinting($el, model, hintingEnabled !== false);
          break;

        case 'matching':
          this.setMatchingHinting($el, model, hintingEnabled !== false);
          break;

        case 'ppq':
          this.setPpqHinting($el, model, hintingEnabled !== false);
          break;

        case 'slider':
          this.setSliderHinting($el, model, hintingEnabled !== false);
          break;

        case 'textinput':
          this.setTextInputHinting($el, model, hintingEnabled !== false);
          break;

        case 'questionStrip':
          this.setQuestionStripHinting($el, model, hintingEnabled !== false);
          break;
      }
    },
    setMcqHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        _.each(model.get('_items'), function (item, index) {
          $el.find('.js-mcq-item').eq(index).addClass(item._shouldBeSelected ? 'hint-is-correct' : 'hint-is-incorrect');
        });
      } else {
        $el.find('.js-mcq-item').removeClass('hint-is-correct hint-is-incorrect');
      }
    },
    setGmcqHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        _.each(model.get('_items'), function (item, index) {
          $el.find('.js-mcq-item').eq(index).addClass(item._shouldBeSelected ? 'hint-is-correct' : 'hint-is-incorrect');
        });
      } else {
        $el.find('.js-mcq-item').removeClass('hint-is-correct hint-is-incorrect');
      }
    },
    setMatchingHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        _.each(model.get('_items'), function (item, itemIndex) {
          var $item = $el.find('.item').eq(itemIndex);
          var $options = $item.find('.js-dropdown-list-item');

          _.each(item._options, function (option, optionIndex) {
            if (option._isCorrect) $options.eq(optionIndex + 1).find('.js-dropdown-list-item-inner').append('<span class="hint"> (correct)</span>');
          });
        });
      } else {
        $el.find('.js-dropdown-list-item-inner .hint').remove();
      }
    },
    setSliderHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        var correctAnswer = model.get('_correctAnswer');

        if (correctAnswer) {
          $el.find('.js-slider-number').addClass('hint-is-incorrect');
          $el.find('.js-slider-number[data-id="' + correctAnswer + '"]').removeClass('hint-is-incorrect').addClass('hint-is-correct');
        } else {
          $el.find('.js-slider-number').addClass('hint-is-incorrect');

          var bottom = model.get('_correctRange')._bottom;

          var top = model.get('_correctRange')._top;

          for (var i = bottom; i <= top; i++) {
            $el.find('.js-slider-number[data-id="' + i + '"]').removeClass('hint-is-incorrect').addClass('hint-is-correct');
          }
        }
      } else {
        $el.find('.js-slider-number').removeClass('hint-is-correct hint-is-incorrect');
      }
    },
    setTextInputHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        _.each(model.get('_items'), function (item, index) {
          if (model.get('_answers')) {
            $el.find('.js-textinput-item').eq(index).find('input').attr('placeholder', model.get('_answers')[index][0]);
          } else {
            $el.find('.js-textinput-item').eq(index).find('input').attr('placeholder', item._answers[0]);
          }
        });
      } else {
        _.each(model.get('_items'), function (item, index) {
          if (model.get('_answers')) {
            $el.find('.js-textinput-item').eq(index).find('input').attr('placeholder', item.placeholder);
          }
        });
      }
    },
    setQuestionStripHinting: function ($el, model, hintingEnabled) {
      if (hintingEnabled) {
        _.each(model.get('_items'), function (item, itemIndex) {
          var $item = $el.find('.component-item').eq(itemIndex);
          var $subItems = $item.find('.qs-strapline-header-inner:not(.qs-noop) .qs-strapline-title-inner');

          _.each(item._subItems, function (subItem, subItemIndex) {
            if (subItem._isCorrect) $subItems.eq(subItemIndex).append('<span class="hint"> (correct)</span>');
          });
        });
      } else {
        $el.find('.qs-strapline-title-inner .hint').remove();
      }
    },
    setPpqHinting: function ($el, model, hintingEnabled) {
      console.log('setPpqHinting', hintingEnabled);

      if (!model.get('_developerMode')) {
        $el.find('.ppq-correct-zone').toggleClass('display-none', !hintingEnabled);
        $el.find('.ppq-pinboard').toggleClass('developer-mode', hintingEnabled);
      }
    }
  }, Backbone.Events);

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    Hinting.initialize();
  });
  var Hinting$1 = __AMD("extensions/adapt-devtools/js/hinting", Hinting);

  function isQuestionSupported(model) {
    switch (model.get('_component')) {
      case 'mcq':
      case 'gmcq':
      case 'matching':
      case 'ppq':
      case 'slider':
      case 'textinput':
      case 'questionStrip':
        return true;

      default:
        return false;
    }
  }

  var isQuestionSupported$1 = __AMD("extensions/adapt-devtools/js/is-question-supported", isQuestionSupported);

  var ItemsQuestionModel = undefined;

  var AutoAnswer = _.extend({
    mousedownHandlers: [],
    initialize: function () {
      this.listenTo(Adapt, {
        'componentView:postRender': this.componentRendered,
        'remove': this.onRemove
      });
    },
    componentRendered: function (view) {
      if (isQuestionSupported$1(view.model)) {
        if (view.buttonsView) {
          var handler = _.bind(this.onQuestionMouseDown, this, view);

          view.$el.on('mousedown', handler);
          this.mousedownHandlers.push({
            element: view.$el,
            handler: handler
          });
        } else if (Adapt.devtools.get('_debug')) {
          console.warn('adapt-devtools: could not find submit button on ' + view.model.get('_id'));
        }
      }
    },
    onQuestionMouseDown: function (view, e) {
      if (Adapt.devtools.get('_hintingEnabled')) Hinting$1.setHinting(view.$el, view.model, false);

      if (e.ctrlKey && !e.shiftKey || Adapt.devtools.get('_autoCorrectEnabled')) {
        this.answer(view);
      } else if (e.ctrlKey && e.shiftKey) {
        this.answer(view, true);
      }
    },
    isItemsQuestionModel: function (model) {
      if (ItemsQuestionModel) {
        return model instanceof ItemsQuestionModel;
      } else if (ItemsQuestionModel === null) {
        return false;
      }

      if (require.defined('core/js/models/' + 'itemsQuestionModel')) {
        ItemsQuestionModel = require('core/js/models/' + 'itemsQuestionModel');
        return model instanceof ItemsQuestionModel;
      } else {
        ItemsQuestionModel = null;
        return false;
      }
    },
    answer: function (view, incorrectly) {
      if (view.model.get('_isSubmitted')) return;

      if (Adapt.devtools.get('_debug')) {
        console.log('adapt-devtools: answer ' + view.model.get('_id') + (incorrectly === true ? ' incorrectly' : ''));
      }

      if (incorrectly === true) {
        switch (view.model.get('_component')) {
          case 'mcq':
            this.answerMultipleChoiceIncorrectly(view);
            break;

          case 'gmcq':
            this.answerMultipleChoiceIncorrectly(view, true);
            break;

          case 'matching':
            this.answerMatchingIncorrectly(view);
            break;

          case 'ppq':
            this.answerPpqIncorrectly(view);
            break;

          case 'slider':
            this.answerSliderIncorrectly(view);
            break;

          case 'textinput':
            this.answerTextInputIncorrectly(view);
            break;

          case 'questionStrip':
            this.answerQuestionStripIncorrectly(view);
            break;

          default:
            this.answerUnsupportedIncorrectly(view);
        }
      } else {
        switch (view.model.get('_component')) {
          case 'mcq':
            this.answerMultipleChoice(view);
            break;

          case 'gmcq':
            this.answerMultipleChoice(view, true);
            break;

          case 'matching':
            this.answerMatching(view);
            break;

          case 'ppq':
            this.answerPpq(view);
            break;

          case 'slider':
            this.answerSlider(view);
            break;

          case 'textinput':
            this.answerTextInput(view);
            break;

          case 'questionStrip':
            this.answerQuestionStrip(view);
            break;

          default:
            this.answerUnsupported(view);
        }
      }

      view.$('.js-btn-action').trigger('click');
    },
    answerMultipleChoice: function (view, isGraphical) {
      var items = this.isItemsQuestionModel(view.model) ? view.model.getChildren().toJSON() : view.model.get('_items');
      var noCorrectOptions = _.where(items, {
        '_shouldBeSelected': true
      }).length == 0;

      if (this.isItemsQuestionModel(view.model)) {
        if (noCorrectOptions) {
          view.model.getItem(_.random(items.length - 1)).set('_isActive', true);
        } else {
          view.model.getChildren().forEach(function (item) {
            if (item.get('_shouldBeSelected') && !item.get('_isActive') || !item.get('_shouldBeSelected') && item.get('_isActive')) {
              item.toggleActive();
            }
          });
        }

        return;
      }

      if (noCorrectOptions) {
        if (_.where(items, {
          '_isSelected': true
        }).length == 0) {
          view.$(isGraphical ? '.js-item-input' : '.js-item-input').eq(_.random(items.length - 1)).trigger('change');
        }
      } else {
        _.each(items, function (item, index) {
          if (item._shouldBeSelected && !item._isSelected || !item._shouldBeSelected && item._isSelected) {
            view.$(isGraphical ? '.js-item-input' : '.js-item-input').eq(index).trigger('change');
          }
        });
      }
    },
    answerMultipleChoiceIncorrectly: function (view, isGraphical) {
      var model = view.model;
      var items = this.isItemsQuestionModel(model) ? model.getChildren().toJSON() : model.get('_items');
      var itemCount = items.length;

      var selectionStates = _.times(itemCount, function () {
        return false;
      });

      var nShould = _.where(items, {
        _shouldBeSelected: true
      }).length;

      var nShouldNot = itemCount - nShould;
      var nSelect = model.get('_selectable');
      var nIncorrect = nShouldNot == 0 ? 0 : _.random(nShould == 1 ? 1 : 0, Math.min(nShouldNot, nSelect));
      var nCorrect = nIncorrect == 0 ? _.random(1, Math.min(nShould - 1, nSelect)) : _.random(0, Math.min(nShould, nSelect - nIncorrect));

      if (itemCount == 1 || nSelect == 0) {
        console.warn('adapt-devtools: not possible to answer ' + model.get('_id') + ' incorrectly');
        return;
      }

      for (var j = 0; j < nIncorrect; j++) {
        for (var k = _.random(itemCount), err = itemCount, found = false; !found && err >= 0; k++, err--) {
          var index = k % itemCount;

          if (selectionStates[index] === false) {
            if (!items[index]._shouldBeSelected) selectionStates[index] = found = true;
          }
        }
      }

      for (var j = 0; j < nCorrect; j++) {
        for (var k = _.random(itemCount), err = itemCount, found = false; !found && err >= 0; k++, err--) {
          var index = k % itemCount;

          if (selectionStates[index] === false) {
            if (items[index]._shouldBeSelected) selectionStates[index] = found = true;
          }
        }
      }

      if (this.isItemsQuestionModel(view.model)) {
        view.model.getChildren().forEach(function (item, index) {
          if (selectionStates[index] && !item.get('_isActive') || !selectionStates[index] && item.get('_isActive')) {
            item.toggleActive();
          }
        });
        return;
      }

      _.each(items, function (item, index) {
        if (selectionStates[index] && !item._isSelected || !selectionStates[index] && item._isSelected) {
          view.$(isGraphical ? '.js-item-input' : '.js-item-input').eq(index).trigger('change');
        }
      });
    },
    answerMatching: function (view) {
      _.each(view.model.get('_items'), function (item, itemIndex) {
        var noCorrectOptions = _.where(item._options, {
          '_isCorrect': true
        }).length == 0;

        if (noCorrectOptions) {
          if (!view.dropdowns[itemIndex].getFirstSelectedItem()) {
            var i = _.random(item._options.length - 1);

            view.selectValue(itemIndex, i);
          }
        } else {
          _.each(item._options, function (option, optionIndex) {
            if (option._isCorrect) {
              view.selectValue(itemIndex, option._index);
            }
          });
        }
      });
    },
    answerMatchingIncorrectly: function (view) {
      var items = view.model.get('_items'),
          itemCount = items.length,
          nIncorrect = _.random(1, itemCount);

      var selectionStates = _.shuffle(_.times(itemCount, function (i) {
        return i < nIncorrect;
      }));

      _.each(items, function (item, itemIndex) {
        var $select = view.$('select').eq(itemIndex);
        var $options = $select.find('option');

        if (selectionStates[itemIndex]) {
          for (var count = item._options.length, i = _.random(count), err = count; err >= 0; i++, err--) {
            if (!item._options[i % count]._isCorrect) {
              if (view.selectValue) {
                var option = item._options[i % count];
                view.selectValue(itemIndex, option._index);
              } else if (view.model.setOptionSelected) {
                var option = item._options[i % count];
                $select.val(option.text);
                $select.trigger('change');
                view.model.setOptionSelected(itemIndex, i % count, true);
              } else {
                $options.eq(i % count + 1).prop('selected', true);
              }

              return;
            }
          }
        } else {
          _.each(item._options, function (option, optionIndex) {
            if (option._isCorrect) {
              if (view.selectValue) {
                view.selectValue(itemIndex, option._index);
              } else if (view.model.setOptionSelected) {
                $select.val(option.text);
                $select.trigger('change');
                view.model.setOptionSelected(itemIndex, optionIndex, true);
              } else {
                $options.eq(optionIndex + 1).prop('selected', true);
              }
            }
          });
        }
      });
    },
    answerSlider: function (view) {
      var correctAnswer = view.model.get('_correctAnswer');

      if (correctAnswer) {
        view.$('.js-slider-number[data-id="' + correctAnswer + '"]').trigger('click');
      } else {
        var bottom = view.model.get('_correctRange')._bottom;

        var top = view.model.get('_correctRange')._top;

        var d = top - bottom;
        view.$('.js-slider-number[data-id="' + (bottom + Math.floor(Math.random() * (d + 1))) + '"]').trigger('click');
      }
    },
    answerSliderIncorrectly: function (view) {
      var correctAnswer = view.model.get('_correctAnswer');
      var start = view.model.get('_scaleStart'),
          end = view.model.get('_scaleEnd');

      var incorrect = _.times(end - start + 1, function (i) {
        return start + i;
      });

      if (correctAnswer) {
        incorrect.splice(correctAnswer - start, 1);
      } else {
        var bottom = view.model.get('_correctRange')._bottom;

        var top = view.model.get('_correctRange')._top;

        incorrect.splice(bottom - start, top - bottom + 1);
      }

      view.$('.js-slider-number[data-id="' + _.shuffle(incorrect)[0] + '"]').trigger('click');
    },
    answerTextInput: function (view) {
      var answers = view.model.get('_answers');

      _.each(view.model.get('_items'), function (item, index) {
        if (answers) view.$('.js-textinput-textbox').eq(index).val(answers[index][0]).trigger('change');else view.$('.js-textinput-textbox').eq(index).val(item._answers[0]).trigger('change');
      });
    },
    answerTextInputIncorrectly: function (view) {
      var items = view.model.get('_items'),
          itemCount = items.length,
          nIncorrect = _.random(1, itemCount);

      var selectionStates = _.shuffle(_.times(itemCount, function (i) {
        return i < nIncorrect;
      }));

      var answers = view.model.get('_answers');

      _.each(items, function (item, index) {
        if (selectionStates[index]) {
          view.$('.js-textinput-textbox').eq(index).val('***4n 1nc0rr3ct 4nsw3r***').trigger('change');
        } else {
          if (answers) view.$('.js-textinput-textbox').eq(index).val(answers[index][0]).trigger('change');else view.$('.js-textinput-textbox').eq(index).val(item._answers[0]).trigger('change');
        }
      });
    },
    answerQuestionStrip: function (view) {
      _.each(view.model.get('_items'), function (item, itemIndex) {
        _.each(item._subItems, function (subItem, subItemIndex) {
          if (subItem._isCorrect) view.setStage(itemIndex, subItemIndex, true);
        });
      });
    },
    answerQuestionStripIncorrectly: function (view) {
      var items = view.model.get('_items'),
          itemCount = items.length,
          nIncorrect = _.random(1, itemCount);

      var selectionStates = _.shuffle(_.times(itemCount, function (i) {
        return i < nIncorrect;
      }));

      _.each(items, function (item, itemIndex) {
        if (selectionStates[itemIndex]) {
          for (var count = item._subItems.length, i = _.random(count), err = count; err >= 0; i++, err--) {
            if (!item._subItems[i % count]._isCorrect) {
              view.setStage(itemIndex, i % count, true);
              return;
            }
          }
        } else {
          _.each(item._subItems, function (subItem, subItemIndex) {
            if (subItem._isCorrect) view.setStage(itemIndex, subItemIndex, true);
          });
        }
      });
    },
    answerPpq: function (view) {
      var model = view.model,
          items = model.get('_items'),
          itemCount = items.length;
      var isDesktop = Adapt.device.screenSize != 'small';

      var items = _.pluck(model.get('_items'), isDesktop ? 'desktop' : 'mobile');

      var $pinboard = view.$('.ppq-pinboard');
      var boardw = $pinboard.width();
      var boardh = $pinboard.height();

      for (i = 0; i < itemCount; i++) {
        var zone = items[i];
        var pin = view.getNextUnusedPin();
        var x = zone.left + zone.width / 2;
        var y = zone.top + zone.height / 2;
        console.log('using correct position', x + ',' + y);
        pin.setPosition(x, y);
        pin.$el.css({
          'left': boardw * x / 100 - pin.$el.width() / 2,
          'top': boardh * y / 100 - pin.$el.height()
        });
      }
    },
    answerPpqIncorrectly: function (view) {
      var model = view.model,
          items = model.get('_items'),
          itemCount = items.length;
      var isDesktop = Adapt.device.screenSize != 'small';

      var items = _.pluck(model.get('_items'), isDesktop ? 'desktop' : 'mobile');

      var nSelect = _.random(model.get('_minSelection'), model.get('_maxSelection'));

      var nIncorrect = _.random(1, nSelect);

      var nCorrect = nSelect - nIncorrect;
      var $pinboard = view.$('.ppq-pinboard');
      var boardw = $pinboard.width();
      var boardh = $pinboard.height();
      console.log('nIncorrect=', nIncorrect, 'nCorrect=', nCorrect);

      var maxSize = function (zone) {
        return zone.left < 1 && zone.top < 1 && zone.width > 9999 && zone.height > 9999;
      };

      items = _.map(items, function (item) {
        return {
          'left': Math.round(item.left * 100),
          'top': Math.round(item.top * 100),
          'width': Math.round(item.width * 100),
          'height': Math.round(item.height * 100)
        };
      });

      if (_.some(items, maxSize) || nSelect == 0) {
        console.warn('adapt-devtools: not possible to answer ' + model.get('_id') + ' incorrectly');
        return;
      }

      view.resetPins();

      for (var i = 0; i < nIncorrect; i++) {
        var ok = false;
        var x, y;

        while (!ok) {
          x = _.random(1, 10000);
          ok = !_.some(items, function (zone) {
            return x >= zone.left && x < zone.left + zone.width && zone.top < 1 && zone.height > 9999;
          });
        }

        ok = false;

        while (!ok) {
          y = _.random(1, 10000);
          ok = !_.some(items, function (zone) {
            return x >= zone.left && x < zone.left + zone.width && y >= zone.top && y < zone.top + zone.height;
          });
        }

        x = x / 100;
        y = y / 100;
        console.log('using incorrect position', x + ',' + y);
        var pin = view.getNextUnusedPin();
        pin.setPosition(x, y);
        pin.$el.css({
          'left': boardw * x / 100 - pin.$el.width() / 2,
          'top': boardh * y / 100 - pin.$el.height()
        });
      }

      var correct = _.shuffle(_.times(itemCount, function (i) {
        return i;
      }));

      for (i = 0; i < nCorrect; i++) {
        var zone = items[correct[i]];
        var pin = view.getNextUnusedPin();
        var x = zone.left + zone.width / 2;
        var y = zone.top + zone.height / 2;
        x = x / 100;
        y = y / 100;
        console.log('using correct position', x + ',' + y);
        pin.setPosition(x, y);
        pin.$el.css({
          'left': boardw * x / 100 - pin.$el.width() / 2,
          'top': boardh * y / 100 - pin.$el.height()
        });
      }
    },
    answerUnsupported: function (view) {
      var model = view.model;
      model.set({
        "_isComplete": true,
        "_isInteractionComplete": true,
        "_isCorrect": true,
        "_isSubmitted": true,
        "_score": 1
      });
      model.set("_attemptsLeft", Math.max(0, model.get("_attempts") - 1));
    },
    answerUnsupportedIncorrectly: function (view) {
      var model = view.model;
      model.set({
        "_isComplete": true,
        "_isInteractionComplete": true,
        "_isCorrect": false,
        "_isSubmitted": true,
        "_score": 0
      });
      model.set("_attemptsLeft", Math.max(0, model.get("_attempts") - 1));
    },
    onRemove: function () {
      this.mousedownHandlers.forEach(function (tuple) {
        tuple.element.off('mousedown', tuple.handler);
      });
    }
  }, Backbone.Events);

  Adapt.on('app:dataReady devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    AutoAnswer.initialize();
  });
  var AutoAnswer$1 = __AMD("extensions/adapt-devtools/js/auto-answer", AutoAnswer);

  var PassHalfFail = _.extend({
    syncIterations: 1,
    mouseTarget: null,
    initialize: function () {
      _.bindAll(this, 'onMouseDown', 'onMouseUp', 'onKeypress', 'onPassHalfFailComplete');

      this._questionViews = [];
      this._currentPageId = null;
      this.listenTo(Adapt, 'pageView:preRender', this.onPagePreRender);
      this.listenTo(Adapt, 'remove', this.onRemove);
      $(window).off("keypress", this.onKeypress);
      $(window).off('mousedown', this.onMouseDown);
      $(window).off('mouseup', this.onMouseUp);
      $(window).on("keypress", this.onKeypress);
      $(window).on('mousedown', this.onMouseDown);
      $(window).on('mouseup', this.onMouseUp);
    },
    _completeNonQuestions: function () {
      var currentModel = Adapt.findById(Adapt.location._currentId);

      var nonQuestions = _.filter(currentModel.findDescendantModels("components"), function (m) {
        return m.get('_isQuestionType') !== true;
      });

      _.each(nonQuestions, function (item) {
        item.set("_isComplete", true);
        item.set("_isInteractionComplete", true);
      });
    },
    pass: function (callback) {
      var i = 0,
          qs = this._questionViews,
          len = qs.length;

      function step() {
        for (var j = 0, count = Math.min(PassHalfFail.syncIterations, len - i); j < count; i++, j++) {
          AutoAnswer$1.answer(qs[i]);
          if (!qs[i].model.get('_isSubmitted')) qs[i].$('.js-btn-action').trigger('click');
        }

        i == len ? callback() : setTimeout(step);
      }

      step();
    },
    half: function (callback) {
      var notSubmitted = function (view) {
        return !view.model.get('_isSubmitted');
      };

      var qs = _.shuffle(_.filter(this._questionViews, notSubmitted));

      var i = 0,
          len = qs.length;

      function step() {
        for (var j = 0, count = Math.min(PassHalfFail.syncIterations, len - i); j < count; i++, j++) {
          AutoAnswer$1.answer(qs[i], i % 2 == 0);
          if (!qs[i].model.get('_isSubmitted')) qs[i].$('.js-btn-action').trigger('click');
        }

        i == len ? callback() : setTimeout(step);
      }

      step();
    },
    fail: function (callback) {
      var i = 0,
          qs = this._questionViews,
          len = qs.length;

      function step() {
        for (var j = 0, count = Math.min(PassHalfFail.syncIterations, len - i); j < count; i++, j++) {
          AutoAnswer$1.answer(qs[i], true);
          if (!qs[i].model.get('_isSubmitted')) qs[i].$('.js-btn-action').trigger('click');
        }

        i == len ? callback() : setTimeout(step);
      }

      step();
    },
    onPagePreRender: function (view) {
      this._currentPageId = view.model.get('_id');
      this.listenTo(Adapt, 'componentView:postRender', this.onComponentRendered);
    },
    onRemove: function () {
      this.stopListening(Adapt, 'componentView:postRender', this.onComponentRendered);
      this._questionViews = [];
    },
    onComponentRendered: function (view) {
      if (view.model.has('_parentId') && view.model.findAncestor('contentObjects').get('_id') == this._currentPageId) {
        if (view.model.get('_isQuestionType')) {
          this._questionViews.push(view);
        }
      }
    },
    onMouseDown: function (e) {
      if (e.which === 1) this.mouseTarget = e.target;
    },
    onMouseUp: function (e) {
      if (e.which === 1) this.mouseTarget = null;
    },
    onKeypress: function (e) {
      var _char = String.fromCharCode(e.which).toLowerCase();

      var perform = function (type) {
        if (Adapt.devtools.get('_trickleEnabled')) Adapt.trigger("trickle:kill");
        var tutorEnabled = Adapt.devtools.get('_feedbackEnabled');
        if (tutorEnabled) Adapt.devtools.set('_feedbackEnabled', false);
        if (type == 'pass') this.pass(_.partial(this.onPassHalfFailComplete, tutorEnabled));else if (type == 'half') this.half(_.partial(this.onPassHalfFailComplete, tutorEnabled));else this.fail(_.partial(this.onPassHalfFailComplete, tutorEnabled));
        Adapt.trigger('drawer:closeDrawer');
      }.bind(this);

      if (this.mouseTarget && $('.drawer .devtools').length === 0) {
        switch (_char) {
          case 'p':
            return perform('pass');

          case 'h':
            return perform('half');

          case 'f':
            return perform('fail');
        }
      } else {
        switch (_char) {
          case 'p':
            return perform('pass');

          case 'h':
            return perform('half');

          case 'f':
            return perform('fail');
        }
      }
    },
    onPassHalfFailComplete: function (tutorEnabled) {
      console.log('onPassHalfFailComplete');
      if (tutorEnabled) Adapt.devtools.set('_feedbackEnabled', true);
    }
  }, Backbone.Events);

  Adapt.on('app:dataReady devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    PassHalfFail.initialize();
  });
  var PassHalfFail$1 = __AMD("extensions/adapt-devtools/js/pass-half-fail", PassHalfFail);

  var ToggleBanking = {
    initialize: function () {
      Adapt.articles.each(function (m) {
        var config = this.getConfig(m);

        if (m.has('_assessment') && m.get('_assessment')._banks && !m.get('_assessment')._banks._isEnabled) {
          config._assessmentBankDisabled = true;
        }
      }, this);
    },
    getConfig: function (articleModel) {
      if (!articleModel.has('_devtools')) articleModel.set('_devtools', {});
      return articleModel.get('_devtools');
    },
    getBankedAssessmentsInCurrentPage: function () {
      var pageModel = Adapt.findById(Adapt.location._currentId);

      var f = function (m) {
        var config = this.getConfig(m);
        if (!config._assessmentBankDisabled && m.has('_assessment') && m.get('_assessment')._isEnabled && m.get('_assessment')._banks._split.length > 1) return true;
        return false;
      };

      return Adapt.location._contentType === 'menu' ? [] : _.filter(pageModel.findDescendantModels('articles'), f, this);
    },
    toggle: function () {
      var bankedAssessments = this.getBankedAssessmentsInCurrentPage();

      var isBankingEnabled = function (m) {
        return m.get('_assessment')._banks._isEnabled;
      };

      var enable = !_.some(bankedAssessments, isBankingEnabled);

      _.each(bankedAssessments, function (articleModel) {
        articleModel.get('_assessment')._banks._isEnabled = enable;
        articleModel.set({
          _attemptInProgress: false,
          _isPass: false
        });
      });

      router.handleId(Adapt.location._currentId);
    }
  };
  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    ToggleBanking.initialize();
  });
  var ToggleBanking$1 = __AMD("extensions/adapt-devtools/js/toggle-banking", ToggleBanking);

  var MapView = Backbone.View.extend({
    events: {
      'click a': 'onLinkClicked'
    },
    initialize: function () {
      this.$('html').addClass('has-devtools-map');
      this._renderIntervalId = setInterval(this._checkRenderInterval.bind(this), 500);
      this.listenTo(Adapt.components, 'change:_isComplete', this.onModelCompletionChanged);
      this.listenTo(Adapt.blocks, 'change:_isComplete', this.onModelCompletionChanged);
      this.listenTo(Adapt.articles, 'change:_isComplete', this.onModelCompletionChanged);
      this.listenTo(Adapt.contentObjects, 'change:_isComplete', this.onModelCompletionChanged);
      this.render();
    },
    render: function () {
      var data = this.model;
      var template = Handlebars.templates.devtoolsMap;
      this.$('body').html(template(data));
    },
    remove: function () {
      clearInterval(this._renderIntervalId);
      this.$('body').html('Course closed!');
      this.stopListening();
      return this;
    },
    _checkRenderInterval: function () {
      if (this._invalid) {
        this._invalid = false;
        this.render();
      }
    },
    _getConfig: function (pageModel) {
      if (!pageModel.has('_devtools')) pageModel.set('_devtools', {});
      return pageModel.get('_devtools');
    },
    _disablePageIncompletePrompt: function (pageModel) {
      var config = this._getConfig(pageModel);

      if (pageModel.has('_pageIncompletePrompt')) {
        config._pageIncompletePromptExists = true;

        if (pageModel.get('_pageIncompletePrompt').hasOwnProperty('_isEnabled')) {
          config._pageIncompletePromptEnabled = pageModel.get('_pageIncompletePrompt')._isEnabled;
        }
      } else {
        config._pageIncompletePromptExists = false;
        pageModel.set('_pageIncompletePrompt', {});
      }

      pageModel.get('_pageIncompletePrompt')._isEnabled = false;
    },
    _restorePageIncompletePrompt: function (pageModel) {
      var config = this._getConfig(pageModel);

      if (config._pageIncompletePromptExists) {
        if (config.hasOwnProperty('_pageIncompletePromptEnabled')) pageModel.get('_pageIncompletePrompt')._isEnabled = config._pageIncompletePromptEnabled;else delete pageModel.get('_pageIncompletePrompt')._isEnabled;
      } else {
        pageModel.unset('_pageIncompletePrompt');
      }

      delete config._pageIncompletePromptExists;
      delete config._pageIncompletePromptEnabled;
    },
    onModelCompletionChanged: function () {
      this.invalidate();
    },
    onLinkClicked: function (e) {
      var $target = $(e.currentTarget);
      var id = $target.attr('href').slice(1);
      var model = Adapt.findById(id);
      e.preventDefault();

      if (e.ctrlKey && this.el.defaultView) {
        id = id.replace(/-/g, '');
        this.el.defaultView[id] = model;
        this.el.defaultView.console.log('devtools: add property window.' + id + ':');
        this.el.defaultView.console.log(model);
      } else if (e.shiftKey) {
        this.navigateAndDisableTrickle(id);
      } else {
        this.navigateAndDisableTrickleUpTo(id);
      }
    },
    invalidate: function () {
      this._invalid = true;
    },
    navigateAndDisableTrickleUpTo: function (id) {
      var model = Adapt.findById(id);
      var pageModel = Adapt.findById(Adapt.location._currentId);

      this._disablePageIncompletePrompt(pageModel);

      if (model._siblings === 'contentObjects') {
        Backbone.history.navigate('#/id/' + id, {
          trigger: true
        });
      } else {
        var level = model.get('_type') === 'component' ? model.getParent() : model;
        var siblings = level.getParent().getChildren();
        var sibling = null;

        for (var i = 0, count = siblings.indexOf(level); i < count; i++) {
          sibling = siblings.at(i);
          console.log('disabling trickle on ' + sibling.get('_id'));

          if (sibling.has('_trickle')) {
            sibling.get('_trickle')._isEnabled = false;
          } else {
            sibling.set('_trickle', {
              _isEnabled: false
            });
          }
        }

        if (Adapt.location._currentId === model.findAncestor('contentObjects').get('_id')) {
          this.listenToOnce(Adapt, 'pageView:ready', function (view) {
            _.defer(function () {
              Adapt.scrollTo($('.' + id));
              this.checkVisibility(id);
            }.bind(this));
          });
          if (Adapt.location._currentId === Adapt.course.get('_id')) router.handleRoute ? router.handleRoute() : router.handleCourse();else router.handleId(Adapt.location._currentId);
        } else {
          this.listenToOnce(Adapt, 'pageView:ready', function () {
            _.defer(function () {
              this.checkVisibility(id);
            }.bind(this));
          });
          Backbone.history.navigate('#/id/' + id, {
            trigger: true
          });
        }
      }

      this._restorePageIncompletePrompt(pageModel);

      this.invalidate();
    },
    navigateAndDisableTrickle: function (id) {
      var model = Adapt.findById(id);
      var pageModel = Adapt.findById(Adapt.location._currentId);

      this._disablePageIncompletePrompt(pageModel);

      if (model._siblings === 'contentObjects') {
        Backbone.history.navigate('#/id/' + id, {
          trigger: true
        });
      } else {
        if (Adapt.location._currentId === model.findAncestor('contentObjects').get('_id')) {
          Adapt.devtools.set('_trickleEnabled', false);
          Adapt.scrollTo($('.' + id));
          this.checkVisibility(id);
        } else {
          var targetModel = Adapt.trickle ? model.findAncestor('contentObjects') : Adapt.course;

          if (!targetModel.has('_trickle')) {
            targetModel.set('_trickle', {
              _isEnabled: false
            });
            this.listenToOnce(Adapt, 'pageView:ready', function () {
              _.defer(function () {
                targetModel.get('_trickle')._isEnabled = true;
                this.checkVisibility(id);
              }.bind(this));
            });
          } else if (targetModel.get('_trickle')._isEnabled) {
            targetModel.get('_trickle')._isEnabled = false;
            this.listenToOnce(Adapt, 'pageView:ready', function () {
              _.defer(function () {
                targetModel.get('_trickle')._isEnabled = true;
                this.checkVisibility(id);
              }.bind(this));
            });
          }

          Backbone.history.navigate('#/id/' + id, {
            trigger: true
          });
        }
      }

      this._restorePageIncompletePrompt(pageModel);

      this.invalidate();
    },
    checkVisibility: function (id) {
      var model = Adapt.findById(id);
      if ($('.' + id).is(':visible') || model === Adapt.course) return;

      while (!$('.' + id).is(':visible') && model !== Adapt.course) {
        model = model.getParent();
        id = model.get('_id');
      }

      console.log('adapt-devtools::checkVisibility scrolling to ancestor ' + id);
      Adapt.scrollTo($('.' + id));
    }
  });

  var CourseMap = _.extend({
    initialize: function () {
      this.listenTo(Adapt, 'devtools:mapLoaded', this.onMapLoaded);
      $(window).on('unload', this.onCourseClosed.bind(this));

      function isMenu(options) {
        if (this.get('_type') !== 'page') {
          return options.fn(this);
        }

        return options.inverse(this);
      }

      function eachChild(options) {
        var ret = '';
        var children = this.getChildren().models;

        for (var i = 0, j = children.length; i < j; i++) {
          ret = ret + options.fn(children[i], {
            data: {
              index: i,
              first: i === 0,
              last: i === j - 1
            }
          });
        }

        return ret;
      }

      function getId(options) {
        var val = this.get('_id') || '';
        return val.slice(-6);
      }

      function getProp(prop, options) {
        return this.get(prop);
      }

      function isStringEmpty(str) {
        return !str || str.trim && str.trim().length === 0 || $.trim(str).length === 0;
      }

      function getTitle(options) {
        var t = this.get('displayTitle');
        if (isStringEmpty(t)) t = this.get('title');
        if (isStringEmpty(t)) t = this.get('_id');
        return t;
      }

      function when(prop, options) {
        if (this.get(prop)) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      }

      function isTrickled(options) {
        var trickleConfig = this.get('_trickle');
        var trickled = false;
        var isBlock = this.get('_type') === 'block';
        if (trickleConfig) trickled = (isBlock || trickleConfig._onChildren !== true) && trickleConfig._isEnabled;else if (isBlock) {
          trickleConfig = this.getParent().get('_trickle');
          if (trickleConfig) trickled = trickleConfig._onChildren && trickleConfig._isEnabled;
        }

        if (trickled) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      }

      Handlebars.registerHelper('isMenu', isMenu);
      Handlebars.registerHelper('eachChild', eachChild);
      Handlebars.registerHelper('getId', getId);
      Handlebars.registerHelper('getProp', getProp);
      Handlebars.registerHelper('getTitle', getTitle);
      Handlebars.registerHelper('when', when);
      Handlebars.registerHelper('isTrickled', isTrickled);
    },
    open: function () {
      if (!this.mapWindow) {
        this.mapWindow = window.open('assets/map.html', 'Map');
      } else {
        this.mapWindow.focus();
      }
    },
    onMapClosed: function () {
      console.log('onMapClosed');
      this.mapWindow = null;
    },
    onMapLoaded: function (mapWindow) {
      console.log('onMapLoaded');
      this.mapWindow = mapWindow;
      this.mapWindow.focus();
      $('html', this.mapWindow.document).addClass($('html', window.document).attr('class'));
      this.mapView = new MapView({
        model: Adapt,
        el: this.mapWindow.document
      });
      $(this.mapWindow).on('unload', this.onMapClosed.bind(this));
    },
    onCourseClosed: function () {
      if (this.mapView) {
        this.mapView.remove();
      }
    }
  }, Backbone.Events);

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    CourseMap.initialize();
  });
  var CourseMap$1 = __AMD("extensions/adapt-devtools/js/map", CourseMap);

  var mouseTarget$1 = null;

  function onMouseDown$2(e) {
    if (e.which == 1) mouseTarget$1 = e.target;
  }

  function onMouseUp$2(e) {
    if (e.which == 1) mouseTarget$1 = null;
  }

  function onKeypress$2(e) {
    var _char = String.fromCharCode(e.which).toLowerCase();

    if (mouseTarget$1) {
      if (_char == 'm') {
        var model = Utils.getModelForElement(mouseTarget$1);

        if (model) {
          var id = model.get('_id').replace(/-/g, '');
          window[id] = model;
          console.log('devtools: add property window.' + id + ':');
          console.log(model.attributes);
        }
      }
    }
  }

  function getAdaptCoreVersion() {
    try {
      if (Adapt.build && Adapt.build.has('package')) return Adapt.build.get('package').version || ">=v3.0.0";
      if (typeof AdaptModel.prototype.checkCompletionStatusFor == 'function') return ">=v2.2.3";
      if (typeof AdaptModel.prototype.setCompletionStatus == 'function') return ">=v2.0.10";
      if (typeof AdaptModel.prototype.checkLocking == 'function') return "v2.0.9";
      if (typeof Adapt.checkingCompletion == 'function') return "v2.0.8";
      if (typeof AdaptModel.prototype.getParents == 'function') return "v2.0.7";
      if ($.a11y && $.a11y.options.hasOwnProperty('isIOSFixesEnabled')) return "v2.0.5-v2.0.6";
      if (Adapt instanceof Backbone.Model) return "v2.0.4";
      if (typeof QuestionView$1.prototype.recordInteraction == 'function') return "v2.0.2-v2.0.3";
      if (typeof Adapt.findById == 'function') return "v2.0.0-v2.0.1";
      return "v1.x";
    } catch (e) {
      return 'unknown version';
    }
  }

  var Utils = {
    getModelForElement: function (element) {
      var $target = $(element);
      if ($target.length == 0) return false;
      var id = $target.parents('[data-adapt-id]').data('adapt-id');
      return !id ? false : Adapt.findById(id);
    }
  };
  Adapt.once('adapt:initialize', function () {
    var str = 'Version of Adapt core detected: ' + getAdaptCoreVersion();
    var horz = getHorzLine();
    console.log(horz + '\nVersion of Adapt core detected: ' + getAdaptCoreVersion() + '\n' + horz);

    function getHorzLine() {
      for (var s = '', i = 0, c = str.length; i < c; i++) {
        s += '*';
      }

      return s;
    }
  });
  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    $(window).on("keypress", onKeypress$2);
    $(window).on("mousedown", onMouseDown$2);
    $(window).on("mouseup", onMouseUp$2);
    if (!window.Adapt) window.Adapt = Adapt;
  });
  var Utils$1 = __AMD("extensions/adapt-devtools/js/utils", Utils);

  function onTrickleBegun() {
    if (!Adapt.devtools.get('_trickleEnabled')) {
      console.log('Trickle started');
      Adapt.devtools.set('_trickleEnabled', true);
      Adapt.devtools.once('change:_trickleEnabled', onTrickleChange);
    }
  }

  function onTrickleEnded() {
    console.log('Trickle ended');
    Adapt.devtools.off('change:_trickleEnabled', onTrickleChange);
    Adapt.devtools.set('_trickleEnabled', false);
  }

  function onTrickleChange() {
    if (!Adapt.devtools.get('_trickleEnabled')) {
      Adapt.trigger('trickle:kill');
    }
  }

  function remove() {
    if (Adapt.devtools.get('_trickleEnabled')) {
      onTrickleEnded();
    }
  }

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    Adapt.on('trickle:interactionInitialize trickle:started', onTrickleBegun);
    Adapt.on('trickle:kill trickle:finished', onTrickleEnded);
    Adapt.on('remove', remove);
  });

  function onShowFeedback() {
    Adapt.trigger('tutor:closed');
  }

  function hushTutor() {
    Adapt.devtools.set('_tutorListener', Adapt._events['questionView:showFeedback'].pop());
    Adapt.on('questionView:showFeedback', onShowFeedback);
  }

  function reinstateTutor() {
    Adapt.off('questionView:showFeedback', onShowFeedback);

    if (!Adapt._events.hasOwnProperty('questionView:showFeedback')) {
      Adapt._events['questionView:showFeedback'] = [];
    }

    Adapt._events['questionView:showFeedback'].push(Adapt.devtools.get('_tutorListener'));
  }

  function onFeedbackToggled() {
    if (Adapt.devtools.get('_feedbackEnabled')) {
      reinstateTutor();
      $(document).off('mouseup', '.js-btn-feedback');
    } else {
      hushTutor();
      $(document).on('mouseup', '.js-btn-feedback', onFeedbackButtonClicked);
    }
  }

  function onFeedbackButtonClicked(e) {
    var classes = $(e.currentTarget).parents('.component').attr('class');
    var componentId = /[\s]+(c\-[^\s]+)/.exec(classes)[1];

    if (componentId) {
      reinstateTutor();
      Adapt.trigger('questionView:showFeedback', {
        model: Adapt.findById(componentId)
      });
      hushTutor();
    } else console.error('devtools:onFeedbackButtonClicked: malformed component class name');
  }

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;

    if (Adapt.devtools.get('_toggleFeedbackAvailable')) {
      if (Adapt._events.hasOwnProperty('questionView:showFeedback') && Adapt._events['questionView:showFeedback'].length == 1) {
        Adapt.devtools.on('change:_feedbackEnabled', onFeedbackToggled);
      } else {
        console.warn('devtools: no tutor or multiple registrants of questionView:showFeedback so disabling ability to toggle feedback.');
        Adapt.devtools.set('_toggleFeedbackAvailable', false);
      }
    }
  });

  var AltText = _.extend({
    initialize: function () {
      this.listenTo(Adapt.devtools, 'change:_altTextEnabled', this.toggleAltText);

      if (typeof MutationObserver == 'function') {
        this.observer = new MutationObserver(_.bind(this.onDomMutation, this));
      }
    },
    addTimer: function (fireNow) {
      this.timerId = setInterval(_.bind(this.onTimer, this), 1000);
      if (fireNow) this.onTimer();
    },
    removeTimer: function () {
      clearInterval(this.timerId);
    },
    connectObserver: function () {
      if (this.observer) this.observer.observe(document.getElementById('wrapper'), {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class', 'style']
      });
    },
    disconnectObserver: function () {
      if (this.observer) this.observer.disconnect();
    },
    toggleAltText: function () {
      if (Adapt.devtools.get('_altTextEnabled')) {
        this.addTimer(true);
        this.connectObserver();
      } else {
        this.removeTimer();
        this.removeAllAnnotations();
        this.disconnectObserver();
      }
    },
    addAnnotation: function ($img, $annotation) {
      var template = Handlebars.templates['devtoolsAnnotation'];
      var text = $img.attr('alt');
      if (!text) text = $img.attr('aria-label');
      var $annotation = $(template({
        text: text
      }));
      if (!text) $annotation.addClass('has-annotation-warning');
      $img.after($annotation);
      $img.data('annotation', $annotation);
      this.updateAnnotation($img, $annotation);
    },
    removeAnnotation: function ($img, $annotation) {
      $annotation.remove();
      $img.removeData('annotation');
    },
    removeAllAnnotations: function () {
      $('img').each(_.bind(function (index, element) {
        var $img = $(element);
        var $annotation = $img.data('annotation');
        if ($annotation) this.removeAnnotation($img, $annotation);
      }, this));
    },
    updateAnnotation: function ($img, $annotation) {
      var position = $img.position();
      position.left += parseInt($img.css('marginLeft'), 10) + parseInt($img.css('paddingLeft'), 10);
      position.top += parseInt($img.css('marginTop'), 10) + parseInt($img.css('paddingTop'), 10);
      $annotation.css(position);
    },
    onDomMutation: function (mutations) {
      this.mutated = true;
    },
    onTimer: function () {
      if (this.mutated === false) return;
      if (this.observer) this.mutated = false;
      this.disconnectObserver();
      $('img').each(_.bind(function (index, element) {
        var $img = $(element);
        var $annotation = $img.data('annotation');
        var isVisible = $img.is(':visible');

        if (isVisible) {
          if (!$annotation) this.addAnnotation($img, $annotation);else this.updateAnnotation($img, $annotation);
        } else if ($annotation) {
          this.removeAnnotation($img, $annotation);
        }
      }, this));
      this.connectObserver();
    }
  }, Backbone.Events);

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    AltText.initialize();
  });
  __AMD("extensions/adapt-devtools/js/toggle-alt-text", AltText);

  function breakCoreLocking() {
    Adapt.course.unset('_lockType');
    breakLocks(Adapt.contentObjects);
    breakLocks(Adapt.articles);
    breakLocks(Adapt.blocks);

    function breakLocks(collection) {
      collection.each(function (model) {
        model.unset('_lockType');
        model.unset('_isLocked');
      });
    }
  }

  function onUnlocked() {
    if (Adapt.devtools.get('_unlocked')) {
      breakCoreLocking();
      if (Adapt.location._currentId == Adapt.course.get('_id')) router.handleRoute ? router.handleRoute() : router.handleCourse();else router.handleId(Adapt.location._currentId);
    }
  }

  function onMenuPreRender(view) {
    if (Adapt.devtools.get('_unlocked')) {
      if (Adapt.location._currentId == view.model.get('_id')) {
        view.model.once('change:_isReady', _.bind(onMenuReady, view));
        view.model.getChildren().each(function (item) {
          if (item.has('_lock')) item.set('_lock', item.get('_lock').length > -1 ? [] : false);
          if (item._lock) item._lock = item._lock.length > -1 ? [] : false;
          if (item._locked === true) item._locked = false;
          if (item._isLocked === true) item._isLocked = false;
        });
      }
    }
  }

  function onMenuReady() {
    if (Adapt.devtools.get('_unlocked')) {
      this.$('a, button').prop('disabled', false).css('pointer-events', 'auto');
    }
  }

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;

    if (Adapt.devtools.get('_unlockAvailable')) {
      Adapt.devtools.on('change:_unlocked', onUnlocked);
      Adapt.on('menuView:preRender', onMenuPreRender);
    }
  });

  var buffer = '';
  var isMouseDown = false;
  var hitArea = 100;
  var coords = {};
  var topLeftTapHold = false;
  var topRightTapHold = false;
  var listenType = 0;
  var timeoutId;
  var focusableElements = "a,button,input,select,textarea,[tabindex],label";

  function onKeypress$1(e) {
    var c = String.fromCharCode(e.which).toLowerCase();
    buffer += c;
    if (isMouseDown && c == '5' && !Adapt.devtools.get('_isEnabled')) enable();else processBuffer();
  }

  function onMouseDown$1() {
    isMouseDown = true;
  }

  function onMouseUp$1() {
    isMouseDown = false;
  }

  function processBuffer() {
    var blen = buffer.length;
    if (blen > 100) buffer = buffer.substr(1, 100);
    blen = buffer.length;

    if (buffer.substr(blen - "kcheat".length, "kcheat".length) == "kcheat") {
      if (!Adapt.devtools.get('_isEnabled')) enable();
    }
  }

  function enable() {
    removeHooks();
    Adapt.devtools.set('_isEnabled', true);
    Adapt.trigger('devtools:enable');
    if (Adapt.location._currentId == Adapt.course.get('_id')) router.handleRoute ? router.handleRoute() : router.handleCourse();else router.handleId(Adapt.location._currentId);
  }

  function addHooks() {
    $(window).on("keypress", onKeypress$1);
    $(window).on("mousedown", onMouseDown$1);
    $(window).on("mouseup", onMouseUp$1);

    window.kcheat = function () {
      buffer = "kcheat";
      processBuffer();
    };

    router.route('kcheat', 'kcheat', function () {
      if (window.kcheat) window.kcheat();
    });
    if (Modernizr.touch) addTouchHook();
  }

  function removeHooks() {
    $(window).off("keypress", onKeypress$1);
    $(window).off("mousedown", onMouseDown$1);
    $(window).off("mouseup", onMouseUp$1);
    window.kcheat = undefined;
    if (Modernizr.touch) removeTouchHook();
  }

  function addTouchHook() {
    $('body').on('touchstart', onTouchStart);
    $('body').on('touchend', onTouchEnd);
    $('body').on('touchstart', focusableElements, onTouchStart);
  }

  function removeTouchHook() {
    clearTimeout(timeoutId);
    $('body').off('touchstart', onTouchStart);
    $('body').off('touchend', onTouchEnd);
    $('body').off('touchstart', focusableElements, onTouchStart);
  }

  function onTouchStart(event) {
    var touches = event.originalEvent.touches;
    if (touches.length != 1) return;
    coords.x = touches[0].pageX;
    coords.y = touches[0].pageY;

    if (coords.x >= 0 && coords.x < hitArea && coords.y >= 0 && coords.y < hitArea) {
      listenType = 1;
    } else if (coords.x >= $(window).width() - hitArea && coords.x < $(window).width() && coords.y >= 0 && coords.y < hitArea) {
      listenType = 2;
    } else {
      listenType = topLeftTapHold = topRightTapHold = false;
    }

    if (listenType) {
      timeoutId = setTimeout(function () {
        if (listenType) {
          if (listenType == 1) topLeftTapHold = true;else if (listenType == 2) topRightTapHold = true;

          if (topLeftTapHold && topRightTapHold) {
            if (window.kcheat) window.kcheat();
          }
        }
      }, 200);
    }
  }

  function onTouchEnd(event) {
    listenType = false;
    clearTimeout(timeoutId);
  }

  Adapt.once('adapt:initialize', function () {
    if (Adapt.devtools.get('_isEnabled')) return;

    _.defer(function () {
      addHooks();
    });
  });

  var TraceFocus = _.extend({
    openingTags: new RegExp("<[\\w-]+((\\s+[\\w-]+(\\s*=\\s*(?:\".*?\"|'.*?'|[^'\">\\s]+))*)+\\s*|\\s*)/?>"),
    consoleStyle: 'background: lightgray; color: blue',
    initialize: function () {
      this.onFocusIn = _.bind(this.onFocusIn, this);
      this.listenTo(Adapt.devtools, 'change:_traceFocusEnabled', this.toggleTraceFocus);
      this.toggleTraceFocus();
    },
    toggleTraceFocus: function () {
      if (Adapt.devtools.get('_traceFocusEnabled')) {
        $('body').on('focusin', this.onFocusIn);
      } else {
        $('body').off('focusin', this.onFocusIn);
      }
    },
    onFocusIn: function (e) {
      if (!$('html').is('.ie, .Edge')) return console.log('%cfocussed', this.consoleStyle, e.target);
      var $el = $(e.target);
      if (!$el[0] || !$el[0].outerHTML) return console.log('focussed: ', e.target);
      var openingTag = this.openingTags.exec($el[0].outerHTML)[0];

      if (openingTag) {
        var tokens = $el.text().replace(/[\s\xA0]*/, '').split(/\r\n|\r|\n/);
        if (tokens[0]) openingTag = openingTag.slice(0, 20) + '[...]';

        if ($('html').is('.ie8')) {
          console.log('focussed: ', openingTag, tokens[0]);
        } else {
          console.log('focussed: ', openingTag, tokens[0], $el);
        }
      } else {
        console.log('focussed: ' + e.target);
      }
    }
  }, Backbone.Events);

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    TraceFocus.initialize();
  });
  __AMD("extensions/adapt-devtools/js/toggle-trace-focus", TraceFocus);

  var mouseTarget = null;

  function init() {
    $(window).on('keypress', onKeypress);
    $(window).on('mousedown', onMouseDown);
    $(window).on('mouseup', onMouseUp);
  }

  function onKeypress(e) {
    var _char = String.fromCharCode(e.which).toLowerCase();

    if (mouseTarget) {
      switch (_char) {
        case 'c':
          return complete(mouseTarget);

        case 'r':
          return reset(mouseTarget);
      }
    }
  }

  function complete(element) {
    var model = Utils$1.getModelForElement(element);
    if (!model) return;

    function doCompletion(component) {
      component.set('_isComplete', true);
    }

    var descendantComponents = model.findDescendantModels('components');

    if (!descendantComponents || descendantComponents.length === 0) {
      console.log('devtools: completing', model.get('_id'));
      doCompletion(model);
      return;
    }

    console.log('devtools: completing all components in', model.get('_id'));

    _.each(descendantComponents, function (model) {
      doCompletion(model);
    });
  }

  function reset(element) {
    var model = Utils$1.getModelForElement(element);
    if (!model) return;
    var descendantComponents = model.findDescendantModels('components');

    if (!descendantComponents || descendantComponents.length === 0) {
      console.log('devtools: resetting', model.get('_id'));
      model.reset(true, true);
      return;
    }

    console.log('devtools: resetting all components in', model.get('_id'));

    _.each(descendantComponents, function (model) {
      model.reset(true, true);
    });
  }

  function onMouseDown(e) {
    if (e.which === 1) mouseTarget = e.target;
  }

  function onMouseUp(e) {
    if (e.which === 1) mouseTarget = null;
  }

  Adapt.once('adapt:initialize devtools:enable', function () {
    if (!Adapt.devtools.get('_isEnabled')) return;
    init();
  });

  var navigationView;
  var DevtoolsView = Backbone.View.extend({
    className: 'devtools',
    events: {
      'click .end-trickle': 'onEndTrickle',
      'change .hinting input': 'onToggleHinting',
      'change .banking input': 'onToggleBanking',
      'change .feedback input': 'onToggleFeedback',
      'change .auto-correct input': 'onToggleAutoCorrect',
      'change .alt-text input': 'onToggleAltText',
      'click .unlock': 'onUnlock',
      'click .open-map': 'onOpenMap',
      'click .open-spoor-log': 'onOpenSpoorLog',
      'click .complete-page': 'onCompletePage',
      'click .complete-menu': 'onCompleteMenu',
      'click .pass': 'onPassHalfFail',
      'click .half': 'onPassHalfFail',
      'click .fail': 'onPassHalfFail',
      'change .trace-focus input': 'onToggleTraceFocus'
    },
    initialize: function () {
      this.render();

      this._checkUnlockVisibility();

      this._checkSpoorLogVisibility();

      this._checkTrickleEndVisibility();

      this._checkBankingVisibility();

      this._checkFeedbackVisibility();

      this._checkHintingVisibility();

      this._checkAutoCorrectVisibility();

      this._checkAltTextVisibility();

      this._checkPassHalfFailVisibility();

      this._checkCompletePageVisibility();

      this._checkCompleteMenuVisibility();

      this._checkTraceFocusVisibility();
    },
    render: function () {
      var data = Adapt.devtools.toJSON();
      var template = Handlebars.templates['devtools'];
      this.$el.html(template(data));
      return this;
    },
    _checkUnlockVisibility: function () {
      if (!Adapt.devtools.get('_unlockAvailable') || Adapt.devtools.get('_unlocked')) this.$('.unlock').addClass('u-display-none');else this.$('.unlock').toggleClass('u-display-none', !this._checkForLocks());
    },
    _checkForLocks: function () {
      if (typeof AdaptModel.prototype.checkLocking !== 'function') return Adapt.location._contentType === 'menu';

      var hasLock = function (model) {
        return model.has('_lockType');
      };

      if (hasLock(Adapt.course)) return true;
      if (Adapt.contentObjects.some(hasLock)) return true;
      if (Adapt.articles.some(hasLock)) return true;
      if (Adapt.blocks.some(hasLock)) return true;
      return false;
    },
    onUnlock: function () {
      Adapt.devtools.set('_unlocked', true);

      this._checkUnlockVisibility();
    },
    onOpenMap: function () {
      CourseMap$1.open();
      Adapt.trigger('drawer:closeDrawer');
    },
    _checkSpoorLogVisibility: function () {
      var spoorInstalled = require.defined('extensions/adapt-contrib-spoor/js/adapt-contrib-spoor');

      if (spoorInstalled) return;
      this.$('.open-spoor-log').addClass('is-disabled').attr('disabled', 'disabled');
    },
    onOpenSpoorLog: function () {
      Adapt.trigger('drawer:closeDrawer');

      if (Adapt.spoor) {
        Adapt.spoor.scorm.showDebugWindow();
        return;
      }

      require('extensions/adapt-contrib-spoor/js/scorm').showDebugWindow();
    },
    _checkTrickleEndVisibility: function () {
      this.$('.end-trickle').toggleClass('u-display-none', !Adapt.devtools.get('_trickleEnabled'));
    },
    onEndTrickle: function () {
      Adapt.devtools.set('_trickleEnabled', false);

      this._checkTrickleEndVisibility();
    },
    _checkBankingVisibility: function () {
      if (!Adapt.devtools.get('_toggleFeedbackAvailable')) {
        this.$('.banking').addClass('u-display-none');
        return;
      }

      var bankedAssessments = ToggleBanking$1.getBankedAssessmentsInCurrentPage();

      var isBankingEnabled = function (m) {
        return m.get('_assessment')._banks._isEnabled;
      };

      if (bankedAssessments.length > 0) {
        this.$('.banking').removeClass('u-display-none');
        this.$('.banking label').toggleClass('is-selected', _.some(bankedAssessments, isBankingEnabled));
        return;
      }

      this.$('.banking').addClass('u-display-none');
    },
    onToggleBanking: function () {
      ToggleBanking$1.toggle();

      this._checkBankingVisibility();
    },
    _checkFeedbackVisibility: function () {
      if (Adapt.devtools.get('_toggleFeedbackAvailable')) {
        this.$('.feedback').removeClass('u-display-none');
        this.$('.feedback label').toggleClass('is-selected', Adapt.devtools.get('_feedbackEnabled'));
        return;
      }

      this.$('.feedback').addClass('u-display-none');
    },
    onToggleFeedback: function () {
      Adapt.devtools.toggleFeedback();

      this._checkFeedbackVisibility();
    },
    _checkHintingVisibility: function () {
      if (Adapt.devtools.get('_hintingAvailable')) {
        this.$('.hinting').removeClass('u-display-none');
        this.$('.hinting label').toggleClass('is-selected', Adapt.devtools.get('_hintingEnabled'));
        return;
      }

      this.$('.hinting').addClass('u-display-none');
    },
    onToggleHinting: function () {
      Adapt.devtools.toggleHinting();

      this._checkHintingVisibility();
    },
    _checkAutoCorrectVisibility: function () {
      if (Adapt.devtools.get('_autoCorrectAvailable')) {
        this.$('.is-toggle.auto-correct').removeClass('u-display-none');
        this.$('.is-toggle.auto-correct label').toggleClass('is-selected', Adapt.devtools.get('_autoCorrectEnabled'));
        this.$('.is-tip.auto-correct').toggleClass('u-display-none', Adapt.devtools.get('_autoCorrectEnabled'));
        return;
      }

      this.$('.auto-correct').addClass('u-display-none');
    },
    onToggleAutoCorrect: function () {
      Adapt.devtools.toggleAutoCorrect();

      this._checkAutoCorrectVisibility();
    },
    _checkAltTextVisibility: function () {
      if (Adapt.devtools.get('_altTextAvailable')) {
        this.$('.is-toggle.alt-text').removeClass('u-display-none');
        this.$('.is-toggle.alt-text label').toggleClass('is-selected', Adapt.devtools.get('_altTextEnabled'));
        this.$('.is-tip.alt-text').toggleClass('u-display-none', Adapt.devtools.get('_altTextEnabled'));
        return;
      }

      this.$('.alt-text').addClass('u-display-none');
    },
    onToggleAltText: function () {
      Adapt.devtools.toggleAltText();

      this._checkAltTextVisibility();
    },
    _checkCompletePageVisibility: function () {
      var currentModel = Adapt.findById(Adapt.location._currentId);

      if (currentModel.get('_type') !== 'page') {
        this.$('.complete-page').addClass('u-display-none');
        return;
      }

      var incomplete = currentModel.findDescendantModels('components', {
        where: {
          _isInteractionComplete: false
        }
      });
      this.$('.complete-page').toggleClass('u-display-none', incomplete.length === 0);
    },
    onCompletePage: function (e) {
      var currentModel = Adapt.findById(Adapt.location._currentId);
      if (Adapt.devtools.get('_trickleEnabled')) Adapt.trigger('trickle:kill');
      var incomplete = currentModel.findDescendantModels('components', {
        where: {
          _isInteractionComplete: false
        }
      });
      incomplete.forEach(function (component) {
        if (component.get('_isQuestionType')) {
          component.set({
            _isCorrect: true,
            _isSubmitted: true,
            _score: 1
          });
          component.set('_attemptsLeft', Math.max(0, component.set('_attempts') - 1));
        }

        component.set('_isComplete', true);
        component.set(currentModel.has('_isInteractionsComplete') ? '_isInteractionsComplete' : '_isInteractionComplete', true);
      });
      Adapt.trigger('drawer:closeDrawer');
    },
    _checkCompleteMenuVisibility: function () {
      var currentModel = Adapt.findById(Adapt.location._currentId);

      if (currentModel.get('_type') !== 'menu' && currentModel.get('_type') !== 'course') {
        this.$('.complete-menu').addClass('u-display-none');
        return;
      }

      var incomplete = currentModel.findDescendantModels('components', {
        where: {
          _isComplete: false
        }
      });
      this.$('.complete-menu').toggleClass('u-display-none', incomplete.length === 0);
    },
    onCompleteMenu: function (e) {
      var currentModel = Adapt.findById(Adapt.location._currentId);
      if (Adapt.devtools.get('_trickleEnabled')) Adapt.trigger('trickle:kill');
      var incomplete = currentModel.findDescendantModels('components', {
        where: {
          _isComplete: false
        }
      });

      _.invoke(incomplete, 'set', '_isComplete', true);

      Adapt.trigger('drawer:closeDrawer');
    },
    _checkPassHalfFailVisibility: function () {
      var currentModel = Adapt.findById(Adapt.location._currentId);

      if (currentModel.get('_type') !== 'page') {
        this.$('.pass, .half, .fail').addClass('u-display-none');
        return;
      }

      var unanswered = currentModel.findDescendantModels('components', {
        where: {
          _isQuestionType: true,
          _isSubmitted: false
        }
      });
      if (unanswered.length === 0) this.$('.tip.pass-half-fail').html('');else this.$('.is-tip.pass-half-fail').html('With the ' + unanswered.length + ' unanswered question(s) in this page do the following:');
      this.$('.pass, .half, .fail').toggleClass('u-display-none', unanswered.length === 0);
    },
    onPassHalfFail: function (e) {
      if (Adapt.devtools.get('_trickleEnabled')) Adapt.trigger('trickle:kill');
      $('.js-loading').show();
      var tutorEnabled = Adapt.devtools.get('_feedbackEnabled');
      if (tutorEnabled) Adapt.devtools.set('_feedbackEnabled', false);
      if ($(e.currentTarget).hasClass('pass')) PassHalfFail$1.pass(this.onPassHalfFailComplete.bind(this, tutorEnabled));else if ($(e.currentTarget).hasClass('half')) PassHalfFail$1.half(this.onPassHalfFailComplete.bind(this, tutorEnabled));else PassHalfFail$1.fail(this.onPassHalfFailComplete.bind(this, tutorEnabled));
      Adapt.trigger('drawer:closeDrawer');
    },
    onPassHalfFailComplete: function (tutorEnabled) {
      console.log('onPassHalfFailComplete');
      if (tutorEnabled) Adapt.devtools.set('_feedbackEnabled', true);
      $('.js-loading').hide();
    },
    _checkTraceFocusVisibility: function () {
      if (Adapt.devtools.get('_traceFocusAvailable')) {
        this.$('.is-toggle.trace-focus').removeClass('u-display-none');
        this.$('.is-toggle.trace-focus label').toggleClass('is-selected', Adapt.devtools.get('_traceFocusEnabled'));
        return;
      }

      this.$('.trace-focus').addClass('u-display-none');
    },
    onToggleTraceFocus: function () {
      Adapt.devtools.toggleTraceFocus();

      this._checkTraceFocusVisibility();
    }
  });
  var DevtoolsNavigationView = Backbone.View.extend({
    initialize: function () {
      var template = Handlebars.templates.devtoolsNavigation;
      this.$el = $(template());
      $('html').addClass('devtools-enabled').toggleClass('devtools-extended', Adapt.devtools.get('_extended'));
      if (this.$el.is('a') || this.$el.is('button')) this.$el.on('click', this.onDevtoolsClicked.bind(this));else this.$el.find('a, button').on('click', this.onDevtoolsClicked.bind(this));
      this.listenTo(Adapt, 'pageView:postRender menuView:postRender', this.onContentRendered);
      this.listenToOnce(Adapt, 'pageView:postRender menuView:postRender', this.render);
    },
    render: function () {
      $('.nav__inner').append(this.$el);
      return this;
    },
    remove: function () {
      this.$el.remove();
      this.stopListening();
      return this;
    },
    deferredRender: function () {
      _.defer(this.render.bind(this));
    },
    onContentRendered: function (view) {
      if (view.model.get('_id') === Adapt.location._currentId) {
        this.stopListening(view.model, 'change:_isReady', this.deferredRender);
        this.listenToOnce(view.model, 'change:_isReady', this.deferredRender);
      }
    },
    onDevtoolsClicked: function (event) {
      if (event && event.preventDefault) event.preventDefault();
      Adapt.drawer.triggerCustomView(new DevtoolsView().$el, false);
    }
  });
  Adapt.once('courseModel:dataLoaded', function () {
    Adapt.devtools = new DevtoolsModel$1();
  });

  function initNavigationView() {
    if (!Adapt.devtools.get('_isEnabled')) return;
    if (navigationView) navigationView.remove();
    navigationView = new DevtoolsNavigationView();
  }

  Adapt.once('adapt:initialize devtools:enable', function () {
    initNavigationView();
    Adapt.on('app:languageChanged', initNavigationView);
  });

  var DOMModifier = function DOMModifier(_ref) {
    var _ref$elementAddFilter = _ref.elementAddFilter,
        elementAddFilter = _ref$elementAddFilter === void 0 ? function () {} : _ref$elementAddFilter,
        _ref$elementRemoveFil = _ref.elementRemoveFilter,
        elementRemoveFilter = _ref$elementRemoveFil === void 0 ? function () {} : _ref$elementRemoveFil,
        _ref$onElementAdd = _ref.onElementAdd,
        onElementAdd = _ref$onElementAdd === void 0 ? function () {} : _ref$onElementAdd,
        _ref$onElementRemove = _ref.onElementRemove,
        onElementRemove = _ref$onElementRemove === void 0 ? function () {} : _ref$onElementRemove;

    _classCallCheck(this, DOMModifier);

    elementAddFilter = elementAddFilter.bind(this);
    elementRemoveFilter = elementRemoveFilter.bind(this);
    onElementAdd = onElementAdd.bind(this);
    onElementRemove = onElementRemove.bind(this);

    function filter(list, prop, predicate) {
      var nodes = list.reduce(function (nodes, item) {
        var arr = _.toArray(item[prop]);

        return nodes.concat(arr);
      }, []);
      var elementNodes = nodes.filter(function (el) {
        return el.nodeType === 1;
      });
      var foundNodes = elementNodes.reduce(function (nodes, el) {
        return nodes.concat([el].concat(_toConsumableArray($(el).find('*').toArray())).filter(predicate));
      }, []);
      return foundNodes;
    }

    var observer = new MutationObserver(function (list, observer) {
      var added = filter(list, 'addedNodes', elementAddFilter);
      var removed = filter(list, 'removedNodes', elementRemoveFilter);

      if (added.length) {
        added.forEach(onElementAdd);
      }

      if (removed.length) {
        removed.forEach(onElementRemove);
      }
    });
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  };

  var LottieView = __AMD("extensions/adapt-graphicLottie/js/LottieView", function (_Backbone$View) {
    _inherits(LottieView, _Backbone$View);

    var _super = _createSuper(LottieView);

    function LottieView() {
      _classCallCheck(this, LottieView);

      return _super.apply(this, arguments);
    }

    _createClass(LottieView, [{
      key: "events",
      value: function events() {
        return {
          'click .graphiclottie__playpause': 'onPlayPauseClick',
          'click': 'onGeneralPlayPause'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        ___default['default'].bindAll(this, 'render', 'onScreenChange', 'update', 'onDataReady');

        this.config = Adapt.course.get('_graphicLottie');
        var fileExtension = this.config._fileExtension || 'svgz';
        this._rex = new RegExp("\\.".concat(fileExtension), 'i');
        this.hasUserPaused = false;
        this.isDataReady = false;
        this.animation = null;
        this.setUpAttributeChangeObserver();
        this.setUpListeners();
        this.render();
      }
    }, {
      key: "setUpAttributeChangeObserver",
      value: function setUpAttributeChangeObserver() {
        var observer = new MutationObserver(this.render);
        observer.observe(this.el, {
          attributes: true
        });
      }
    }, {
      key: "setUpListeners",
      value: function setUpListeners() {
        this.$el.on('onscreen', this.onScreenChange);
        this.listenTo(Adapt, 'device:resize', this.render);
      }
    }, {
      key: "onScreenChange",
      value: function onScreenChange(event) {
        var _this$config$_onScree;

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            onscreen = _ref.onscreen,
            percentInview = _ref.percentInview;

        if (!this.animation) return;
        var isOffScreen = !onscreen || percentInview < ((_this$config$_onScree = this.config._onScreenPercentInviewVertical) !== null && _this$config$_onScree !== void 0 ? _this$config$_onScree : 1);
        if (isOffScreen) return this.onOffScreen();
        this.onOnScreen();
      }
    }, {
      key: "onOffScreen",
      value: function onOffScreen() {
        if (this.isPaused || this.hasUserPaused) return;
        if (!this.config._offScreenPause) return;
        this.pause(true);
        if (!this.config._offScreenRewind) return;
        this.rewind();
      }
    }, {
      key: "onOnScreen",
      value: function onOnScreen() {
        if (!this.isPaused) return;
        this.$player.removeClass('is-graphiclottie-nocontrols');
        if (!this.config._autoPlay) return;
        if (this.hasUserPaused) return;
        this.play(true);
      }
    }, {
      key: "play",
      value: function play() {
        var noControls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var isFinished = this.animation.currentFrame === this.animation.totalFrames - 1;

        if (isFinished) {
          this.animation.stop();
        }

        this.animation.play();
        this.update();

        if (noControls) {
          this.$player.removeClass('is-graphiclottie-nocontrols');
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        var noControls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (noControls) {
          this.$player.addClass('is-graphiclottie-nocontrols');
        }

        this.animation.pause();
        this.update();
      }
    }, {
      key: "isPaused",
      get: function () {
        return this.animation.isPaused;
      }
    }, {
      key: "togglePlayPause",
      value: function togglePlayPause(noControls) {
        this[this.isPaused ? 'play' : 'pause'](noControls);
      }
    }, {
      key: "rewind",
      value: function rewind() {
        var isPaused = this.isPaused;
        this.animation.stop();
        this.animation[isPaused ? 'goToAndStop' : 'goToAndPlay'](0, true);
        this.update();
      }
    }, {
      key: "update",
      value: function update() {
        this.$player.toggleClass('is-graphiclottie-playing', !this.animation.isPaused);
        this.$player.toggleClass('is-graphiclottie-paused', this.animation.isPaused);
        Adapt.a11y.toggleEnabled(this.$player.find('.graphiclottie__rewind'), this.animation.currentFrame !== 0);
      }
    }, {
      key: "render",
      value: function render() {
        if (!this.shouldRender) return;
        this._renderedSrc = this.src;

        var isAnimation = this._rex.test(this.src);

        this.destroyAnimation();
        this.$el.html(Handlebars.templates.graphicLottie(_objectSpread2(_objectSpread2({}, this.config), {}, {
          _isAnimation: isAnimation,
          _src: this.src,
          alt: this.alt
        })));
        if (!isAnimation) return;
        this.createAnimation();
      }
    }, {
      key: "canvas",
      get: function () {
        return this.$('canvas')[0];
      }
    }, {
      key: "$player",
      get: function () {
        return this.$('.graphiclottie__player');
      }
    }, {
      key: "createAnimation",
      value: function createAnimation() {
        var loop = this.config._loops;
        this.animation = Lottie__default['default'].loadAnimation({
          container: null,
          renderer: 'canvas',
          loop: loop === -1 ? true : loop,
          autoplay: false,
          path: this.src,
          rendererSettings: {
            context: this.canvas.getContext('2d'),
            preserveAspectRatio: 'xMinYMin slice',
            clearCanvas: true
          }
        });
        this.animation.addEventListener('data_ready', this.onDataReady);
        this.animation.addEventListener('complete', this.update);
        this.animation.addEventListener('loopComplete', this.update);
        this.animation.addEventListener('enterFrame', this.update);
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        this.isDataReady = true;
        this.canvas.height = this.animation.animationData.h;
        this.canvas.width = this.animation.animationData.w;
        this.animation.resize();
        this.pause();
        this.rewind();
        this.trigger('ready');
      }
    }, {
      key: "onEnterFrame",
      value: function onEnterFrame() {
        this.update();
      }
    }, {
      key: "onGeneralPlayPause",
      value: function onGeneralPlayPause() {
        if (!this.config._showPauseControl) return;
        this.togglePlayPause();
        this.hasUserPaused = this.animation.isPaused;

        if (this.hasUserPaused && this.config._onPauseRewind) {
          this.rewind();
        }
      }
    }, {
      key: "onPlayPauseClick",
      value: function onPlayPauseClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.onGeneralPlayPause();
      }
    }, {
      key: "destroyAnimation",
      value: function destroyAnimation() {
        if (!this.animation) return;
        this.animation.stop();
        this.animation.destroy();
        this.animation = null;
      }
    }, {
      key: "shouldRender",
      get: function () {
        return this._renderedSrc !== this.src;
      }
    }, {
      key: "src",
      get: function () {
        var small = this.$el.attr('data-small');
        var large = this.$el.attr('data-large');
        var src = this.$el.attr('src');
        return src || (Adapt.device.screenSize === 'small' ? small : large) || large;
      }
    }, {
      key: "alt",
      get: function () {
        this._alt = this.$el.attr('aria-label') || this.$el.attr('alt') || this._alt;
        this.$el.removeAttr('aria-label attr');
        return this._alt;
      }
    }, {
      key: "remove",
      value: function remove() {
        this.destroyAnimation();

        _get(_getPrototypeOf(LottieView.prototype), "remove", this).call(this);
      }
    }]);

    return LottieView;
  }(Backbone.View));

  var GraphicLottie = function (_Backbone$Controller) {
    _inherits(GraphicLottie, _Backbone$Controller);

    var _super = _createSuper(GraphicLottie);

    function GraphicLottie() {
      _classCallCheck(this, GraphicLottie);

      return _super.apply(this, arguments);
    }

    _createClass(GraphicLottie, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt, 'app:dataReady', this.onDataReady);
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        var config = Adapt.course.get('_graphicLottie');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        this.setUpEventListeners();
        this.setUp();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        document.body.addEventListener('transitionend', this.checkOnScreen.bind(this));
        this.listenTo(Adapt, 'notify:opened', this.checkOnScreen);
      }
    }, {
      key: "checkOnScreen",
      value: function checkOnScreen() {
        $.inview();
      }
    }, {
      key: "setUp",
      value: function setUp() {
        var config = Adapt.course.get('_graphicLottie');
        var fileExtension = config._fileExtension || 'svgz';
        var rex = new RegExp("\\.".concat(fileExtension), 'i');
        var waitFor = 0;
        new DOMModifier({
          elementAddFilter: function (element) {
            if (element.nodeName !== 'IMG') return;
            var img = element;
            return rex.test(img.src) || rex.test(img.getAttribute('data-large')) || rex.test(img.getAttribute('data-small'));
          },
          onElementAdd: function (img) {
            var div = document.createElement('div');
            $(img).replaceWith(div);
            div.setAttribute('data-graphiclottie', true);
            $(div).attr(_objectSpread2(_objectSpread2({}, _toConsumableArray(img.attributes).reduce(function (attrs, _ref) {
              var name = _ref.name,
                  value = _ref.value;
              return _objectSpread2(_objectSpread2({}, _defineProperty({}, name, value)), attrs);
            }, {})), {}, {
              'class': img.className,
              'id': img.id
            }));

            if (waitFor === 0) {
              Adapt.wait.begin();
            }

            waitFor++;
            div.lottieView = new LottieView({
              el: div
            });
            div.lottieView.on('ready', function () {
              waitFor--;

              if (waitFor === 0) {
                Adapt.wait.end();
              }
            });
          },
          elementRemoveFilter: function (element) {
            return element.getAttribute('data-graphiclottie');
          },
          onElementRemove: function (div) {
            var _div$lottieView;

            if (waitFor !== 0) return;
            (_div$lottieView = div.lottieView) === null || _div$lottieView === void 0 ? void 0 : _div$lottieView.remove();
            div.lottieView = null;
          }
        });
      }
    }]);

    return GraphicLottie;
  }(Backbone.Controller);

  __AMD("extensions/adapt-graphicLottie/js/adapt-graphicLottie", new GraphicLottie());

  var MenuItemView = function (_AdaptView) {
    _inherits(MenuItemView, _AdaptView);

    var _super = _createSuper(MenuItemView);

    function MenuItemView() {
      _classCallCheck(this, MenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(MenuItemView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'listitem',
          'aria-labelledby': this.model.get('_id') + '-heading'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['menu-item', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isVisited') ? 'is-visited' : '', this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isLocked') ? 'is-locked' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.checkCompletionStatus();
        this.model.checkInteractionCompletionStatus();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.imageready(this.setReadyStatus.bind(this));
      }
    }]);

    return MenuItemView;
  }(AdaptView$1);

  MenuItemView.type = 'menuItem';
  var MenuItemView$1 = __AMD("core/js/views/menuItemView", MenuItemView);

  var MenuView = function (_ContentObjectView) {
    _inherits(MenuView, _ContentObjectView);

    var _super = _createSuper(MenuView);

    function MenuView() {
      _classCallCheck(this, MenuView);

      return _super.apply(this, arguments);
    }

    return MenuView;
  }(ContentObjectView);

  Object.assign(MenuView, {
    childContainer: '.js-children',
    childView: MenuItemView$1,
    type: 'menu',
    template: 'menu'
  });
  var MenuView$1 = __AMD("core/js/views/menuView", MenuView);

  var BoxMenuItemView = function (_MenuItemView) {
    _inherits(BoxMenuItemView, _MenuItemView);

    var _super = _createSuper(BoxMenuItemView);

    function BoxMenuItemView() {
      _classCallCheck(this, BoxMenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuItemView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuItemView.prototype), "className", this).call(this), " boxmenu-item");
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-click': 'onClickMenuItemButton'
        };
      }
    }, {
      key: "onClickMenuItemButton",
      value: function onClickMenuItemButton(event) {
        if (event && event.preventDefault) event.preventDefault();
        if (this.model.get('_isLocked')) return;
        router.navigateToElement(this.model.get('_id'));
      }
    }]);

    return BoxMenuItemView;
  }(MenuItemView$1);

  BoxMenuItemView.template = 'boxMenuItem';
  var BoxMenuItemView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuItemView", BoxMenuItemView);

  var BoxMenuGroupView = function (_MenuItemView) {
    _inherits(BoxMenuGroupView, _MenuItemView);

    var _super = _createSuper(BoxMenuGroupView);

    function BoxMenuGroupView() {
      _classCallCheck(this, BoxMenuGroupView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuGroupView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuGroupView.prototype), "className", this).call(this), " boxmenu-group");
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _.defer(this.addChildren.bind(this));

        this.$el.imageready(this.setReadyStatus.bind(this));
        this.$el.parents('.boxmenu__item-container').addClass('has-groups');
      }
    }]);

    return BoxMenuGroupView;
  }(MenuItemView$1);

  BoxMenuGroupView.template = 'boxMenuGroup';
  BoxMenuGroupView.childContainer = '.js-group-children';
  BoxMenuGroupView.childView = BoxMenuItemView$1;
  var BoxMenuGroupView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuGroupView", BoxMenuGroupView);

  var BoxMenuView = function (_MenuView) {
    _inherits(BoxMenuView, _MenuView);

    var _super = _createSuper(BoxMenuView);

    function BoxMenuView() {
      _classCallCheck(this, BoxMenuView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuView.prototype), "className", this).call(this), " boxmenu");
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(BoxMenuView.prototype), "initialize", this).call(this);

        this.setStyles();
        this.listenTo(Adapt, 'device:changed', this.onDeviceResize);
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.setStyles();
      }
    }, {
      key: "addChildren",
      value: function addChildren() {
        var _this = this;

        var nthChild = 0;
        var models = this.model.getChildren().models;
        var childViews = [];
        models.forEach(function (model) {
          if (!model.get('_isAvailable')) return;

          if (model.get('_isHidden')) {
            model.set('_isReady', true);
            return;
          }

          nthChild++;
          model.set('_nthChild', nthChild);
          var ChildView = model.get('_type') === 'menu' && model.get('_boxMenu') && model.get('_boxMenu')._renderAsGroup ? BoxMenuGroupView$1 : BoxMenuItemView$1;

          var $parentContainer = _this.$(_this.constructor.childContainer);

          var childView = new ChildView({
            model: model
          });
          childViews.push(childView);
          $parentContainer.append(childView.$el);
        });
        this.setChildViews(childViews);
      }
    }, {
      key: "setStyles",
      value: function setStyles() {
        this.setBackgroundImage();
        this.setBackgroundStyles();
        this.processHeader();
      }
    }, {
      key: "setBackgroundImage",
      value: function setBackgroundImage() {
        var _backgroundImages$;

        var config = this.model.get('_boxMenu');
        var backgroundImages = config === null || config === void 0 ? void 0 : config._backgroundImage;
        if (!backgroundImages) return;
        var backgroundImage = (_backgroundImages$ = backgroundImages["_".concat(Adapt.device.screenSize)]) !== null && _backgroundImages$ !== void 0 ? _backgroundImages$ : backgroundImages._small;
        this.$el.toggleClass('has-bg-image', Boolean(backgroundImage)).css('background-image', backgroundImage ? 'url(' + backgroundImage + ')' : '');
      }
    }, {
      key: "setBackgroundStyles",
      value: function setBackgroundStyles() {
        var config = this.model.get('_boxMenu');
        var styles = config === null || config === void 0 ? void 0 : config._backgroundStyles;
        if (!styles) return;
        this.$el.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "processHeader",
      value: function processHeader() {
        var config = this.model.get('_boxMenu');
        var header = config === null || config === void 0 ? void 0 : config._menuHeader;
        if (!header) return;
        var $header = this.$('.menu__header');
        this.setHeaderBackgroundImage(header, $header);
        this.setHeaderBackgroundStyles(header, $header);
        this.setHeaderMinimumHeight(header, $header);
      }
    }, {
      key: "setHeaderBackgroundImage",
      value: function setHeaderBackgroundImage(config, $header) {
        var _backgroundImages$2;

        var backgroundImages = config._backgroundImage;
        if (!backgroundImages) return;
        var backgroundImage = (_backgroundImages$2 = backgroundImages["_".concat(Adapt.device.screenSize)]) !== null && _backgroundImages$2 !== void 0 ? _backgroundImages$2 : backgroundImages._small;
        $header.toggleClass('has-bg-image', Boolean(backgroundImage)).css('background-image', backgroundImage ? 'url(' + backgroundImage + ')' : '');
      }
    }, {
      key: "setHeaderBackgroundStyles",
      value: function setHeaderBackgroundStyles(config, $header) {
        var styles = config._backgroundStyles;
        if (!styles) return;
        $header.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "setHeaderMinimumHeight",
      value: function setHeaderMinimumHeight(config, $header) {
        var _minimumHeights$;

        var minimumHeights = config._minimumHeights;
        if (!minimumHeights) return;
        var minimumHeight = (_minimumHeights$ = minimumHeights["_".concat(Adapt.device.screenSize)]) !== null && _minimumHeights$ !== void 0 ? _minimumHeights$ : minimumHeights._small;
        $header.toggleClass('has-min-height', Boolean(minimumHeight)).css('min-height', minimumHeight ? minimumHeight + 'px' : '');
      }
    }]);

    return BoxMenuView;
  }(MenuView$1);

  BoxMenuView.template = 'boxMenu';
  var BoxMenuView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuView", BoxMenuView);

  Adapt.register('course menu', {
    view: BoxMenuView$1
  });
  Adapt.register('boxMenu', {
    view: BoxMenuView$1,
    model: MenuModel$1.extend({})
  });

  var ThemeView = Backbone.View.extend({
    className: function () {},
    initialize: function () {
      this.setStyles();
      this.listenTo(Adapt, {
        "device:changed": this.onDeviceResize,
        "remove": this.remove
      });
    },
    onDeviceResize: function () {
      this.setStyles();
    },
    remove: function () {
      Backbone.View.prototype.remove.call(this);
      this.onRemove();
    },
    setStyles: function () {
      this.setClasses();
      this.setBackgroundImage();
      this.setBackgroundStyles();
      this.setMinimumHeight();
      this.setCustomStyles();
    },
    setClasses: function () {
      this.$el.addClass(this.className());
    },
    setBackgroundImage: function () {
      var backgroundImages = this.model.get("_backgroundImage");
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        this.$el.addClass("has-bg-image").css("background-image", "url(" + backgroundImage + ")");
      } else {
        this.$el.removeClass("has-bg-image").css("background-image", "");
      }
    },
    setBackgroundStyles: function () {
      var styles = this.model.get("_backgroundStyles");
      if (!styles) return;
      this.$el.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setMinimumHeight: function () {
      var minimumHeights = this.model.get("_minimumHeights");
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;

        case "medium":
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        this.$el.addClass("has-min-height").css("min-height", minimumHeight + "px");
      } else {
        this.$el.removeClass("has-min-height").css("min-height", "");
      }
    },
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeView$1 = __AMD("theme/adapt-theme-odi-generic/js/themeView", ThemeView);

  var ThemePageView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {
      this.processHeader();
    },
    processHeader: function () {
      var header = this.model.get('_pageHeader');
      if (!header) return;
      var $header = this.$('.page__header');
      this.setHeaderBackgroundImage(header, $header);
      this.setHeaderBackgroundStyles(header, $header);
      this.setHeaderMinimumHeight(header, $header);
    },
    setHeaderBackgroundImage: function (config, $header) {
      var backgroundImages = config._backgroundImage;
      if (!backgroundImages) return;
      var backgroundImage;

      switch (Adapt.device.screenSize) {
        case "large":
          backgroundImage = backgroundImages._large;
          break;

        case "medium":
          backgroundImage = backgroundImages._medium;
          break;

        default:
          backgroundImage = backgroundImages._small;
      }

      if (backgroundImage) {
        $header.addClass("has-bg-image").css("background-image", "url(" + backgroundImage + ")");
      } else {
        $header.removeClass("has-bg-image").css("background-image", "");
      }
    },
    setHeaderBackgroundStyles: function (config, $header) {
      var styles = config._backgroundStyles;
      if (!styles) return;
      $header.css({
        'background-repeat': styles._backgroundRepeat,
        'background-size': styles._backgroundSize,
        'background-position': styles._backgroundPosition
      });
    },
    setHeaderMinimumHeight: function (config, $header) {
      var minimumHeights = config._minimumHeights;
      if (!minimumHeights) return;
      var minimumHeight;

      switch (Adapt.device.screenSize) {
        case "large":
          minimumHeight = minimumHeights._large;
          break;

        case "medium":
          minimumHeight = minimumHeights._medium;
          break;

        default:
          minimumHeight = minimumHeights._small;
      }

      if (minimumHeight) {
        $header.addClass("has-min-height").css("min-height", minimumHeight + "px");
      } else {
        $header.removeClass("has-min-height").css("min-height", "");
      }
    },
    onRemove: function () {}
  });
  var ThemePageView$1 = __AMD("theme/adapt-theme-odi-generic/js/themePageView", ThemePageView);

  var ThemeArticleView = ThemeView$1.extend({
    className: function () {},
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeArticleView$1 = __AMD("theme/adapt-theme-odi-generic/js/themeArticleView", ThemeArticleView);

  var ThemeBlockView = ThemeView$1.extend({
    className: function () {
      return this.model.get("_isDividerBlock") ? "is-divider-block" : "";
    },
    setCustomStyles: function () {},
    onRemove: function () {}
  });
  var ThemeBlockView$1 = __AMD("theme/adapt-theme-odi-generic/js/themeBlockView", ThemeBlockView);

  function onDataReady() {
    $("html").addClass(Adapt.course.get("_courseStyle"));
  }

  function onPostRender(view) {
    var model = view.model;
    var theme = model.get("_odi-generic");
    if (!theme) return;

    switch (model.get("_type")) {
      case "page":
        new ThemePageView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case "article":
        new ThemeArticleView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      case "block":
        new ThemeBlockView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
        break;

      default:
        new ThemeView$1({
          model: new Backbone.Model(theme),
          el: view.$el
        });
    }
  }

  Adapt.on({
    "app:dataReady": onDataReady,
    "pageView:postRender articleView:postRender blockView:postRender": onPostRender
  });

  register("header", function Header(props) {
    var _globals$_components, _globals$_components$;

    var jsxHeading = React.useRef(null);
    var _id = props._id,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        mobileInstruction = props.mobileInstruction,
        _type = props._type,
        _component = props._component,
        _disableAccessibilityState = props._disableAccessibilityState,
        _isA11yComponentDescriptionEnabled = props._isA11yComponentDescriptionEnabled,
        _props$classNamePrefi = props.classNamePrefixes,
        classNamePrefixes = _props$classNamePrefi === void 0 ? [_type && _type.toLowerCase(), _component && _component.toLowerCase()].filter(Boolean) : _props$classNamePrefi;
    var sizedInstruction = mobileInstruction && Adapt.device.screenSize !== 'large' ? mobileInstruction : instruction;
    var isSet = displayTitle || body || sizedInstruction;
    if (!isSet) return null;

    var _globals = Adapt.course.get('_globals');

    var ariaRegion = _globals === null || _globals === void 0 ? void 0 : (_globals$_components = _globals._components) === null || _globals$_components === void 0 ? void 0 : (_globals$_components$ = _globals$_components["_".concat(_component)]) === null || _globals$_components$ === void 0 ? void 0 : _globals$_components$.ariaRegion;
    return React__default['default'].createElement("div", {
      id: "".concat(_id, "-header"),
      className: prefixClasses(classNamePrefixes, ['__header'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__header-inner'])
    }, displayTitle && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title'])
    }, !_disableAccessibilityState && React__default['default'].createElement("div", {
      className: "js-heading",
      ref: jsxHeading
    }), React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title-inner']),
      "aria-hidden": !_disableAccessibilityState
    }, html(compile(displayTitle, props)))), _isA11yComponentDescriptionEnabled && ariaRegion && React__default['default'].createElement("div", {
      className: "aria-label"
    }, html(compile(ariaRegion))), body && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body-inner'])
    }, html(compile(body, props)))), sizedInstruction && React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction-inner'])
    }, html(compile(sizedInstruction, props))))));
  });

  register("image", function Image(props) {
    var hasMediumSetting = Object.prototype.hasOwnProperty.call(props, '_medium') || Object.prototype.hasOwnProperty.call(props, 'medium');
    var screenSize = hasMediumSetting ? Adapt.device.screenSize : Adapt.device.screenSize === 'large' ? 'large' : 'small';
    var src = props["_".concat(screenSize)] || props["".concat(screenSize)] || props._src || props.src;
    var hasSource = Boolean(src);
    if (!hasSource) return null;
    var attributionClassNamePrefixes = props.attributionClassNamePrefixes || props.classNamePrefixes;
    return React__default['default'].createElement("div", {
      className: classes([prefixClasses(props.classNamePrefixes, ['__image-container']), props.attribution && 'has-attribution'])
    }, React__default['default'].createElement("img", {
      className: prefixClasses(props.classNamePrefixes, ['__image']),
      src: src,
      "aria-label": Adapt.a11y.normalize(props.alt),
      "aria-hidden": !props.alt,
      loading: "eager"
    }), props.attribution && React__default['default'].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution'])
    }, React__default['default'].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution-inner'])
    }, html(props.attribution))));
  });

  register("choose", function Choose(props) {
    var ariaLabels = Adapt.course.get('_globals')._accessibility._ariaLabels;

    var _id = props._id,
        _isEnabled = props._isEnabled,
        _isInteractionComplete = props._isInteractionComplete,
        _isCorrect = props._isCorrect,
        _canShowMarking = props._canShowMarking,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        onKeyPress = props.onKeyPress,
        onItemOptionSelect = props.onItemOptionSelect,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        isInteractive = props.isInteractive;

    var shouldShowMarking = isInteractive() && _canShowMarking;

    return React__default['default'].createElement("div", {
      className: "component__inner choose__inner"
    }, React__default['default'].createElement(templates.header, props), React__default['default'].createElement("div", {
      className: classes(['component__widget', 'choose__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', _isCorrect && 'is-correct']),
      role: "radiogroup",
      "aria-labelledby": (displayTitle || body || instruction) && "".concat(_id, "-header")
    }, props._items.map(function (_ref, index) {
      var text = _ref.text,
          _graphic = _ref._graphic,
          _options = _ref._options,
          _index = _ref._index,
          _isCorrect = _ref._isCorrect,
          _selected = _ref._selected;
      return React__default['default'].createElement("div", {
        className: classes(["choose__item item-".concat(index), _selected && 'is-selected', _selected && "selected-option-".concat(_selected._index), _isInteractionComplete && _isCorrect && 'is-correct', _isInteractionComplete && !_isCorrect && 'is-incorrect']),
        key: _index,
        "data-index": _index
      }, React__default['default'].createElement("div", {
        className: classes(['choose__item-state', _isInteractionComplete && _isCorrect && 'choose__item-correct-icon', _isInteractionComplete && !_isCorrect && 'choose__item-incorrect-icon'])
      }, React__default['default'].createElement("div", {
        className: "icon"
      })), React__default['default'].createElement("div", {
        className: "choose__item-text"
      }, html(compile(text))), React__default['default'].createElement(templates.image, _extends({}, _graphic, {
        classNamePrefixes: ['choose__item'],
        attributionClassNamePrefixes: ['component', 'choose']
      })), React__default['default'].createElement("div", {
        className: "choose__item-choices"
      }, _options.map(function (option) {
        return React__default['default'].createElement("div", {
          className: classes(['choose__item-choice', option._isSelected && 'is-selected', _isCorrectAnswerShown && option._isCorrect && 'is-correct', _isCorrectAnswerShown && !option._isCorrect && 'is-incorrect']),
          key: option._index
        }, React__default['default'].createElement("label", {
          "aria-hidden": true,
          htmlFor: "input-".concat(_id, "-").concat(_index, "-").concat(option._index),
          "data-adapt-index": _index
        }, React__default['default'].createElement("div", {
          className: "choose__item-choice-text"
        }, html(compile(option.text))), React__default['default'].createElement(templates.image, _extends({}, option._graphic, {
          classNamePrefixes: ['choose__item-choice'],
          attributionClassNamePrefixes: ['component', 'choose']
        })), React__default['default'].createElement("div", {
          className: "choose__item-icon"
        }, React__default['default'].createElement("div", {
          className: "icon"
        }))), React__default['default'].createElement("input", {
          type: "radio",
          name: "choices-".concat(_id, "-").concat(_index),
          id: "input-".concat(_id, "-").concat(_index, "-").concat(option._index),
          value: option._index,
          disabled: !_isEnabled,
          "aria-label": !shouldShowMarking ? "".concat(_isCorrect ? ariaLabels.correct : ariaLabels.incorrect, ", ").concat(Adapt.a11y.normalize(text)) : "".concat(Adapt.a11y.normalize(text)),
          "data-adapt-index": _index,
          onKeyPress: onKeyPress,
          onChange: onItemOptionSelect
        }));
      })));
    })), React__default['default'].createElement("div", {
      className: "btn__container"
    }));
  });

  var LinkWrapper = function (_ref) {
    var href = _ref.href,
        children = _ref.children,
        target = _ref.target,
        className = _ref.className,
        role = _ref.role;
    return href ? React__default['default'].createElement("a", {
      href: href,
      target: target,
      className: className,
      role: role
    }, children) : children;
  };

  register("graphic", function Graphic(props) {
    var _graphic = props._graphic;
    return React__default['default'].createElement("div", {
      className: "component__inner graphic__inner"
    }, React__default['default'].createElement(templates.header, props), React__default['default'].createElement("div", {
      className: "component__widget graphic__widget"
    }, React__default['default'].createElement(LinkWrapper, {
      href: _graphic._url,
      target: _graphic._target,
      className: "graphic__link js-graphic-link",
      role: "link"
    }, React__default['default'].createElement(templates.image, _extends({}, _graphic, {
      classNamePrefixes: ['component', 'graphic']
    })))));
  });

  register("text", function Text(props) {
    return React__default['default'].createElement("div", {
      className: "component__inner text__inner"
    }, React__default['default'].createElement(templates.header, props));
  });

  register("drop-items", function DropItems(props) {
    var _id = props._id,
        _isEnabled = props._isEnabled,
        _isInteractionComplete = props._isInteractionComplete,
        _isCorrect = props._isCorrect,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        _canShowMarking = props._canShowMarking,
        displayTitle = props.displayTitle,
        body = props.body,
        _graphic = props._graphic,
        instruction = props.instruction,
        isInteractive = props.isInteractive;
    var shouldShowMarking = !isInteractive() && _canShowMarking;
    return React__default['default'].createElement("div", {
      className: "component__inner dropitems__inner"
    }, React__default['default'].createElement(templates.header, props), React__default['default'].createElement("div", {
      className: classes(['component__widget', 'dropitems__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', _isCorrect && 'is-correct']),
      role: "section",
      "aria-labelledby": (displayTitle || body || instruction) && "".concat(_id, "-header")
    }, React__default['default'].createElement("div", {
      className: "dropitems__container"
    }, props._items.map(function (_ref, index) {
      var _index = _ref._index,
          title = _ref.title,
          body = _ref.body,
          _graphic = _ref._graphic,
          _shouldBeSelected = _ref._shouldBeSelected,
          _isActive = _ref._isActive;
      return React__default['default'].createElement("div", {
        className: classes(["dropitems__item dropitems__item-".concat(index), (_isCorrectAnswerShown ? _shouldBeSelected : _isActive) && 'is-selected', shouldShowMarking && _shouldBeSelected && 'is-correct', shouldShowMarking && !_shouldBeSelected && 'is-incorrect']),
        key: _index
      }, React__default['default'].createElement("div", {
        className: classes(['dropitems__item-state'])
      }, React__default['default'].createElement("div", {
        className: "icon"
      })), _graphic && React__default['default'].createElement(templates.image, _extends({}, _graphic, {
        classNamePrefixes: ['dropitems__item-graphic'],
        attributionClassNamePrefixes: ['component', 'dropitems']
      })), title && React__default['default'].createElement("div", {
        className: "dropitems__item-title"
      }, html(compile(title))), body && React__default['default'].createElement("div", {
        className: "dropitems__item-title"
      }, html(compile(body))));
    })), React__default['default'].createElement("div", {
      className: "dropitems__dropzone"
    }, React__default['default'].createElement("div", {
      className: "dropitems__dropzone-inner"
    }, _graphic && React__default['default'].createElement(templates.image, _extends({}, _graphic, {
      classNamePrefixes: ['dropitems__item-graphic'],
      attributionClassNamePrefixes: ['component', 'dropitems']
    }))))), React__default['default'].createElement("div", {
      className: "btn__container"
    }));
  });

  register("lottieInteractivity", function LottieInteractivity(props) {
    var lottieplayer = props.lottieplayer,
        description = props.description,
        failed = props.failed;
    return React__default['default'].createElement("div", {
      className: "component__inner lottieinteractivity__inner"
    }, React__default['default'].createElement(templates.header, props), failed && React__default['default'].createElement("p", {
      className: "lottieinteractivity__error"
    }, failed), React__default['default'].createElement("div", {
      className: "component__widget lottieinteractivity__widget"
    }, React__default['default'].createElement("div", {
      dangerouslySetInnerHTML: {
        __html: lottieplayer
      }
    })), React__default['default'].createElement("div", {
      className: "lottieinteractivity__description"
    }, html(description)));
  });

  $('body').append(Handlebars.templates.loading());
  Adapt.data.on('ready', function triggerInit() {
    Adapt.log.debug('Calling Adapt.init');
    Adapt.init();
    Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');
  }).init();

});
// Allow ES export default to be exported as amd modules
window.__AMD = function(id, value) {
  window.define(id, function() { return value; }); // define for external use
  window.require([id]); // force module to load
  return value; // return for export
};
//# sourceMappingURL=adapt.min.js.map
